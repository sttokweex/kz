var Util = require("../../../../utils/slot_utils")

function SlotMachine() {
    this.expendReel = 0;
    this.respinWildPosition = 0;
    this.expendReelPositions = [];
    this.respinStatus = "NORESPIN";
    this.prevRespinStatus = "NORESPIN";
    this.respinIndex = 0;
    this.respinCacheList = [];
    this.respinWinMoney = 0;

    this.freeSpinIndex = 0;
    this.freeSpinWinMoney = 0;
    this.freeSpinExpendReels = [];
    this.freeSpinMulti = 1;
    this.freeSpinLeftWildCount = 2;
    this.freeSpinRespinWildAddFlag = false;

    // Required
    this.view = [];
    this.winMoney = 0;
    this.winLines = [];
    this.virtualReels = {};
    this.gameSort = "BASE";
    this.currentGame = "BASE";
    this.prevGameMode = "BASE";
    this.totalBet = 0;
    this.prevBalance = 0;
    this.patternCount = 2000;
    this.lowLimit = 10;
    this.betPerLine = 0;
    this.lineCount = 20;
    this.jackpotType = ["FREE"];

    this.buyMulti = 100;
    this.buyPatternCount = 50;
};

var slotWidth = 5, slotHeight = 4;
var baseReels = [
    [11, 12, 13, 8, 8, 3, 7, 11, 5, 5, 6, 9, 4, 10, 3, 13, 4, 11, 8, 10, 8, 11, 9, 12, 12, 8, 12, 13, 7, 12, 8, 3, 1, 6, 4, 6, 5, 8, 13, 4, 13, 6, 8, 8, 11, 7, 6, 13, 2, 6, 6, 6, 11, 4, 13, 13, 7, 9, 4, 12, 13, 9, 3, 7, 10, 12, 12, 7, 10, 9, 1, 12, 13, 12, 12, 10, 10, 8, 12, 13, 8, 8, 6, 12, 13, 1, 5, 9, 13, 2, 8, 13, 7, 4, 9, 8, 10, 13, 7, 13, 10, 3, 7, 7, 12, 12, 3, 1, 10, 8, 13, 7, 6, 2, 3, 8, 4, 9, 6, 10, 12, 2, 7, 2, 3, 9, 9, 7, 6, 10, 10, 7, 13, 13, 6, 7, 1, 10, 11, 3, 8, 6, 13, 6, 11, 8, 9, 8, 6, 2, 13, 3, 10, 11, 7, 12, 8, 8, 6, 13, 4, 10, 12, 1, 8, 9, 3, 13, 10, 13, 1, 11, 13, 13, 7, 11, 13, 9, 10, 7, 11, 7, 4, 2, 11, 2, 2, 2, 5, 3, 11, 12, 9, 11, 9, 10, 10, 9, 8, 12, 10, 1, 11, 9, 6, 13, 12, 3, 2, 11, 10, 9, 4, 5, 12, 13, 11, 13, 8, 10, 10, 9, 2, 12, 10, 10, 5, 7, 2, 9, 10, 1, 4, 6, 10, 9, 12, 13, 4, 1, 12, 12, 12, 6, 11, 5, 10, 12, 6, 13, 5, 9, 6, 3, 5, 9, 5, 13, 7, 8, 8, 3, 8, 7, 8, 7, 4, 3, 1, 2, 11, 6, 5, 7, 12, 5, 1, 6, 2, 2, 13, 10, 9, 10, 4, 11, 13, 7, 13, 13, 13, 11, 6, 9, 6, 8, 7, 3, 9, 6, 12, 12, 8, 7, 2, 7, 4, 12, 12, 11, 9, 12, 7, 1, 9, 7, 13, 12, 10, 6, 3, 8, 9, 11, 12, 5, 8, 5, 11, 13, 8, 8, 8, 12, 9, 6, 7, 13, 11, 13, 1, 8, 12, 7, 6, 12, 8, 11, 6, 10, 6, 10, 9, 13, 13, 5, 4, 8, 12, 8, 11, 2, 7, 11, 11, 11, 9, 9, 13, 7, 9, 8, 13, 13, 13, 9, 1, 3, 13, 8, 4, 11, 10, 13, 11, 4, 5, 8, 6, 11, 9, 2, 2, 2, 13, 6, 5, 12, 12, 3, 11, 9, 13, 8, 4, 11, 5, 5, 8, 5, 4, 12, 12, 12, 6, 10, 6, 9, 2, 11, 12, 9, 1, 6, 10, 2, 10, 3, 11, 12, 12, 9, 11, 10, 12, 11, 7, 1, 9, 10, 9, 11, 5, 10, 12, 9, 10, 12, 11, 11, 5, 6, 13, 8, 9, 8, 11, 12, 13, 4, 11, 12, 2, 9, 7, 9, 11, 9, 4, 3, 1, 11, 10, 13, 13, 9, 13, 2, 11, 12, 10, 6, 5, 9, 13, 7, 13, 13, 3, 10, 5, 7, 13, 9, 1, 12, 2, 9, 4, 5, 7, 8, 4, 3, 5, 6, 8, 13, 2, 10, 3, 11, 3, 13, 12, 9, 4, 13, 9, 11, 7, 11, 9, 5, 12, 12, 9, 11, 6, 8, 7, 11, 10, 12, 7, 6, 11, 5, 13, 9, 8, 13, 8, 9, 2, 5, 6, 7, 11, 11, 4, 6, 6, 13, 8, 10, 13, 13, 11, 11, 11, 3, 8, 10, 11, 13, 5, 13, 11, 7, 6, 13, 10, 7, 3, 12, 10, 10, 8, 13, 9, 8, 6, 8, 5, 13, 4, 7, 8, 4, 6, 5, 3, 8, 6, 12, 11, 12, 10, 10, 4, 9, 12, 2, 1, 2, 7, 4, 11, 12, 1, 6, 5, 11, 10, 8, 5, 8, 8, 7, 8, 12, 11, 6, 8, 5, 2, 4, 11, 4, 1, 13, 12, 11, 3, 10, 13, 13, 13, 6, 11, 8, 2, 13, 8, 13, 2, 13, 7, 11, 7, 9, 7, 4, 9, 12, 7, 4, 10, 7, 9, 12, 6, 8, 3, 11, 13, 5, 13, 13, 13, 4, 5, 8, 3, 10, 7, 11, 9, 12, 13, 12, 7, 12, 9, 10, 13, 10, 3, 9, 5, 8, 13, 13, 7, 2, 11, 10, 6, 4, 11, 13, 9, 1, 7, 11, 2, 8, 2, 5, 11, 2, 4, 2, 3, 2, 13, 11, 9, 13, 2, 7, 5, 5, 1, 7, 2, 6, 11, 9, 7, 13, 8, 9, 6, 6, 9, 6, 7, 2, 10, 13, 2, 4, 9, 9, 9, 13, 13, 10, 6, 10, 11, 8, 12, 2, 9, 8, 7, 12, 2, 4, 13, 9, 10, 13, 8, 8, 11, 13, 8, 6, 12, 5, 10, 8, 5, 12, 12, 11, 4, 11, 12, 13, 13, 5, 12, 10, 5, 13, 8, 6, 10, 11, 13, 12, 10, 10, 5, 9, 9, 11, 12, 11, 9, 7, 12, 5, 9, 13, 9, 3, 5, 12, 11, 5, 6, 11, 13, 13, 11, 10, 7, 10, 2, 7, 1, 10, 11, 9, 12, 6, 9, 8, 2, 1, 11, 12, 3, 12, 9, 3, 9, 5, 10, 12, 11, 10, 9, 9, 13, 5, 12, 10, 13, 12, 9, 4, 8, 7, 9, 10, 12, 1, 9, 6, 10, 13, 4, 6, 3, 9, 8, 7, 12, 12, 2, 10, 7, 5, 9, 6, 8, 4, 7, 9, 3, 11, 11, 12, 8, 13, 1, 8, 8, 8, 11, 12, 7, 6, 6, 13, 9, 7, 13, 4, 7, 5, 13, 12, 11, 1, 12, 12, 5, 9, 3, 7, 11, 9, 9, 2, 5, 9, 9, 4, 4, 2, 10, 10, 10, 6, 3, 10, 3, 9, 7, 2, 11, 13, 9, 5, 8, 4, 4, 13, 9, 8, 5, 3, 5, 3, 1, 9, 8, 7, 13, 11, 12, 11, 8, 7, 2, 2, 13, 8, 10, 13, 8, 12, 7, 8, 12, 8, 6, 1, 6, 10, 12, 2, 12, 11, 10, 13, 5, 6, 13, 7, 2, 3, 8, 13, 4, 10, 7, 8, 5, 6, 4, 9, 12, 13, 13, 12, 9, 6, 6, 7, 12, 7, 11, 10, 8, 9, 7, 11, 7, 1, 2, 11, 10, 3, 2, 11, 7, 11, 8, 7, 6, 8, 7, 4, 4, 9, 12, 9, 3, 2, 11, 4, 12, 8, 13, 9, 11, 8, 6, 9, 4, 11, 7, 2, 4, 9, 9, 3, 11, 13, 9, 1, 13, 10, 5, 9, 7, 4, 9, 9, 9, 12, 8, 8, 5, 3, 6, 8, 2, 12, 4, 5, 2, 3, 5, 12, 6, 10, 11, 7, 7, 12, 9, 11, 7, 13, 5, 1, 11, 11, 13, 5, 1, 6, 4, 12, 9, 10, 11, 8, 5, 9, 12, 12, 1, 10, 11, 12, 6, 6, 6, 11, 8, 9, 4, 7, 3, 11, 11, 13, 12, 9, 1, 5, 8, 13, 11, 2, 2, 2, 11, 1, 12, 5, 13, 11, 10, 2, 12, 9, 12, 10, 5, 6, 8, 11, 8, 13, 8, 8, 6, 13, 6, 9, 9, 11, 1, 11, 10, 6, 11, 6, 5, 11, 11, 6, 8, 1, 4, 13, 6, 5, 7, 4, 10, 12, 6, 11, 7, 4, 13, 7, 3, 5, 12, 12, 11, 6, 13, 5, 10, 10, 2, 8, 9, 9, 8, 10, 8, 7, 5, 1, 10, 10, 6, 11, 13, 6, 12, 13, 8, 8, 12, 1, 9, 8, 9, 10, 10, 4, 7, 13, 9, 5, 1, 11, 6, 8, 2, 4, 5, 12, 6, 10, 12, 12, 1, 4, 13, 5, 1, 6, 5, 13, 7, 4, 7, 12, 9, 12, 12, 3, 2, 13, 7, 1, 8, 5, 4, 3, 10, 9, 10, 3, 8, 8, 10, 11, 12, 7, 9, 8, 11, 9, 11, 8, 13, 11, 11, 13, 6, 13, 11, 1, 13, 10, 6, 4, 12, 9, 8, 11, 13, 9, 6, 4, 10, 12, 12, 12, 8, 9, 11, 8, 8, 7, 10, 11, 1, 11, 11, 6, 12, 7, 2, 13, 5, 8, 6, 9, 7, 12, 6, 6, 9, 2, 11, 10, 8, 2, 13, 7, 9, 8, 12, 12, 9, 1, 11, 11, 12, 9, 10, 8, 11, 5, 12, 11, 10, 10, 7, 13, 13, 12, 12, 9, 5, 10, 5, 13, 6, 2, 9, 5, 7, 10, 7, 10, 2, 10, 12, 11, 7, 11, 12, 13, 8, 13, 5, 3, 8, 6, 10, 13, 12, 4, 9, 3, 7, 5, 7, 7, 7, 10, 4, 10, 11, 12, 12, 9, 1, 13, 10, 12, 9, 12, 11, 10, 1, 13, 9, 12, 13, 6, 1, 9, 5, 12, 11, 5, 5, 7, 11, 12, 9, 10, 9, 2, 10, 5, 11, 2, 6, 7, 9, 1, 12, 12, 8, 8, 8, 6, 12, 5, 11, 12, 10, 12, 9, 7, 9, 10, 13, 13, 9, 4, 5, 6, 6, 10, 11, 7, 9, 12, 13, 5, 9, 7, 2, 11, 11, 9, 7, 8, 12, 1, 9, 11, 5, 11, 10, 4, 6, 12, 12, 8, 8, 8, 2, 2, 6, 5, 6, 6, 10, 12, 7, 5, 13, 13, 12, 7, 7, 13, 2, 5, 13, 3, 9, 11, 7, 3, 7, 8, 10, 5, 11, 12, 11, 8, 8, 3, 1, 11, 4, 4, 1, 11, 9, 8, 11, 1, 2, 6, 3, 12, 10, 1, 13, 5, 6, 9, 9, 8, 9, 5, 12, 4, 4, 13, 9, 4, 7, 5, 12, 6, 10, 11, 8, 11, 12, 1, 2, 9, 7, 3, 12, 1, 11, 13, 11, 12, 7, 6, 9, 7, 8, 9, 4, 3, 9, 11, 3, 8, 11, 12, 13, 9, 12, 13, 5, 7, 9, 7, 12, 12, 5, 2, 2, 12, 3, 9, 9, 11, 13, 6, 12, 4, 13, 8, 9, 6, 4, 6, 8, 5, 13, 7, 9, 9, 4, 1, 4, 12, 4, 7, 7, 4, 4, 11, 2, 10, 3, 11, 13, 2, 1, 11, 9, 11, 8, 11, 13, 9, 9, 7, 8, 12, 2, 2, 2, 12, 6, 10, 10, 2, 5, 10, 7, 13, 9, 7, 4, 9, 6, 10, 7, 3, 2, 9, 6, 12, 4, 1, 11, 7, 7, 7, 8, 11, 6, 12, 11, 4, 10, 9, 4, 6, 10, 5, 7, 12, 9, 8, 12, 13, 10, 9, 8, 12, 8, 13, 8, 4, 10, 6, 13, 10, 12, 9, 10, 9, 13, 9, 11, 7, 11, 4, 8, 7, 6, 13, 13, 1, 5, 8, 13, 8, 9, 2, 9, 2, 6, 8, 4, 13, 12, 6, 5, 9, 12, 7, 2, 7, 6, 9, 11, 7, 12, 2, 4, 7, 4, 11, 6, 13, 12, 7, 4, 13, 13, 8, 7, 5, 7, 10, 9, 6, 13, 9, 7, 8, 1, 5, 8, 10, 10, 2, 6, 7, 12, 8, 10, 8, 13, 8, 11, 10, 13, 11, 8, 2, 8, 6, 10, 11, 13, 13, 3, 5, 10, 3, 5, 8, 9, 2, 11, 8, 11, 7, 10, 12, 13, 11, 5, 6, 11, 1, 3, 8, 8, 9, 13, 8, 13, 10, 2, 1, 5, 11, 8, 12, 3, 7, 10, 8, 10, 8, 11, 6, 7, 10, 13, 12, 13, 1, 12, 2, 7, 6, 11, 11, 7, 9, 3, 5, 11, 1, 12, 9, 12, 11, 7, 10],
    [10, 9, 8, 6, 10, 9, 8, 9, 9, 7, 5, 5, 11, 11, 2, 8, 9, 10, 8, 2, 4, 9, 4, 13, 8, 8, 10, 13, 5, 10, 11, 4, 10, 5, 11, 11, 13, 3, 5, 2, 6, 4, 13, 7, 12, 9, 9, 12, 13, 11, 3, 9, 5, 11, 11, 4, 4, 12, 2, 2, 5, 7, 11, 11, 4, 6, 6, 4, 2, 12, 8, 9, 6, 7, 8, 4, 5, 5, 12, 11, 5, 12, 10, 9, 12, 4, 3, 10, 10, 13, 3, 5, 9, 5, 10, 6, 9, 5, 6, 8, 5, 13, 9, 12, 12, 7, 6, 10, 8, 7, 10, 13, 9, 12, 9, 6, 12, 12, 8, 7, 7, 10, 10, 12, 5, 7, 8, 7, 2, 12, 3, 11, 13, 2, 9, 2, 2, 2, 11, 4, 8, 13, 11, 6, 10, 2, 12, 8, 10, 12, 10, 12, 12, 2, 8, 7, 12, 8, 10, 8, 2, 2, 9, 10, 7, 4, 8, 6, 10, 13, 9, 12, 7, 5, 2, 8, 12, 4, 13, 5, 4, 13, 8, 7, 2, 2, 11, 7, 3, 13, 5, 5, 9, 8, 6, 13, 3, 12, 12, 11, 7, 3, 11, 4, 4, 10, 13, 12, 9, 13, 8, 9, 6, 6, 12, 7, 6, 9, 10, 12, 2, 12, 6, 5, 8, 9, 11, 11, 12, 8, 2, 10, 10, 9, 10, 8, 6, 2, 2, 8, 8, 12, 13, 13, 4, 6, 3, 13, 9, 10, 10, 11, 2, 2, 5, 8, 6, 11, 9, 9, 11, 12, 7, 13, 9, 13, 12, 2, 7, 8, 7, 6, 12, 12, 12, 11, 8, 7, 8, 12, 4, 13, 8, 6, 7, 10, 6, 9, 5, 6, 2, 8, 8, 6, 3, 10, 7, 6, 6, 9, 13, 10, 5, 7, 13, 4, 12, 5, 7, 7, 11, 3, 12, 6, 9, 11, 9, 12, 8, 12, 7, 6, 6, 12, 6, 13, 10, 12, 10, 5, 12, 5, 3, 7, 10, 2, 9, 8, 4, 10, 6, 4, 6, 11, 7, 13, 4, 9, 8, 8, 13, 5, 8, 8, 12, 10, 12, 10, 7, 9, 8, 13, 11, 6, 11, 11, 8, 13, 8, 7, 7, 2, 10, 5, 4, 12, 10, 13, 7, 2, 4, 13, 8, 4, 2, 3, 5, 13, 5, 4, 5, 12, 10, 10, 9, 12, 13, 11, 13, 5, 12, 8, 2, 8, 7, 9, 2, 6, 6, 3, 8, 8, 8, 7, 11, 10, 11, 6, 8, 5, 11, 10, 2, 11, 6, 2, 8, 7, 5, 5, 7, 10, 9, 6, 3, 9, 12, 4, 6, 9, 6, 3, 7, 4, 2, 9, 13, 4, 4, 10, 4, 12, 4, 10, 7, 8, 9, 2, 10, 6, 11, 10, 6, 9, 11, 10, 10, 12, 11, 8, 9, 10, 11, 2, 5, 9, 8, 9, 10, 12, 8, 8, 10, 5, 12, 12, 8, 7, 8, 12, 6, 11, 12, 5, 4, 9, 5, 8, 5, 6, 5, 10, 5, 6, 10, 9, 8, 2, 10, 5, 7, 7, 4, 12, 3, 8, 10, 9, 10, 4, 7, 11, 10, 5, 6, 11, 8, 7, 2, 7, 13, 9, 5, 11, 4, 12, 12, 13, 13, 7, 11, 6, 2, 8, 3, 12, 5, 12, 13, 13, 13, 3, 10, 12, 6, 9, 3, 6, 13, 10, 3, 7, 8, 5, 10, 11, 13, 6, 3, 11, 5, 5, 9, 5, 10, 10, 6, 3, 11, 6, 5, 10, 10, 9, 10, 6, 3, 12, 11, 9, 8, 7, 10, 8, 2, 4, 12, 10, 12, 4, 10, 7, 12, 8, 8, 3, 10, 9, 10, 13, 8, 13, 5, 13, 9, 12, 13, 6, 8, 5, 11, 8, 8, 3, 5, 12, 9, 7, 2, 7, 6, 10, 6, 3, 6, 6, 12, 8, 10, 12, 8, 11, 5, 5, 3, 13, 8, 2, 9, 2, 6, 13, 5, 9, 11, 10, 7, 4, 6, 13, 10, 11, 7, 11, 8, 4, 8, 2, 10, 13, 12, 13, 2, 6, 10, 9, 8, 7, 3, 4, 6, 8, 6, 12, 9, 4, 7, 7, 7, 4, 13, 10, 9, 9, 13, 10, 9, 5, 13, 10, 5, 11, 7, 3, 8, 13, 6, 11, 8, 13, 10, 8, 8, 2, 10, 11, 10, 10, 7, 3, 11, 9, 8, 10, 3, 11, 5, 12, 8, 13, 6, 6, 8, 10, 6, 5, 6, 5, 5, 12, 4, 4, 12, 13, 10, 7, 12, 3, 6, 13, 13, 7, 8, 11, 6, 3, 6, 6, 2, 7, 2, 13, 13, 2, 8, 9, 12, 7, 13, 6, 10, 12, 8, 7, 3, 6, 11, 13, 13, 3, 12, 13, 3, 7, 11, 4, 9, 9, 7, 13, 9, 13, 10, 10, 9, 10, 6, 13, 10, 12, 11, 3, 8, 4, 11, 4, 9, 6, 8, 13, 11, 11, 12, 7, 9, 4, 13, 12, 7, 12, 5, 5, 4, 9, 9, 9, 8, 4, 13, 7, 5, 9, 4, 12, 12, 3, 5, 8, 8, 9, 4, 13, 9, 12, 4, 11, 2, 9, 5, 8, 11, 6, 13, 6, 12, 3, 4, 9, 5, 3, 11, 8, 13, 11, 12, 8, 6, 10, 11, 13, 12, 13, 13, 7, 12, 10, 13, 7, 4, 13, 4, 5, 10, 12, 4, 4, 2, 11, 11, 13, 11, 2, 10, 12, 9, 6, 7, 11, 10, 7, 5, 5, 9, 10, 10, 11, 10, 5, 7, 2, 13, 3, 10, 8, 12, 4, 2, 11, 11, 6, 11, 9, 6, 5, 9, 11, 13, 13, 8, 4, 10, 8, 9, 12, 9, 8, 10, 13, 4, 5, 7, 8, 10, 2, 12, 6, 12, 6, 12, 9, 6, 8, 4, 4, 2, 10, 11, 10, 2, 8, 7, 11, 6, 6, 6, 10, 10, 12, 8, 3, 10, 5, 12, 9, 9, 12, 8, 6, 8, 7, 7, 8, 13, 9, 9, 7, 11, 7, 8, 7, 8, 12, 11, 9, 4, 7, 13, 11, 10, 6, 9, 5, 11, 9, 13, 12, 5, 10, 2, 5, 10, 12, 5, 8, 11, 6, 6, 11, 13, 12, 13, 5, 8, 7, 3, 12, 5, 8, 12, 4, 8, 12, 9, 8, 10, 4, 8, 8, 13, 7, 11, 9, 10, 8, 8, 9, 10, 2, 7, 5, 13, 11, 9, 4, 8, 5, 11, 5, 8, 7, 3, 9, 9, 13, 3, 12, 13, 9, 3, 6, 9, 3, 6, 9, 7, 7, 2, 8, 12, 9, 13, 12, 12, 3, 2, 8, 8, 9, 10, 11, 13, 7, 8, 5, 11, 10, 12, 9, 4, 12, 11, 11, 11, 10, 6, 9, 6, 6, 12, 5, 12, 4, 11, 12, 2, 4, 11, 13, 7, 12, 13, 4, 9, 10, 4, 9, 7, 5, 4, 6, 7, 11, 13, 11, 8, 7, 4, 10, 13, 12, 6, 7, 11, 12, 5, 2, 11, 4, 7, 6, 13, 5, 12, 8, 12, 12, 2, 11, 12, 12, 13, 10, 11, 3, 2, 8, 8, 9, 6, 7, 13, 4, 10, 11, 10, 8, 10, 4, 10, 7, 8, 10, 2, 7, 5, 3, 13, 12, 13, 4, 2, 9, 6, 9, 10, 8, 11, 8, 5, 12, 12, 11, 12, 7, 7, 12, 13, 10, 9, 8, 13, 12, 3, 12, 12, 12, 13, 6, 7, 12, 6, 9, 8, 2, 12, 11, 3, 6, 6, 2, 7, 11, 7, 13, 4, 10, 10, 10, 6, 9, 8, 2, 7, 11, 10, 11, 2, 9, 13, 9, 12, 5, 3, 9, 7, 12, 9, 2, 8, 4, 8, 10, 5, 9, 11, 5, 4, 11, 10, 8, 8, 4, 4, 9, 7, 11, 10, 6, 3, 6, 5, 6, 7, 7, 8, 9, 8, 7, 8, 13, 9, 13, 2, 12, 7, 8, 12, 7, 10, 10, 13, 11, 6, 6, 8, 7, 11, 9, 10, 11, 9, 12, 9, 10, 6, 10, 5, 9, 6, 11, 6, 3, 12, 9, 12, 12, 7, 12, 7, 3, 4, 10, 11, 13, 13, 5, 4, 10, 11, 7, 13, 9, 5, 10, 5, 8, 12, 12, 2, 9, 6, 6, 10, 9, 11, 7, 10, 7, 7, 10, 4, 7, 5, 5, 8, 3, 6, 12, 10, 12, 10, 8, 9, 13, 2],
    [12, 8, 9, 12, 5, 2, 10, 11, 8, 10, 13, 13, 6, 11, 9, 11, 3, 8, 11, 9, 7, 12, 2, 5, 13, 4, 12, 10, 11, 11, 10, 2, 6, 11, 12, 10, 7, 1, 9, 13, 5, 13, 8, 10, 12, 5, 2, 6, 5, 6, 11, 4, 1, 7, 8, 10, 6, 2, 4, 6, 3, 11, 5, 6, 8, 9, 12, 4, 6, 5, 6, 9, 10, 4, 13, 10, 13, 6, 7, 13, 11, 11, 10, 8, 9, 7, 9, 8, 8, 13, 10, 1, 9, 11, 9, 10, 7, 1, 7, 8, 3, 7, 4, 2, 2, 1, 2, 5, 11, 10, 12, 13, 10, 13, 12, 13, 5, 11, 13, 11, 9, 11, 12, 10, 13, 3, 1, 10, 8, 10, 7, 13, 11, 8, 5, 2, 13, 13, 13, 1, 13, 3, 11, 7, 12, 9, 9, 2, 5, 8, 5, 6, 7, 3, 6, 11, 11, 8, 5, 6, 13, 8, 9, 10, 7, 12, 12, 11, 8, 9, 8, 8, 12, 1, 10, 9, 2, 11, 12, 2, 6, 8, 13, 6, 6, 9, 13, 9, 13, 8, 7, 9, 10, 7, 3, 10, 5, 3, 11, 12, 13, 13, 7, 9, 6, 13, 10, 6, 3, 13, 1, 3, 10, 13, 8, 11, 5, 12, 10, 12, 7, 12, 8, 12, 5, 12, 13, 10, 13, 13, 9, 12, 12, 9, 6, 11, 12, 3, 11, 8, 11, 10, 13, 7, 10, 9, 13, 10, 1, 11, 12, 11, 12, 10, 13, 7, 7, 9, 13, 10, 8, 5, 3, 9, 10, 7, 4, 5, 13, 10, 10, 8, 12, 1, 9, 8, 6, 9, 8, 10, 10, 10, 6, 12, 9, 9, 3, 9, 11, 2, 9, 11, 13, 9, 4, 7, 11, 9, 11, 5, 11, 11, 7, 13, 11, 10, 8, 7, 5, 9, 8, 7, 10, 6, 11, 10, 8, 6, 1, 13, 11, 11, 9, 7, 4, 4, 12, 13, 9, 5, 2, 9, 3, 10, 5, 13, 1, 2, 9, 7, 10, 12, 12, 3, 7, 6, 12, 13, 10, 7, 4, 12, 6, 8, 13, 6, 9, 13, 13, 11, 11, 1, 6, 7, 7, 10, 11, 3, 10, 5, 2, 9, 8, 12, 5, 6, 10, 10, 1, 6, 3, 8, 2, 6, 5, 6, 12, 8, 5, 13, 11, 10, 10, 9, 5, 9, 6, 9, 12, 4, 13, 9, 13, 5, 8, 3, 11, 12, 6, 12, 7, 12, 9, 8, 13, 12, 5, 12, 4, 11, 7, 7, 7, 12, 13, 13, 2, 9, 11, 12, 7, 2, 10, 3, 3, 12, 8, 1, 11, 6, 9, 10, 7, 3, 10, 5, 11, 8, 3, 10, 6, 13, 9, 8, 11, 9, 9, 8, 7, 3, 5, 7, 11, 9, 12, 3, 9, 7, 9, 8, 5, 4, 13, 13, 6, 10, 13, 8, 12, 8, 11, 3, 13, 12, 10, 5, 4, 9, 5, 2, 13, 10, 12, 4, 9, 11, 2, 5, 8, 7, 11, 7, 6, 4, 12, 1, 5, 7, 9, 5, 6, 11, 7, 2, 13, 6, 7, 3, 11, 5, 10, 8, 13, 8, 6, 13, 11, 10, 11, 6, 2, 10, 6, 12, 10, 4, 6, 7, 13, 3, 11, 12, 2, 9, 8, 13, 10, 13, 7, 8, 13, 6, 2, 11, 5, 6, 11, 1, 9, 3, 11, 5, 8, 11, 11, 11, 10, 13, 13, 9, 4, 10, 1, 3, 10, 12, 2, 12, 4, 6, 10, 13, 9, 10, 2, 8, 11, 2, 7, 1, 7, 13, 9, 9, 10, 13, 6, 9, 9, 2, 6, 12, 6, 7, 6, 4, 12, 2, 12, 10, 10, 4, 3, 6, 11, 12, 9, 10, 7, 3, 4, 8, 6, 8, 4, 13, 7, 2, 8, 7, 2, 7, 8, 13, 13, 4, 11, 4, 5, 10, 9, 6, 11, 9, 9, 12, 10, 9, 3, 7, 7, 10, 9, 5, 6, 10, 12, 2, 10, 7, 7, 4, 10, 2, 9, 10, 7, 10, 13, 13, 5, 11, 12, 6, 13, 2, 12, 9, 2, 9, 6, 10, 10, 6, 13, 7, 12, 12, 3, 11, 13, 9, 13, 9, 6, 10, 4, 11, 8, 7, 1, 13, 9, 8, 8, 8, 11, 6, 10, 3, 10, 12, 13, 5, 11, 5, 2, 11, 3, 9, 11, 9, 11, 12, 11, 10, 7, 4, 6, 7, 4, 2, 9, 10, 12, 8, 8, 3, 4, 9, 3, 9, 6, 6, 9, 5, 4, 11, 9, 5, 4, 10, 7, 1, 8, 9, 8, 13, 12, 6, 13, 8, 11, 4, 2, 7, 11, 5, 5, 11, 1, 2, 11, 9, 7, 5, 12, 12, 13, 5, 11, 11, 8, 9, 9, 11, 5, 5, 8, 4, 13, 13, 5, 11, 4, 7, 12, 13, 8, 11, 6, 6, 7, 8, 11, 12, 13, 7, 9, 11, 7, 5, 13, 12, 3, 6, 13, 6, 12, 7, 6, 8, 4, 4, 12, 2, 5, 2, 5, 7, 10, 13, 13, 8, 9, 8, 13, 12, 10, 13, 6, 3, 9, 9, 9, 13, 9, 13, 5, 10, 10, 12, 12, 5, 1, 8, 10, 9, 13, 5, 9, 10, 11, 9, 12, 8, 4, 9, 4, 6, 3, 6, 5, 8, 8, 10, 9, 1, 4, 13, 8, 11, 10, 6, 11, 1, 11, 5, 11, 10, 6, 13, 7, 1, 8, 11, 4, 10, 10, 3, 1, 3, 10, 10, 1, 8, 2, 7, 11, 9, 11, 8, 10, 13, 6, 4, 12, 6, 7, 9, 2, 5, 11, 7, 12, 9, 13, 10, 11, 13, 6, 13, 8, 2, 1, 13, 11, 4, 6, 2, 2, 5, 8, 11, 12, 12, 9, 12, 12, 9, 6, 10, 2, 2, 11, 8, 2, 13, 3, 10, 7, 8, 6, 4, 13, 9, 4, 2, 11, 10, 9, 12, 1, 10, 9, 4, 10, 11, 12, 5, 6, 2, 2, 2, 10, 6, 11, 4, 13, 9, 11, 11, 6, 11, 10, 6, 1, 9, 13, 6, 8, 2, 4, 13, 3, 6, 10, 7, 10, 5, 13, 12, 9, 5, 6, 13, 2, 9, 2, 11, 5, 11, 1, 8, 2, 2, 11, 12, 2, 10, 6, 7, 13, 10, 8, 1, 13, 5, 9, 13, 7, 7, 13, 7, 8, 4, 7, 12, 3, 6, 2, 5, 7, 2, 11, 6, 6, 8, 7, 4, 11, 10, 10, 6, 11, 4, 1, 8, 11, 7, 9, 13, 5, 13, 10, 9, 5, 7, 11, 9, 2, 5, 8, 3, 9, 2, 4, 8, 10, 8, 11, 6, 10, 2, 6, 8, 7, 11, 2, 6, 10, 13, 6, 12, 6, 9, 13, 2, 7, 11, 8, 11, 13, 10, 7, 9, 6, 12, 10, 7, 8, 1, 13, 6, 11, 12, 12, 12, 4, 13, 1, 3, 6, 8, 10, 6, 5, 11, 13, 7, 6, 6, 9, 10, 6, 10, 13, 1, 9, 10, 13, 12, 5, 7, 11, 9, 13, 6, 12, 13, 10, 13, 4, 2, 8, 11, 11, 3, 9, 5, 9, 7, 11, 13, 2, 13, 6, 10, 1, 11, 7, 10, 9, 13, 8, 5, 4, 11, 5, 6, 7, 9, 10, 11, 5, 13, 1, 7, 8, 2, 4, 4, 8, 11, 1, 6, 7, 7, 12, 11, 3, 4, 9, 1, 12, 8, 13, 12, 7, 2, 13, 4, 10, 9, 1, 8, 10, 10, 8, 3, 8, 1, 11, 4, 4, 11, 7, 3, 7, 4, 10, 7, 4, 9, 13, 3, 9, 8, 3, 6, 8, 6, 11, 10, 6, 9, 10, 7, 12, 5, 11, 13, 9, 12, 9, 7, 6, 6, 6, 4, 8, 13, 13, 7, 6, 12, 9, 7, 12, 7, 2, 13, 11, 9, 6, 10, 12, 1, 9, 7, 8, 4, 12, 9, 12, 6, 9, 12, 10, 10, 5, 7, 13, 3, 9, 8, 7, 13, 7, 8, 6, 5, 9, 7, 9, 7, 13, 9, 12, 6, 10, 8, 7, 12, 10, 9, 11, 3, 12, 7, 12, 2, 5, 12, 8, 8, 1, 4, 13, 8, 10, 4, 10, 3, 10, 1, 4, 4, 10, 12, 4, 13, 13, 11, 1, 11, 11, 5, 9, 11, 4, 11, 4, 7, 5, 11, 9, 1, 12, 7, 6, 9, 7, 13, 7, 3, 12, 11, 2, 10, 3, 10, 8, 11, 10, 11, 9, 12, 8, 9, 13, 10, 8, 13, 13, 8, 12, 11, 12, 12, 2, 9, 11, 5, 2, 8, 5],
    [4, 12, 8, 9, 10, 12, 5, 11, 6, 4, 6, 5, 4, 13, 11, 10, 12, 13, 13, 3, 11, 5, 8, 10, 6, 10, 7, 4, 13, 7, 9, 7, 10, 3, 5, 5, 9, 4, 9, 11, 4, 4, 5, 8, 4, 13, 10, 3, 12, 8, 3, 5, 11, 8, 10, 4, 7, 13, 6, 3, 4, 10, 9, 4, 11, 11, 13, 9, 12, 6, 8, 10, 11, 5, 6, 7, 10, 5, 4, 11, 3, 5, 7, 7, 6, 10, 7, 8, 13, 7, 11, 4, 5, 10, 6, 5, 10, 3, 8, 6, 9, 13, 13, 9, 10, 10, 11, 8, 9, 2, 13, 6, 6, 6, 3, 9, 7, 11, 7, 7, 9, 11, 3, 4, 4, 3, 6, 5, 3, 7, 10, 5, 10, 8, 9, 4, 11, 7, 4, 5, 7, 8, 5, 10, 9, 7, 7, 4, 9, 4, 2, 13, 11, 6, 11, 6, 11, 2, 9, 11, 3, 5, 7, 12, 11, 8, 10, 11, 13, 3, 4, 11, 12, 11, 6, 3, 5, 12, 12, 10, 6, 4, 8, 4, 11, 11, 3, 4, 2, 11, 9, 8, 12, 3, 10, 5, 5, 12, 7, 4, 9, 7, 12, 13, 4, 12, 13, 6, 13, 9, 12, 3, 4, 13, 3, 12, 2, 2, 9, 3, 10, 13, 11, 4, 13, 13, 10, 10, 10, 2, 10, 13, 13, 11, 10, 8, 5, 8, 10, 13, 10, 5, 7, 11, 8, 7, 12, 10, 9, 4, 10, 3, 2, 11, 8, 9, 11, 13, 8, 6, 3, 3, 2, 10, 2, 12, 9, 11, 3, 3, 11, 11, 12, 12, 8, 3, 3, 10, 8, 4, 3, 12, 3, 7, 12, 11, 13, 13, 4, 12, 9, 7, 3, 11, 10, 11, 13, 11, 9, 6, 10, 7, 12, 8, 6, 13, 2, 11, 8, 9, 3, 4, 4, 6, 10, 6, 3, 10, 3, 2, 13, 3, 13, 3, 6, 8, 13, 13, 4, 4, 10, 10, 7, 5, 3, 13, 10, 6, 11, 13, 2, 4, 2, 2, 2, 10, 10, 8, 2, 11, 12, 10, 10, 11, 9, 7, 11, 11, 13, 10, 11, 13, 8, 6, 8, 7, 13, 7, 10, 4, 12, 6, 3, 12, 10, 10, 13, 7, 6, 12, 13, 13, 9, 9, 6, 2, 3, 10, 12, 12, 13, 8, 11, 8, 9, 11, 8, 13, 12, 3, 5, 5, 9, 4, 9, 4, 12, 9, 3, 9, 12, 5, 10, 6, 2, 9, 6, 5, 10, 10, 5, 13, 13, 8, 13, 5, 8, 8, 12, 11, 3, 6, 10, 6, 13, 11, 9, 11, 5, 3, 12, 8, 3, 5, 11, 8, 5, 12, 6, 11, 10, 7, 13, 7, 2, 13, 4, 11, 11, 11, 5, 8, 6, 12, 3, 5, 7, 10, 3, 9, 13, 2, 8, 13, 9, 13, 9, 12, 7, 5, 12, 5, 4, 11, 3, 7, 9, 5, 12, 4, 2, 5, 9, 9, 13, 4, 10, 10, 13, 3, 9, 13, 13, 12, 6, 10, 10, 7, 10, 6, 12, 4, 9, 7, 6, 10, 11, 10, 3, 7, 13, 2, 10, 10, 4, 4, 6, 13, 3, 7, 5, 12, 4, 10, 13, 5, 13, 13, 11, 12, 13, 12, 5, 13, 13, 3, 7, 6, 3, 10, 8, 12, 8, 12, 9, 10, 10, 9, 12, 5, 4, 3, 6, 12, 11, 3, 6, 11, 13, 9, 7, 7, 7, 10, 6, 2, 13, 9, 10, 6, 3, 13, 9, 12, 8, 11, 3, 6, 9, 8, 3, 12, 9, 8, 12, 5, 7, 6, 12, 11, 12, 13, 4, 11, 5, 11, 10, 11, 11, 13, 10, 10, 3, 5, 6, 4, 13, 6, 8, 12, 13, 10, 6, 7, 2, 13, 9, 7, 5, 11, 5, 3, 10, 4, 5, 6, 12, 8, 12, 13, 8, 13, 4, 12, 12, 4, 12, 13, 11, 12, 11, 8, 6, 12, 7, 9, 12, 6, 12, 11, 7, 9, 12, 6, 6, 8, 9, 12, 7, 7, 2, 11, 3, 10, 11, 3, 7, 2, 3, 4, 6, 11, 2, 8, 8, 8, 3, 12, 11, 5, 2, 8, 7, 4, 7, 11, 13, 10, 9, 8, 13, 7, 8, 3, 5, 4, 7, 12, 13, 11, 3, 7, 5, 2, 12, 13, 5, 11, 9, 3, 6, 4, 8, 12, 10, 11, 4, 7, 11, 11, 4, 10, 10, 8, 11, 10, 2, 12, 6, 13, 10, 11, 4, 13, 2, 8, 2, 10, 12, 13, 11, 11, 5, 2, 13, 4, 12, 6, 8, 11, 5, 3, 5, 9, 6, 4, 3, 10, 12, 3, 7, 12, 12, 9, 10, 12, 5, 7, 8, 5, 4, 10, 6, 8, 7, 13, 10, 6, 11, 12, 6, 3, 6, 6, 9, 10, 10, 12, 12, 12, 7, 5, 3, 7, 12, 6, 12, 13, 6, 12, 12, 11, 11, 2, 12, 12, 4, 5, 8, 7, 10, 10, 9, 12, 10, 12, 13, 3, 13, 4, 3, 13, 8, 5, 12, 9, 5, 4, 11, 4, 6, 13, 5, 11, 8, 4, 10, 3, 7, 10, 7, 4, 2, 11, 13, 13, 10, 3, 7, 12, 10, 11, 4, 6, 12, 7, 11, 10, 13, 13, 9, 8, 10, 12, 6, 2, 12, 9, 9, 8, 2, 8, 5, 11, 12, 7, 4, 13, 4, 3, 7, 9, 5, 7, 9, 2, 7, 11, 9, 8, 5, 12, 6, 13, 6, 12, 10, 5, 6, 11, 13, 11, 13, 13, 13, 10, 2, 12, 8, 11, 11, 7, 12, 9, 11, 12, 3, 11, 13, 13, 7, 4, 13, 13, 9, 9, 11, 6, 13, 3, 3, 8, 11, 6, 6, 7, 4, 6, 11, 11, 13, 4, 8, 2, 10, 12, 4, 10, 6, 13, 5, 8, 8, 10, 9, 7, 11, 13, 4, 13, 5, 12, 7, 5, 8, 13, 10, 2, 4, 5, 5, 11, 5, 11, 12, 9, 11, 5, 3, 11, 13, 3, 7, 9, 10, 3, 8, 5, 10, 12, 7, 11, 6, 13, 13, 5, 12, 7, 8, 4, 10, 10, 12, 10, 6, 12, 11, 13, 12, 3, 9, 10, 8, 10, 3, 11, 8, 9, 9, 9, 11, 13, 7, 12, 12, 13, 8, 12, 7, 12, 13, 10, 10, 12, 5, 10, 4, 2, 10, 12, 7, 4, 6, 5, 5, 9, 11, 9, 12, 13, 12, 12, 7, 8, 6, 11, 2, 9, 10, 3, 13, 7, 2, 2, 9, 12, 13, 3, 7, 11, 6, 13, 5, 9, 5, 9, 9, 11, 4, 4, 6, 8, 8, 2, 6, 7, 13, 12, 8, 8, 5, 4, 11, 6, 13, 4, 13, 11, 11, 9, 12, 10, 5, 6, 10, 13, 2, 5, 2, 8, 8, 10, 11, 9, 10, 6, 7, 10, 8, 12, 2, 8, 9, 8, 12, 10, 10, 12, 11, 2, 12, 11, 5],
    [6, 2, 7, 7, 11, 12, 13, 5, 7, 1, 4, 3, 5, 8, 13, 6, 13, 8, 5, 6, 1, 10, 10, 13, 7, 5, 9, 4, 10, 6, 8, 10, 11, 8, 12, 4, 10, 3, 12, 12, 3, 4, 13, 5, 11, 11, 13, 6, 4, 12, 11, 10, 11, 2, 7, 11, 6, 7, 5, 12, 11, 13, 13, 6, 4, 13, 12, 2, 13, 6, 13, 11, 4, 10, 8, 1, 9, 13, 13, 12, 6, 12, 1, 11, 5, 13, 9, 7, 13, 9, 3, 13, 4, 13, 2, 12, 7, 8, 4, 9, 13, 12, 7, 4, 7, 10, 11, 10, 7, 6, 8, 7, 8, 5, 7, 13, 7, 7, 10, 6, 7, 4, 12, 5, 6, 12, 10, 5, 1, 9, 2, 2, 4, 7, 9, 8, 8, 3, 2, 1, 13, 10, 13, 9, 6, 12, 3, 3, 7, 3, 13, 2, 4, 9, 10, 9, 5, 4, 3, 12, 12, 2, 9, 5, 6, 7, 7, 7, 8, 13, 9, 6, 5, 10, 10, 10, 12, 4, 11, 5, 10, 2, 6, 5, 8, 6, 5, 8, 13, 4, 13, 8, 8, 4, 8, 6, 4, 1, 9, 8, 12, 13, 4, 8, 2, 6, 11, 10, 7, 6, 12, 7, 11, 3, 6, 9, 12, 8, 13, 1, 6, 9, 10, 11, 10, 11, 4, 12, 7, 6, 10, 5, 9, 12, 10, 13, 9, 1, 5, 9, 11, 3, 8, 1, 8, 13, 13, 7, 9, 10, 4, 9, 3, 11, 3, 8, 10, 8, 11, 5, 12, 11, 10, 6, 4, 6, 2, 6, 13, 6, 12, 7, 3, 5, 12, 12, 8, 10, 11, 5, 12, 3, 4, 5, 2, 5, 8, 1, 4, 12, 13, 9, 9, 12, 9, 13, 10, 12, 10, 7, 10, 8, 12, 9, 10, 2, 6, 10, 13, 9, 7, 10, 6, 2, 1, 3, 10, 12, 2, 4, 5, 7, 3, 4, 7, 6, 4, 13, 3, 1, 5, 4, 2, 12, 9, 9, 9, 5, 11, 9, 5, 5, 3, 1, 11, 5, 11, 10, 4, 3, 1, 11, 13, 5, 11, 5, 10, 10, 7, 5, 9, 12, 6, 7, 12, 3, 5, 12, 13, 5, 9, 11, 11, 10, 8, 3, 9, 2, 13, 13, 13, 10, 2, 8, 1, 12, 4, 7, 12, 2, 7, 12, 12, 4, 11, 9, 12, 4, 11, 2, 8, 3, 8, 6, 11, 11, 7, 4, 12, 4, 10, 5, 2, 13, 9, 12, 13, 11, 2, 3, 8, 13, 5, 9, 11, 7, 9, 12, 9, 11, 9, 5, 8, 13, 7, 10, 5, 12, 5, 6, 13, 11, 3, 4, 12, 2, 3, 11, 10, 13, 3, 10, 7, 10, 11, 1, 9, 10, 6, 4, 2, 11, 5, 10, 8, 1, 11, 10, 12, 12, 6, 12, 13, 8, 6, 4, 6, 8, 10, 11, 2, 6, 4, 11, 9, 11, 7, 4, 12, 8, 9, 11, 11, 5, 12, 2, 7, 11, 9, 3, 10, 12, 5, 8, 6, 6, 6, 13, 13, 6, 5, 11, 13, 13, 8, 7, 9, 11, 9, 13, 5, 5, 13, 12, 12, 7, 10, 2, 12, 4, 1, 11, 6, 3, 11, 5, 3, 9, 7, 3, 9, 13, 2, 2, 3, 1, 10, 11, 3, 3, 10, 5, 2, 10, 11, 9, 9, 7, 11, 6, 8, 8, 7, 9, 5, 1, 9, 12, 9, 7, 2, 8, 5, 3, 10, 9, 7, 11, 6, 10, 4, 4, 5, 2, 12, 12, 10, 6, 12, 1, 11, 10, 4, 7, 12, 2, 11, 8, 10, 7, 10, 4, 13, 11, 9, 11, 5, 7, 10, 3, 9, 9, 5, 12, 11, 13, 4, 3, 8, 13, 12, 6, 2, 11, 13, 10, 12, 12, 10, 2, 5, 11, 9, 6, 12, 1, 3, 5, 10, 9, 3, 12, 7, 10, 7, 5, 3, 7, 7, 8, 10, 11, 13, 6, 11, 1, 9, 2, 5, 12, 13, 9, 4, 13, 12, 12, 6, 4, 8, 13, 12, 1, 11, 10, 10, 10, 5, 6, 6, 8, 4, 4, 10, 11, 10, 5, 2, 10, 5, 2, 12, 12, 6, 4, 5, 6, 13, 12, 4, 12, 2, 12, 4, 13, 4, 8, 12, 5, 13, 10, 13, 8, 6, 11, 9, 11, 9, 7, 12, 4, 11, 10, 13, 3, 13, 1, 9, 13, 5, 13, 6, 3, 10, 13, 10, 13, 10, 9, 6, 4, 7, 8, 3, 5, 3, 11, 5, 10, 9, 3, 4, 8, 4, 6, 8, 13, 5, 10, 9, 6, 13, 5, 9, 11, 6, 10, 6, 9, 3, 11, 6, 2, 4, 8, 4, 9, 10, 13, 11, 12, 9, 8, 4, 13, 7, 11, 5, 6, 7, 4, 1, 10, 12, 13, 7, 12, 6, 12, 12, 5, 9, 8, 12, 11, 11, 5, 6, 11, 10, 1, 12, 13, 11, 11, 4, 11, 10, 10, 13, 10, 13, 5, 5, 8, 1, 3, 9, 6, 9, 11, 7, 10, 9, 6, 7, 13, 10, 11, 3, 12, 7, 1, 8, 10, 2, 2, 2, 8, 1, 11, 8, 6, 10, 10, 13, 8, 4, 7, 6, 9, 6, 1, 13, 8, 12, 7, 11, 11, 11, 3, 8, 6, 7, 13, 5, 13, 6, 5, 8, 13, 6, 8, 12, 10, 12, 12, 4, 12, 10, 4, 10, 6, 4, 11, 11, 5, 10, 11, 10, 3, 3, 10, 11, 12, 6, 4, 4, 13, 5, 2, 10, 11, 1, 13, 9, 13, 7, 4, 13, 2, 1, 6, 12, 12, 13, 3, 7, 13, 9, 1, 7, 13, 13, 13, 11, 9, 6, 13, 9, 13, 8, 8, 11, 9, 12, 7, 6, 3, 8, 7, 12, 5, 9, 3, 13, 3, 2, 7, 4, 7, 6, 13, 11, 4, 5, 7, 12, 3, 12, 9, 6, 1, 5, 10, 11, 5, 7, 7, 9, 8, 3, 5, 13, 4, 7, 6, 12, 7, 1, 7, 8, 5, 11, 12, 13, 1, 5, 11, 13, 13, 3, 4, 7, 5, 12, 7, 12, 7, 13, 4, 5, 11, 13, 8, 8, 8, 7, 9, 5, 12, 11, 12, 1, 3, 7, 7, 7, 10, 11, 6, 12, 5, 6, 12, 11, 3, 3, 4, 1, 9, 10, 2, 4, 10, 10, 8, 6, 3, 8, 10, 2, 6, 5, 6, 6, 9, 8, 13, 13, 11, 12, 12, 1, 6, 5, 13, 13, 4, 2, 12, 3, 10, 4, 11, 9, 13, 10, 11, 5, 7, 8, 5, 2, 10, 11, 11, 7, 3, 9, 2, 10, 11, 4, 9, 4, 10, 8, 10, 1, 13, 12, 11, 10, 13, 10, 10, 12, 9, 3, 1, 3, 4, 10, 12, 3, 13, 8, 3, 13, 13, 9, 11, 8, 5, 6, 1, 2, 3, 12, 6, 8, 13, 5, 12, 10, 6, 8, 12, 10, 5, 7, 12, 5, 3, 13, 13, 11, 4, 10, 7, 10, 6, 3, 12, 9, 3, 11, 8, 8, 11, 1, 10, 7, 6, 4, 12, 13, 10, 6, 2, 5, 7, 12, 8, 4, 4, 7, 10, 12, 13, 7, 1, 12, 10, 13, 13, 13, 3, 2, 7, 8, 4, 8, 7, 7, 4, 13, 3, 13, 11, 9, 2, 4, 8, 10, 11, 4, 10, 9, 2, 9, 5, 13, 8, 1, 6, 13, 8, 8, 12, 10, 4, 8, 11, 8, 11, 13, 2, 9, 4, 7, 6, 1, 10, 11, 8, 3, 11, 9, 11, 7, 8, 9, 4, 12, 4, 7, 5, 10, 3, 8, 12, 10, 8, 13, 8, 2, 10, 12, 9, 5, 6, 12, 7, 7, 12, 8, 11, 5, 4, 11, 9, 7, 8, 9, 11, 5, 6, 8, 12, 11, 2, 11, 3, 13, 9, 13, 6, 2, 10, 10, 3, 10, 7, 13, 2, 3, 7, 7, 7, 13, 10, 9, 8, 8, 12, 1, 6, 10, 4, 1, 10, 12, 2, 11, 11, 10, 1, 3, 11, 3, 10, 3, 8, 10, 3, 12, 4, 1, 8, 8, 3, 6, 13, 9, 6, 11, 11, 11, 4, 13, 12, 5, 7, 8, 11, 3, 13, 3, 4, 11, 4, 5, 12, 12, 12, 3, 9, 6, 10, 9, 13, 10, 11, 2, 4, 9, 5, 11, 9, 8, 11, 4, 6, 5, 6, 5, 3, 6, 3, 12, 13, 7, 6, 4, 2, 12, 3, 8, 10, 8, 3, 4, 10, 13, 8, 9, 12, 7, 4, 1, 10, 3, 13, 4, 10, 5, 4, 8, 11, 12, 11, 11, 13, 7, 7, 11, 10, 3, 3, 9, 13, 8, 7, 2, 5, 4, 12, 4, 8, 11, 10, 13, 6, 5, 3, 10, 8, 10, 7, 7, 13, 5, 3, 3, 1, 8, 7, 6, 9, 3, 11, 9, 8, 12, 10, 5, 11, 11, 13, 12, 13, 12, 9, 3, 2, 10, 12, 10, 3, 4, 13, 9, 12, 12, 3, 3, 11, 10, 10, 12, 7, 3, 1, 11, 10, 12, 6, 12, 3, 12, 10, 6, 13, 3, 13, 4, 6, 8, 9, 4, 6, 6, 7, 4, 4, 9, 4, 12, 3, 8, 11, 9, 12, 13, 2, 13, 9, 9, 11, 9, 12, 11, 11, 11, 7, 2, 6, 4, 1, 3, 11, 6, 6, 12, 9, 11, 13, 7, 8, 6, 6, 9, 6, 4, 10, 3, 5, 10, 12, 5, 3, 5, 1, 11, 7, 3, 9, 8, 3, 8, 5, 3, 11, 13, 1, 7, 10, 13, 8, 7, 2, 5, 10, 8, 12, 7, 13, 3, 11, 6, 3, 4, 2, 6, 9, 5, 12, 7, 5, 10, 1, 4, 3, 7, 5, 9, 4, 10, 5, 11, 12, 13, 9, 12, 12, 9, 8, 10, 1, 12, 3, 5, 7, 10, 7, 11, 10, 12, 3, 10, 11, 13, 8, 13, 2, 10, 6, 6, 3, 11, 13, 8, 13, 5, 1, 11, 9, 9, 11, 4, 7, 1, 5, 5, 4, 5, 5, 13, 10, 2, 3, 4, 2, 6, 5, 6, 6, 12, 13, 11, 11, 7, 3, 4, 8, 4, 1, 3, 9, 3, 13, 11, 12, 13, 4, 6, 2, 8, 3, 3, 8, 11, 8, 1, 13, 6, 11, 12, 12, 4]
];
var payTable = [
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 30, 90, 300],
    [0, 0, 0, 20, 60, 200],
    [0, 0, 0, 15, 45, 150],
    [0, 0, 0, 12, 35, 120],
    [0, 0, 0, 10, 30, 100],
    [0, 0, 0, 8, 25, 80],
    [0, 0, 0, 7, 20, 70],
    [0, 0, 0, 5, 15, 50],
    [0, 0, 0, 5, 15, 50],
    [0, 0, 0, 4, 12, 40],
    [0, 0, 0, 4, 12, 40],
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
];
var payLines = [
    [0, 1, 2, 3, 4], // 1
    [5, 6, 7, 8, 9], // 2
    [10, 11, 12, 13, 14], // 3
    [15, 16, 17, 18, 19], // 4
    [0, 6, 2, 3, 4], // 5
    [5, 1, 7, 3, 9], // 6
    [5, 11, 7, 8, 14], // 7
    [10, 6, 12, 8, 14], // 8
    [10, 16, 12, 18, 14], // 9
    [15, 11, 17, 13, 19], // 10
    [0, 16, 2, 18, 4], // 11
    [15, 1, 17, 3, 19], // 12
    [0, 1, 7, 3, 4], // 13
    [5, 6, 12, 8, 9], // 14
    [10, 11, 17, 13, 14], // 15
    [15, 16, 12, 18, 19], // 16
    [10, 11, 7, 13, 14], // 17
    [5, 6, 2, 8, 9], // 18
    [0, 1, 17, 3, 4], // 19
    [15, 16, 2, 18, 19], // 20
];
var scatter = 1, wild = 2, respinWild = 14, freeRespinWild = 15;
var percentList = {
    respinWildHit: 20,
    freeSpinAddWild: 50,
}

SlotMachine.prototype.Init = function () {
    this.highPercent = 1; //(0-5)                       (                                .),
    this.normalPercent = 30; //                                 ,                                               ,                                     .
};

SlotMachine.prototype.SpinFromPattern = function (player) {
    this.gameSort = this.currentGame;
    this.prevGameMode = this.currentGame;
    this.prevRespinStatus = this.respinStatus;
    this.totalBet = player.totalBet;
    this.betPerLine = player.betPerLine;

    this.winMoney = 0;
    this.winLines = [];
    this.maskView = [];
    this.respinWildPosition = null;
    this.expendReelPositions = [];

    if (this.currentGame == "FREE") {
        this.FreeSpin(player);
        return;
    }

    if (this.respinStatus == "RESPIN") {
        this.Respin(player);
        return;
    }

    var viewCache = player.viewCache;

    if (viewCache.type == "BASE") {

        this.respinCacheList = viewCache.view;
        this.view = this.respinCacheList[0].s;

    } else if (viewCache.type == "FREE") {

        this.freeSpinCacheList = viewCache.view.viewList;
        this.view = viewCache.view.scatterView;
        // var freeSpinMoney = viewCache.win / viewCache.bpl * player.betPerLine;
    }

    this.virtualReels = {
        above: RandomLineFromReels(baseReels),
        below: RandomLineFromReels(baseReels)
    };

    this.winMoney = WinFromView(this.view, player.betPerLine);
    this.winLines = WinLinesFromView(this.view, player.betPerLine);
    this.respinWinMoney = this.winMoney;

    if (isRespinWin(this.view)) {

        this.respinIndex = 0;
        this.expendReel = this.respinCacheList[0].er[0];
        this.respinWildPosition = GetRespinWildPosition(this.view);
        this.expendReelPositions = GetReelPositions(this.expendReel);

        this.maskView = this.view;
        // ====================
        this.view = GetExpendView(this.maskView, [this.expendReel]);
        var viewForMoneyCalc = GetViewForCalcMoeny(this.view);
        this.winMoney = WinFromView(viewForMoneyCalc, player.betPerLine);
        this.winLines = WinLinesFromView(viewForMoneyCalc, player.betPerLine);
        // ====================
        this.maskView = GetRealMaskView(this.maskView);

        this.respinWinMoney = this.winMoney;
        this.respinStatus = "RESPIN";
    }

    if (isFreeSpinWin(this.view)) {

        this.currentGame = "FREE";
        this.freeSpinIndex = 0;
        this.freeSpinWinMoney = this.winMoney;
        this.freeSpinMulti = 1;
        this.freeSpinLeftWildCount = 2;
        this.freeSpinExpendReels = [];
    }
};

SlotMachine.prototype.Respin = function (player) {
    this.respinIndex++;
    this.expendReel--;

    if (this.expendReel == 0) {

        this.respinStatus = "NORESPIN";
    }

    // ====================
    this.view = GetExpendView(this.respinCacheList[this.respinIndex].s, this.expendReel);
    var viewForMoneyCalc = GetViewForCalcMoeny(this.view);
    this.winMoney = WinFromView(viewForMoneyCalc, player.betPerLine);
    this.winLines = WinLinesFromView(viewForMoneyCalc, player.betPerLine);
    // ====================

    this.respinWinMoney += this.winMoney;
}

SlotMachine.prototype.FreeSpin = function (player) {
    this.freeSpinIndex++;
    this.freeSpinRespinWildAddFlag = false;

    var freeViewCache = this.freeSpinCacheList[this.freeSpinIndex - 1];
    var cacheReels = freeViewCache.er;
    var cacheView = freeViewCache.s;

    for (var i = 0; i < this.freeSpinExpendReels.length; i++) {

        if (this.freeSpinExpendReels[i] != -1) {
            this.freeSpinExpendReels[i]--;
        }
    }

    if (this.freeSpinExpendReels.length == 0) {

        this.maskView = cacheView;
        this.maskView = GetRealMaskView(this.maskView);
        this.freeSpinMulti++;
        this.freeSpinLeftWildCount--;
        this.freeSpinExpendReels.push(cacheReels[0]);
        this.respinWildPosition = RandomPositionInReel(cacheReels[cacheReels.length - 1]);
        this.expendReelPositions = GetReelPositions(cacheReels[cacheReels.length - 1]);
    } else {

        if (this.freeSpinLeftWildCount > 0) {

            var prevFreeViewCache = this.freeSpinCacheList[this.freeSpinIndex - 2];
            var prevCacheView = prevFreeViewCache.s;
            var prevCacheReels = prevFreeViewCache.er;

            if (prevCacheReels.length != cacheReels.length) {

                // For Check FreeSpin End
                var expendReelsForCheck = [...cacheReels];
                for (var i = 0; i < expendReelsForCheck.length; i++) {

                    if (expendReelsForCheck[i] != -1) {

                        expendReelsForCheck[i]--;
                    }
                }
                if (CheckCannotExpend(expendReelsForCheck)) {

                    this.freeSpinRespinWildAddFlag = true;
                }

                this.maskView = cacheView;
                this.maskView = GetRealMaskView(this.maskView);
                this.freeSpinMulti++;
                this.freeSpinLeftWildCount--;
                this.freeSpinExpendReels.push(cacheReels[cacheReels.length - 1]);
                this.respinWildPosition = RandomPositionInReel(cacheReels[cacheReels.length - 1]);
                this.expendReelPositions = GetReelPositions(cacheReels[cacheReels.length - 1]);
            }

        }
    }

    if (ExistRespinWildAdd(cacheView, this.freeSpinExpendReels)) {

        this.freeSpinLeftWildCount++;
    }

    // For Check FreeSpin End
    var expendReelsForCheck = [...this.freeSpinExpendReels];
    for (var i = 0; i < expendReelsForCheck.length; i++) {

        if (expendReelsForCheck[i] != -1) {

            expendReelsForCheck[i]--;
        }
    }
    if (CheckCannotExpend(expendReelsForCheck) && this.freeSpinLeftWildCount == 0) {

        this.currentGame = "BASE";
    }



    // ====================
    this.view = GetExpendView(cacheView, this.freeSpinExpendReels);
    var viewForCalc = GetViewForCalcMoeny(this.view);
    var freeViewWinMoney = WinFromView(viewForCalc, player.betPerLine);
    this.winMoney = freeViewWinMoney * this.freeSpinMulti;
    this.winLines = WinLinesFromView(viewForCalc, player.betPerLine);
    // ====================

    this.freeSpinWinMoney += this.winMoney;
}

SlotMachine.prototype.SpinForBaseGen = function (bpl, totalBet, baseWin) {
    var pattern = {
        type: "BASE",
        bpl: bpl
    };

    var viewInfo = null;

    if (baseWin > 0) {
        viewInfo = RandomWinView(baseReels, bpl, baseWin);

    } else {
        viewInfo = RandomZeroView(baseReels, bpl);
    }

    pattern.win = viewInfo.winMoney;
    pattern.view = viewInfo.view;

    return pattern;
};

SlotMachine.prototype.SpinForJackpot = function (bpl, totalBet, jpWin, isCall = false, jpType) {
    var newJpType = jpType;

    if (jpType === "RANDOM") {
        newJpType = this.jackpotType[Util.random(0, this.jackpotType.length)];
    }

    switch (newJpType) {
        case "FREE":
            return this.SpinForFreeGen(bpl, totalBet, jpWin, isCall);
        default:
            return this.SpinForFreeGen(bpl, totalBet, jpWin, isCall);
    }

}

SlotMachine.prototype.SpinForFreeGen = function (bpl, totalBet, fsWin, isCall = false) {
    var freeSpinCacheList = {};

    var scatterView = RandomScatterView(baseReels);
    var scatterWinMoney = WinFromView(scatterView, bpl);

    var freeCache = RandomFreeViewCache(baseReels, bpl, fsWin);

    freeSpinCacheList.scatterView = scatterView;
    freeSpinCacheList.viewList = freeCache.view;

    var pattern = {
        win: freeCache.win + scatterWinMoney,
        view: freeSpinCacheList,
        bpl: bpl,
        type: "FREE",
        isCall: isCall ? 1 : 0
    };

    return pattern;
};

SlotMachine.prototype.SpinForBuyBonus = function (bpl, totalBet) {
    var freeSpinCacheList = {};

    var scatterView = RandomScatterView(baseReels);
    var scatterWinMoney = WinFromView(scatterView, bpl);

    var freeCache = BuyBonusViewCache(baseReels, bpl);

    freeSpinCacheList.scatterView = scatterView;
    freeSpinCacheList.viewList = freeCache.view;

    var pattern = {
        win: freeCache.win + scatterWinMoney,
        view: freeSpinCacheList,
        bpl: bpl,
        type: "FREE",
        isCall: 0
    };

    return pattern;
};

var RandomWinView = function (reels, bpl, maxWin) {
    var bottomLimit = 0;
    var calcCount = 0;

    while (true) {

        var viewForMoneyCalc = null;
        var expendedView = null;
        var respinWinMoney = 0;
        var respinCacheList = [];
        var expendReel = -1;
        var respinStartReel = -1;

        // Origin View
        var originView = RandomView(reels);

        if (isFreeSpinWin(originView)) {

            continue;
        }

        respinStartReel = GetRespinStartReel(originView);

        respinCacheList.push({
            s: originView,
            er: [respinStartReel]
        });

        // ====================
        expendedView = GetExpendView(originView, [respinStartReel]);
        viewForMoneyCalc = GetViewForCalcMoeny(expendedView);
        var originWinMoney = WinFromView(viewForMoneyCalc, bpl);
        // ====================

        respinWinMoney += originWinMoney;

        if (respinStartReel > 0) {

            expendReel = respinStartReel - 1;

            while (expendReel >= 0) {

                expendedView = null;
                viewForMoneyCalc = null;

                var nextView = RandomView(reels);

                if (isFreeSpinWin(nextView) || isRespinWin(nextView)) {

                    continue;
                }

                // ====================
                expendedView = GetExpendView(nextView, [expendReel]);
                viewForMoneyCalc = GetViewForCalcMoeny(expendedView);
                var nextWinMoney = WinFromView(viewForMoneyCalc, bpl);
                // ====================

                respinWinMoney += nextWinMoney;

                respinCacheList.push({
                    s: nextView,
                    er: [expendReel]
                });

                expendReel--;
            }
        }

        if (respinWinMoney > bottomLimit && respinWinMoney <= maxWin) {

            return {
                view: respinCacheList,
                winMoney: respinWinMoney
            };
        }

        calcCount++;
        if (calcCount > 100) {
            return RandomZeroView(reels, bpl);
        }
    }
};

var RandomZeroView = function (reels, bpl) {
    var view = null;
    var winMoney = null;

    while (true) {

        view = RandomView(reels);

        if (isFreeSpinWin(view) || isRespinWin(view)) {

            continue;
        }

        winMoney = WinFromView(view, bpl);

        if (winMoney == 0) {

            return {
                view: [{
                    s: view,
                    er: [-1]
                }],
                winMoney: 0
            };
        }

    }
};

var RandomView = function (reels, isFreeView = false) {
    var view = [];

    for (var i = 0; i < slotWidth; i++) {

        var len = reels[i].length;
        var randomIndex = Util.random(0, len);

        for (var j = 0; j < slotHeight; j++) {

            var viewPos = i + j * slotWidth;
            var reelPos = (randomIndex + j) % len;
            view[viewPos] = reels[i][reelPos];
        }
    }

    if (Util.probability(percentList.respinWildHit)) {

        // Except Index 0 Reel
        var randx = Util.random(1, slotWidth);
        var randy = Util.random(0, slotHeight);
        var randpos = randy * slotWidth + randx;

        if (isFreeView)
            view[randpos] = freeRespinWild;
        else
            view[randpos] = respinWild;
    }

    return view;
};

var RandomScatterView = function (reels) {
    var view = null;

    while (true) {

        view = RandomView(reels);

        if (isFreeSpinWin(view) && !isRespinWin(view)) {

            return view;
        }
    }
};

var RandomFreeViewCache = function (reels, bpl, fsWin) {
    var minMoney = fsWin * 0.8;
    var maxMoney = fsWin;

    minMoney = Util.max(minMoney, 0);
    maxMoney = Util.max(maxMoney, 0);

    var lowerLimit = -1, upperLimit = 100000000000000;
    var lowerView = null, upperView = null;

    for (var patternIndex = 0; patternIndex < 200; patternIndex++) {
        var freeSpinData = BuyBonusViewCache(reels, bpl)

        if (freeSpinData.win >= minMoney && freeSpinData.win <= maxMoney) {
            return pattern;
        }

        if (freeSpinData.win > lowerLimit && freeSpinData.win < minMoney) {
            lowerLimit = freeSpinData.win;
            lowerView = pattern;
        }
        if (freeSpinData.win > maxMoney && freeSpinData.win < upperLimit) {
            upperLimit = freeSpinData.win;
            upperView = pattern;
        }
    }

    return lowerView ? lowerView : upperView;
};

var BuyBonusViewCache = function (reels, bpl) {
    var freeSpinData = [];
    var freeSpinWinMoney = 0;
    var freeSpinMulti = 1;
    var freeSpinLeftWildCount = 2;
    var freeSpinExpendReels = [];

    while (true) {
        for (var i = 0; i < freeSpinExpendReels.length; i++) {
            if (freeSpinExpendReels[i] != -1) {
                freeSpinExpendReels[i]--;
            }
        }

        if (freeSpinExpendReels.length == 0) {

            freeSpinMulti++;
            freeSpinLeftWildCount--;
            freeSpinExpendReels.push(RandomReel());
        } else {
            if (freeSpinLeftWildCount > 0) {
                if (Util.probability(percentList.freeSpinAddWild)) {
                    freeSpinMulti++;
                    freeSpinLeftWildCount--;
                    freeSpinExpendReels.push(ChooseExceptionReel(freeSpinExpendReels));
                } else {

                    if (CheckCannotExpend(freeSpinExpendReels)) {

                        freeSpinMulti++;
                        freeSpinLeftWildCount--;
                        freeSpinExpendReels.push(ChooseExceptionReel(freeSpinExpendReels));
                    }
                }
            }
        }

        if (CheckCannotExpend(freeSpinExpendReels)) {
            break;
        }

        var freeView = null;
        while (true) {
            freeView = RandomView(reels, true);
            if (!ExistScatter(freeView)) {
                break;
            }
        }

        if (ExistRespinWildAdd(freeView, freeSpinExpendReels)) {

            freeSpinLeftWildCount++;
        }

        freeSpinData.push({
            s: freeView,
            er: [...freeSpinExpendReels]
        });

        var expendedView = GetExpendView(freeView, freeSpinExpendReels);
        var viewForCalc = GetViewForCalcMoeny(expendedView);
        var freeViewWinMoney = WinFromView(viewForCalc, bpl);

        freeSpinWinMoney += freeViewWinMoney * freeSpinMulti;
    }

    return {
        win: freeSpinWinMoney,
        view: freeSpinData
    };
};

var RandomLineFromReels = function (reels) {
    var result = [];

    for (var i = 0; i < slotWidth; i++) {

        var index = Util.random(0, reels[i].length);
        result[i] = reels[i][index];
    }

    return result;
};

var WinFromView = function (view, bpl) {
    var money = 0;
    for (var lineId = 0; lineId < payLines.length; lineId++) {
        var lineSymbols = Util.symbolsFromLine(view, payLines[lineId]);
        var linePay = WinFromLine(lineSymbols, bpl);
        money += linePay;
    }
    return money;
};

var WinFromLine = function (lineSymbols, bpl) {
    var matchCount = 0;
    var symbol = wild;

    for (var i = 0; i < lineSymbols.length; i++) {

        if (isWild(lineSymbols[i])) {
            continue;
        }

        symbol = lineSymbols[i];
        break;
    }

    for (var i = 0; i < lineSymbols.length; i++) {

        if (isWild(lineSymbols[i])) {
            lineSymbols[i] = symbol;
        }
    }

    for (var i = 0; i < lineSymbols.length; i++) {
        if (lineSymbols[i] != symbol) break;
        matchCount++;
    }

    for (var i = matchCount; i < lineSymbols.length; i++) {
        lineSymbols[i] = -1;
    }

    return payTable[symbol][matchCount] * bpl;
};

var WinLinesFromView = function (view, bpl) {
    var winLines = [];

    for (var lineId = 0; lineId < payLines.length; lineId++) {

        var line = payLines[lineId];
        var lineSymbols = Util.symbolsFromLine(view, line);

        var lineMoney = WinFromLine(lineSymbols, bpl);

        if (lineMoney > 0) {

            winLines.push(
                `${lineId}~${lineMoney}~${line.filter(function (item, index, arr) {
                    return lineSymbols[index] != -1
                }).join('~')}`);
        }
    }

    return winLines;
};

var isWild = function (symbol) {
    return symbol == wild;
};

var isRespinWild = function (symbol) {
    return symbol == respinWild;
};

var isFreeRespinWild = function (symbol) {
    return symbol == freeRespinWild;
};

var GetViewForCalcMoeny = function (view) {
    var viewForCalcMoney = [...view];

    for (var i = 0; i < viewForCalcMoney.length; i++) {

        if (viewForCalcMoney[i] == respinWild) {
            viewForCalcMoney[i] = wild;
        }
    }

    return viewForCalcMoney;
};

var isRespinWin = function (view) {

    return NumberOfRespinWilds(view) > 0;
};

var isFreeSpinWin = function (view) {

    return NumberOfScatters(view) >= 3;
};

var NumberOfScatters = function (view) {
    var result = 0;

    for (var i = 0; i < view.length; i++) {
        if (view[i] == scatter) {
            result++;
        }
    }

    return result;
};

var NumberOfRespinWilds = function (view) {
    var result = 0;

    for (var i = 0; i < view.length; i++) {
        if (view[i] == respinWild) {
            result++;
        }
    }

    return result;
};

var GetRespinStartReel = function (view) {

    for (var i = 0; i < view.length; i++) {

        if (isRespinWild(view[i])) {

            return i % slotWidth;
        }
    }

    return -1;
};

var GetExpendView = function (view, expendReelList) {
    var expendedView = [...view];

    for (var i = 0; i < expendReelList.length; i++) {

        if (expendReelList[i] >= 0) {

            for (var j = 0; j < slotHeight; j++) {

                expendedView[slotWidth * j + expendReelList[i]] = respinWild;
            }
        }

    }

    return expendedView;
};

var RandomReel = function () {
    return Util.random(1, slotWidth);
};

var ChooseExceptionReel = function (reels) {
    var reel = null;

    while (true) {

        reel = RandomReel();

        if (reels.indexOf(reel) == -1) {

            return reel;
        }
    }
};

var CheckCannotExpend = function (expendReels) {
    var _1count = 0;

    for (var i = 0; i < expendReels.length; i++) {

        if (expendReels[i] == -1) {
            _1count++;
        }
    }

    if (_1count == expendReels.length) {

        return true;
    }

    return false;
};

var ExistRespinWildAdd = function (view, expendReels) {

    for (var i = 0; i < view.length; i++) {

        if (isFreeRespinWild(view[i])) {

            if (expendReels.indexOf(i % 5) == -1) {

                return true;
            }
        }
    }

    return false;
};

var GetRespinWildPosition = function (view) {

    for (var i = 0; i < view.length; i++) {

        if (view[i] == respinWild) {

            return i;
        }
    }

    return -1;
};

var GetReelPositions = function (reel) {
    var reelpositions = [];

    for (var i = 0; i < slotHeight; i++) {

        reelpositions.push(i * slotWidth + reel);
    }

    return reelpositions;
};

var RandomPositionInReel = function (reel) {

    return Util.random(0, slotHeight) * slotWidth + reel;
};

var GetRealMaskView = function (maskView) {
    var realMaskView = [...maskView];

    for (var i = 0; i < realMaskView; i++) {

        if (realMaskView[i] == respinWild) {

            realMaskView[i] = RandomSymbol();
        }
    }

    return realMaskView;
};

var RandomSymbol = function () {

    return Util.random(3, 14);
};

var ExistScatter = function (view) {

    for (var i = 0; i < view.length; i++) {

        if (view[i] == scatter) {

            return true;
        }
    }

    return false;
}

module.exports = SlotMachine;