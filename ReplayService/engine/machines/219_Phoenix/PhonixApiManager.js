var Util = require("../../../../utils/slot_utils");

function ApiManager() { }

ApiManager.prototype.InitApi = function (player, param) {
    var result = {
        def_s: "1,7,3,5,4,9,4,4,6,8,1,5,7,6,4",
        balance: "100,000.00",
        cfgs: "1",
        ver: "2",
        index: "1",
        balance_cash: "100,000.00",
        def_sb: "4,9,6,3,5",
        reel_set_size: "5",
        def_sa: "6,2,3,7,5",
        reel_set: "0",
        balance_bonus: "0.00",
        na: "s",
        scatters: "1~20,5,2,0,0~20,15,10,0,0~1,1,1,1,1",
        gmb: "0,0,0",
        rt: "d",
        gameInfo: "{rtps:{regular:\"96.51\"},props:{max_rnd_sim:\"1\",max_rnd_hr:\"413907\",max_rnd_win:\"5000\"}}",
        wl_i: "tbm~5000",
        stime: "1645871534185",
        sa: "6,2,3,7,5",
        sb: "4,9,6,3,5",
        sc: "10.00,20.00,30.00,40.00,50.00,100.00,200.00,300.00,400.00,500.00,750.00,1000.00,2000.00,3000.00,4000.00,5000.00",
        defc: "100.00",
        sh: "3",
        wilds: "2~0,0,0,0,0~1,1,1,1,1",
        bonuses: "0",
        fsbonus: "",
        c: "100.00",
        sver: "5",
        counter: "2",
        paytable: "0,0,0,0,0;0,0,0,0,0;0,0,0,0,0;500,100,25,0,0;400,80,20,0,0;250,50,15,0,0;100,25,8,0,0;100,25,8,0,0;75,10,3,0,0;75,10,3,0,0",
        l: "20",
        rtp: "96.51",
        reel_set0: "8,8,8,4,1,8,6,6,6,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,1,4,6,4,6,4~9,9,9,3,1,5,7,9,5,7,5,3,1,3,1,5,1,5,1,3,7,1,5,7,1,7,5,3,7,1,5,1,5,1,5,1,7,5,1,3,7,5,3,5,7,5,1,5,1,5,1,5,3,7,1,7,5,1,3,5,3,7,1,5,1,5,1,7,5,1,7,3,7,3,1,7,5,1,7,5,3,7,5,1,5,1,5,7,5,1,5,7,1,7,1,7,3,1,7,5,3,1~7,4,3,8,6,1,5,9,5,4,1,3,1,8,1,4,8,1,8,1,4,8,5,8,1,8,1,4,9,5,3,8,3,8,4,1,8,3,4,8,9,8,4,8,4,1,8,1,8,4,3,4,3,5,8,9,5,1,3,1,5,9,8,4,5,1,4,3,4,8,3,8,5,8,1,5,4,8,4,5,8,4,1,5,1,8,1,9,3,5,1,5,3,4,3,4,8,1,9,1,4,5,8,9,6,5,8,1,6,5,1,4,3,5,4,3,4,5,1~8,9,5,1,6,7,4,3,1,9,4,9,1,7,1,9,4,9,1,9,3,6,1,9,7,9,3,1,6,9,1,5,3,9,4,9,7,9,4,9,4,7,1,4,6,4,9,6,1,9,6,1,7,1,3,1,9,7,6,4,3,9,6,7,9,7,6,9,1,6,7,3,1,3,9,6,1,9,1,4,3,4,9,1,9,6,1,9,4,1,6,1,6,3,9,4,7,1,6,1~1,8,5,3,6,9,4,7,6,5,7,6,5,8,4,6,8,6,7,4,8,7,8,9,5,7,4,9,6,5,7,6,8,4,8,9,8,5,4,7,8,4,8,7,4,7,4,8,6,7,6,7,4,6,5,8,6,8,5,4,5,8,5,8,5,8,6,4,6,7,5,9,6,5,6,8,4,6,7,8,3,7,8,7,8,7,6,8,7,8,6,5,8,7,5,8,6,4,6,7,6,7,4,8,6,9,5,6,7,8,9,8,5,6,4,5,7,9,5,7,9,7,6,9,8,4,8,5,9,5",
        s: "6,7,3,5,4,9,4,4,6,8,1,5,7,6,4",
        reel_set2: "5,7,9,3,4,8,1,6,4,3,7,3,6,8,4,3,7,4,7,4,7,6,3,8,6,7,6,4,7,3~2,1,9,5,4,3,6,8,7,5,1,4,5,1,4,1,8,1,4,5,4,3,1,5,1,4,8,5,1,4,1,8,5,4,5,8,1,4,5,8,1,5,4,8,3,1,3,1,4,3,1,5,1,8,1,4,5,8,4,1,5,8,5,1,4,3,7,1,5,4,1,4,3,8,5,1,8,4,5,8,1,4,1,3,5,3,8,5,4,1,8,1,8,7,1,8,5,6,1,3,1,8,4,1,3,4,5,7,8,3,7,1,8,1,5,7,1,8,3,4,1,3,9,5,1,5,3,1,3,7,1,5,1,8,9,8,9,4,1,8~7,4,3,8,9,5,1,6,2,1,5,8,5,8,6,8,5,1,8,1,8,3,6,1,5,8,3,9,8,5,9,6,1,5,8,5,1,9,8,9,4,3,9,8,1,9,2,9,1,5,1,6,1,5,8,9,8,9,8,1,9,6,9,8,9,8,1,8,1,5,8,6,1,5,8,9,5,6,8,9,1,5,1,6,5,1,6,4,1,9,8,1,8,5,8,5,1,9,5,8,9,6,1,6,8,1,2,8,9,1,8,1,8,5,9,8,1,9,8,5,9,8,9,8,9,6,5,1,9,8,9,5,8,5,1,9,8,5,1,6,1,8,5,1,9,8,1,5,9,8,9,1,5,9,1,8,5,1,5,1,6,8,5,1,9,1,8,5,8,6,8,1,8,1,9,5,1,8,2,9,5,8,6,1,8,9,8,9,5,8,1,9,8,5,9,8,5,1,9,1,2,8,1,2,1,6,5,8,9,8,1,9,8~9,1,4,6,2,7,3,5,8,6,4,3,1,2,6,5,3,2,7,4,6,1,2,1,3,1,3,1,4,8,4,7,4,6,7,8,3,4,2,8,2,3,2,6,4,1,8,3,1,8,2,4,1,2,5,6,4,2,6,1,7,4,6,3,4,8,4,1,3,1,4,3,4,2,6,4,3,2,3,6,8,4,3,7,8,4,6,4,8,6,8,6,3,7,3,1,6,3,4,6,4,7,5,2,6,2,4,2,3,7,4,2,6,3,7,1,3,6,5,3,8,6,4,8,3,4~6,7,8,9,4,3,5,1,3,7,8,4,5,4,8,7,3,8,3,7,1,8,7,3,8,3,8,3,7,8,4,8,7,4,8,3,4,8,9,8,7,3,8,3,8,3,9,4,8,3,5,3,1,7,9,8,4,3,1,8,3,8,3,7,3,8,3,7,8,1,3,7,3,7,8,3,8,3,8,7,5,7,3,8,9,7,8,3,9,8,9,7",
        reel_set1: "5,9,9,9,3,9,7,1,3,9,1,7,9,3,1,9,3,7,9,1,3,1,3,9,3,9,7,3,9,3,9,3,7,9,1,9,1,9,3,1,7,9,7,3,9,7,9,3,9,1,3,9,3,9,1,9,1,3,7,3,9,1,7,9,1,3,9,3,9,3,1,3,9,1,9,1,9,1,3,1,3,9,3,9,7,9,3,1,3,9,7,1,9,1,9,1,3,9,7,3,7,3,9,3,9,7,9,3,9,1~6,4,1,8,6,6,6,8,8,8,1,8,1,8,1,8,1,4,8,1,4,8,1,4,1,4,1,4,8,1,4,1,4,8,1,4,1,4,1,8,1,4,8,1,4,8,1,8,1,8,1,8,1,4,1,4,8,1,4,8,1,4~1,6,5,9,8,3,4,7,5,6,5,4,5,9,5,3,5,9,5,8,9,5,9,5,9,5,9,5,9,3,5,9,5,9,5,9,3,5,8,9,5,3,5,9,8,5,9,5,3,5,9,5,9,5,9,5,9,3,5,3,5,9,4,9,5,3,4,5,3,9,3,5,9,5,6,5,8,5,8,5,9,3,5,3,8,5,9,5,3,6,9,5,3,8,5,8,5,9,5,3,9,7,5,9,5,8,7,9,8,9,4,6,5,9,6,9,8,9,5,9~9,8,4,5,6,1,3,7,1,4,8,4,5,1,6,5,4,5,4,5,6,5,6,8,4,5,1,4,8,6,1,4,8,1,8,1,6,7,5,1,8,7,5,7,5,1,6,5,1,6,1,6,1,4,1,4,7,6,5,4,6,8,6,8,5,4,6,1,8,5,6,1,5,8,4,1,4,6,7,4,6,7,6,7,6,5,1,5,4,6,1,6,5,6,5,8,3,6,5,1,5,1,5,6,8,7,1,7,1,5,4,5,6,5,1,8,1,6,8,1,5,1,7,1,4,6,1,7,8,5,8,5,8,1,7,5,6,5,1,4,5,7,4,7,6,5~4,3,5,6,9,8,1,7,1,9,5,1,9,7,1,6,7,6,7,8,5,9,3,6,5,3,6,5,6,7,9,5,6,7,6,3,1,6,5,6,1,6,1,6,5,7,9,7,6,3,9,7,6,9,6,1,5,6,5,3,9,6,9,6,8,1,9,1,6,7,5,9,7,6,1,6,5,7,6,5,9,5,1,6,3,9,5,1,3,9,6,5,6,9,1,6,5,6,1,9,5,6,9,3,5,3,6,5,6,1,6,8,3,9,6,8,3,6,7,6,9,6,5,7,8,6,1,6,7,3,6,5,6,7,9,6,7,1,6,9,5,6,5,6,9,6,8,5,6,7,3,6,3,6,3,8,3,5,6,9,5,7,3,1,6",
        reel_set4: "7,1,3,8,4,9,5,6,1,5,4,1,9,4,5,9,4,5,1,5,1,9,8,5,1,8,9,4,9,1,4,8,9,1,8,4,1,5,8,1,9,1,8,9,8,1,5,8,9,5,9,5,8,1,6,8,9,5,9,1,5,4,1,9,5,1,8,4,8,1,4,8,5,9,4,5,1,5,1,9,5,3,5,9,5,8,5,9,3,5,8,1,8,9,1,9,6,4,1,8,6~6,2,4,7,8,1,3,9,5,2,1,7,3,7,1,4,7,8,3,8,2,5,3,8,2,4,2,3,5,8,7,2,5,9,1,8,7,4,3,5,2,5,3,2,3,7,2,5,2,3,1,8,4,7,2,5,8,7,1,7,5,7,8,5,1,8,3,9,5,3,1~8,4,6,9,1,7,3,2,5,1,7,6,9,3,4,3,5,1,7,1,6,3,9,5,3,1,9,7,2,7,3,1,3,5,3,1,3,2,3,1,3,7,3,5,9,3,5,1,7,5,3,2,1,4,1~8,3,5,2,4,9,1,6,7,6,3,4,9,3,2,9,2,5,4,9,2,4,3,4,9,5,4,2,9,3,2,5,2,9,2,9,3,2,4,9,1,4,5,2,9,4,9,3,1,3,1,9,5,6,9,2,3,4,1,3,5,2,1,9,2,3,2,3,2,4,5,2,1,2,4,2,4,9,7,6,3,4,9,4,9,4,5,4,2,1,9,2,3,5,2,9,4,7,5,2,4,5,6,1,4,2,9,2,5,4,3,4,1,2,3,1,2,5,2,1,4,5,3,9,3,9,2,1,2,1,5,2,5,4,2,1,3,2,4,3,9,4,9,2,9,2,3,4,1,4,3,4,3,4,3,2,3,9,4,1,9,4,3,9,2,5,3,2,5,9,2,4,9,3,1,5,9,4,1,2,9,6,5,4,2,5,3,9,2,4,9,2,1,3,4,1~7,6,8,9,4,5,3,1,8,9,8,3,6,9,6,9,8,3,4,1,8,3,8,3,9,8,3,8,6,8,3,8,9,8,9,8,9,8,6,8,9,3,4,5,9,8,6,5,8,6,5,8,9,4,9,6,9,1,9,8,9,5,3,8,9,6,9,4,3,6,8,1,8,6,3,9,5,9,4,8,3,8,3,8,5,9,8,3,8,4,3,8,6,4,8,9,6,8,6,9,4,8,3,6,3,9,5,9,4,8,9,8,6,4,8,9,1,8,6,9,6,1,9,6,3,8,3,9,8",
        reel_set3: "9,5,3,1,6,8,7,4,1,4,8,4,6,4,3,1,3,6,3,4,1,3,5,4,3,5,4,5,6,4,3,6,1,6,4,6,3,5,6,8,6,3,1,6,4,3,1,3,6,4,1,3,6,3,6,3,6,4,6,1,5,6,5,4,6,1,6,4,6,1,3,4,3,1,4,6,1,6,4,6,5,6,3,6,5,1,5,3,4,6,5,3,4,1,5,4,3,1,6,4,8,6,3,1,6,5,1,4,1,4,3,4,3,6,5,6,1,4,3,4,6,1,5,6,3,4,6,1,6,8,6,3,6,1,6,4,8,5,6,1,4,5,3,4,5,1,5,8,5,3,4,6,3,1,4,1,4,5,4,6,3,6,4,3,1,6,3,1,6,1,3,5,1,5,3,4,6,5,1,5,6,3,1,3,1,6~4,6,8,9,7,1,3,5,2,7,8,6,5,7,2,5,2,1,9,1,9,7,1,9,5,6,9,3,5,7,6,7,9,7,9,8,7,9,5,9,7,9,8,3,9,5,9,7,5,2,9,2,9,7~3,2,9,7,5,1,4,6,8,5,6,5,4,5,6,4,5,6,7,4,7,5,6,7,6,5,7,1,4,7,4,5,7,4,8,4,7,5,2,4,9,5,4,1,8,5,4,5,8,5,2,5,6,5,7,6,5,6,5,6,4,2,6,4,5,6,4,7,6,7,1,4,2,6,4,5,1,7,2,7,5,2,5,7,1,5,6,2,5,7,4,8,6,5,4,5,6,5,7,5,4,6,4,6,2,5,4,1,5,4,5,6,8,7,4,5,7~9,2,7,4,3,8,5,6,1,2,7,6,2,8,2,5,8,4,1,6,2,6,2,8,2,6,2,8,6,8,2,8,2,1,6,8,4,7,8,2,6,8,1,8,1,6,2,8,4,8,2,4,7,2,1,2,8,6,2,7,2,8,2,6,8,2,1,2,6,7,1,7,2,1,2,8,2,3,2,8,1,2,4,7,2,6,2,8,4,7,4,1,6~4,8,6,1,7,5,9,3,8,6,1,5,8,7,6,5,9,5,6,9,5,6,5,9,5,6,9,5,9,6,7,1,6,9,8,9,6,1,8,1,9,6,9,6,8,6,8,1,6,1,5,1,6,9,3,7,9,1,8,6,5,9,1,6,1,6,9,6,8,9,7,1,9,6,7,5,6,9,1,8,6,9,5,9,6,8,9,5,6,9,8,6,8,5,6,1,9,5,6,8,6,9,6,1,8,5,1,5,1,5,9,1,9,6,9,5,9,5,1,9,6,5,1,9,5,9,6,5,6,7,9,8,6,8,1,5,1,5,1,5,1,6,5,6,8,6,1,9,1,8,5,8,5,6,9,6",
    };

    //              api            
    if (player.lastPattern) {
        for (var key in player.lastPattern) {
            result[key] = player.lastPattern[key];
        }
    }

    result["balance"] = player.balance;
    result["balance_cash"] = player.balance;
    result["index"] = param.index;
    result["counter"] = ++param.counter;
    result["stime"] = new Date().getTime();

    if (player.betPerLine > 0) {
        result["c"] = player.betPerLine;
        result["defc"] = player.betPerLine;
    }
    return result;
};

ApiManager.prototype.GameApi = function (player, prevGameMode, param) {
    var result = {
        balance_bonus: "0",
        balance_cash: player.balance,
        balance: player.balance,
        c: player.betPerLine,
        counter: "1",
        index: "1",
        l: "20",
        na: "s",
        reel_set: 0,
        s: Util.view2String(player.machine.view),
        sa: Util.view2String(player.machine.virtualReels.above),
        sb: Util.view2String(player.machine.virtualReels.below),
        sh: "3",
        slm_mp: "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14",
        slm_mv: "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
        stime: new Date().getTime(),
        sver: "5",
        tw: player.machine.winMoney,
        w: player.machine.winMoney,
    };

    result["index"] = param.index;
    result["counter"] = ++param.counter;

    //                                 
    var winLines = player.machine.winLines;
    for (var i = 0; i < winLines.length; i++) {
        result[`l${i}`] = winLines[i];
    }

    if (player.machine.prevTumbleStatus == "NOTUMBLE" && player.machine.tumbleStatus == "TUMBLE") {
        result["rs_c"] = 1;
        result["rs_m"] = 1;
        result["rs_p"] = 0;
        result["rs"] = "mc";
        result["tmb"] = player.machine.tumbles.join('~');
        result["tmb_win"] = player.machine.tmb_win;
    }

    if (player.machine.currentGame != "FREE" && player.machine.prevTumbleStatus == "TUMBLE") {
        result["na"] = "s";
        result["tw"] = player.machine.tmb_res;
        result["w"] = player.machine.tmb_win;
        if (player.machine.tumbleStatus == "TUMBLE") {
            result["rs_c"] = 1;
            result["rs_m"] = 1;
            result["rs_p"] = player.machine.tumbleIndex;
            result["rs"] = "mc";
            result["tmb"] = player.machine.tumbles.join('~');
            result["tmb_win"] = player.machine.tmb_res;
            result["slm_mp"] = "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14";
            result["slm_mv"] = player.machine.multiPositions.join();
        } else if (player.machine.tumbleStatus == "NOTUMBLE") {
            result["rs_t"] = player.machine.tumbleIndex;
            result["w"] = 0;
            result["tmb_res"] = player.machine.tmb_res;
            result["tmb_win"] = player.machine.tmb_res;
            result["na"] = "c";
            result["slm_mp"] = "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14";
            result["slm_mv"] = player.machine.multiPositions.join();
        }
    }

    if (prevGameMode == "BASE") {
        if (player.machine.currentGame == "FREE") {
            result["fs"] = 1;
            result["fsmax"] = player.machine.freeSpinLength;
            result["fsmul"] = 1;
            result["fsres"] = 0.0;
            result["fswin"] = 0.0;
            result["na"] = "s";
            result["psym"] = `1~${player.machine.scatterWin}~${player.machine.scatterPositions.join(",")}`;
        }
    } else if (prevGameMode == "FREE") {
        //                       
        result["tw"] = player.machine.freeSpinWinMoney;

        if (player.machine.tumbleStatus == "TUMBLE") {
            result["rs_c"] = 1;
            result["rs_m"] = 1;
            result["rs_p"] = player.machine.tumbleIndex;
            result["rs"] = "mc";
            result["tmb"] = player.machine.tumbles.join('~');
            result["slm_mp"] = "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14";
            result["slm_mv"] = player.machine.multiPositions.join();

            result["tmb_win"] = player.machine.tmb_res;
            result["tw"] = player.machine.freeSpinWinMoney;
            result["w"] = player.machine.tmb_win;

        } else if (player.machine.tumbleStatus == "NOTUMBLE") {
            result["rs_t"] = player.machine.tumbleIndex;
            result["w"] = 0;
            result["slm_mp"] = "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14";
            result["slm_mv"] = player.machine.multiPositions.join();
        }

        if (player.machine.currentGame == "FREE") {
            result["na"] = "s";
            result["fs"] = player.machine.freeSpinIndex;
            result["fsmax"] = player.machine.freeSpinLength;
            result["fsmul"] = 1;
            result["fswin"] = player.machine.freeSpinWinMoney;
            result["fsres"] = player.machine.freeSpinWinMoney;
        } else if (player.machine.currentGame == "BASE") {
            result["na"] = "c";
            result["fs_total"] = player.machine.freeSpinLength;
            result["fsend_total"] = 0;
            result["fsmul_total"] = 1;
            result["fswin_total"] = player.machine.freeSpinWinMoney;
            result["fsres_total"] = player.machine.freeSpinWinMoney;
        }
    }

    return result;
};

ApiManager.prototype.CollectApi = function (player, param) {
    var result = {
        balance_bonus: "0.0",
        balance_cash: "100,000.00",
        balance: "100,000.00",
        counter: "2",
        index: "3",
        na: "s",
        stime: "1629939208592",
        sver: "5",
    };

    result["balance"] = player.balance;
    result["balance_cash"] = player.balance;
    result["stime"] = new Date().getTime();
    result["index"] = param.index;
    result["counter"] = ++param.counter;

    return result;
};

module.exports = ApiManager;
