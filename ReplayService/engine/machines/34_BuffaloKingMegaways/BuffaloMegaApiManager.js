var Util = require("../../../../utils/slot_utils")

function ApiManager() { }

ApiManager.prototype.InitApi = function (player, param) {
    var result = {
        accInit: `[{id:0,mask:"cp;mp"}]`,
        balance_bonus: "0.00",
        balance_cash: "100,000.00",
        balance: "100,000.00",
        bl: "0",
        bls: "20,25",
        bonuses: "0",
        c: "100.00",
        cfgs: "1",
        counter: "2",
        def_s: "13,11,9,11,7,13,12,11,5,7,12,12,8,7,5,4,12,12,8,9,5,4,12,12,8,9,12,9,6,7,6,5,11,10,13,8,12,9,13,10,13,13,13,3,13,13,13,13",
        def_sa: "4,5,6,7,8,9,3",
        def_sb: "4,5,6,7,8,9,3",
        defc: "100.00",
        fsbonus: "",
        g: `{reg:{def_s:"12,11,5,7,12,12,8,7,5,4,12,12,8,9,5,4,12,12,8,9,12,9,6,7,6,5,11,10,13,8,12,9,13,10,13,13,13,3,13,13,13,13",def_sa:"10,9,10,6,12,3",def_sb:"12,3,3,11,10,10",prm:"2~2,3,5;2~2,3,5;2~2,3,5",reel_set:"0",s:"12,11,5,7,12,12,8,7,5,4,12,12,8,9,5,4,12,12,8,9,12,9,6,7,6,5,11,10,13,8,12,9,13,10,13,13,13,3,13,13,13,13",sa:"10,9,10,6,12,3",sb:"12,3,3,11,10,10",sh:"7",st:"rect",sw:"6"},top:{def_s:"7,11,9,11",def_sa:"3",def_sb:"7",prm:"2~2,3,5;2~2,3,5;2~2,3,5",reel_set:"1",s:"7,11,9,11",sa:"3",sb:"7",sh:"4",st:"rect",sw:"1"}}`,
        gameInfo: `{rtps:{ante:"96.49",purchase:"96.50",regular:"96.52"},props:{max_rnd_sim:"1",max_rnd_hr:"1033057",max_rnd_win:"5000",max_rnd_win_a:"4000"}}`,
        gmb: "0,0,0",
        index: "1",
        l: "20",
        na: "s",
        nas: "13",
        paytable: "0,0,0,0,0,0;0,0,0,0,0,0;0,0,0,0,0,0;400,200,80,40,20,0;125,50,25,15,0,0;75,25,15,10,0,0;30,15,10,6,0,0;30,15,10,6,0,0;20,10,6,4,0,0;20,10,6,4,0,0;15,8,4,2,0,0;12,8,4,2,0,0;12,8,4,2,0,0;0,0,0,0,0,0",
        purInit: `[{type:"fsbl",bet:2000,bet_level:0}]`,
        reel_set_size: 14,
        reel_set0: "6,6,6,12,12,12,12,8,6,1,10,4,8,8,8,12,4,12,8,4,8,12,8,12,8,10,8,12,8,10,8,10,8,12,4,8,10,12,10,8,10,4,8,4,8,12,8,4,8,12,4,8,10,12,10,8~3,9,5,1,11,7,11,1,9,7,11,9,11,1,9,11,1,11,5,1,11,1,7,11,1,7,1,7,5,11,1,11,9,1,11,9,11,9,7,11,1,5,1,11,1,11,1,9,11,1,7,1,5,7,1,11,1,9~3,9,6,1,12,10,11,5,8,7,11,11,11,6,6,6,12,12,12,5,5,5,9,9,9,8,8,8,6,9,11,9,1,9,6,5,8,11,12,11,5,9,5,1,6,11,9,8,6,11,6,8,12,6,12,6,11,1,5~10,10,10,1,8,8,8,5,4,4,4,7,12,8,5,5,5,6,9,9,9,4,9,3,10,11,6,6,6,12,12,12,5,6,7,11,6~12,8,10,4,1,6,9,9,9,11,5,7,7,7,7,3,9,5,5,5,6,6,6,12,12,12,9,5,10,9,5,8,4,10,7,11,5,11,5,7,6,3,1,11,3,6,3,7,11,9,1,6,5,3,7,6,3,10~9,12,12,12,1,10,10,10,7,12,9,9,9,5,6,11,3,7,7,7,4,10,8,12,5,10,7,8,11,10,5,7,10,5,10,12,11,12,10,12,1,7,11,1,7,10,1,10,7,1,12,10,11,12,10,1",
        reel_set1: "9,11,5,3,7,11,5,11,7,5,7,3,5,11,7,11,3,11,5,7,5,11,7,5,11,7,11,7,5,11,5,11,5,11,7,11,7,11,5,7,11,5,11,5,7,11,5,7,5,7,11,5,11,7,11,7,5,11,7~12,12,12,4,12,8,10,6,8,8,8,6,6,6,4,8,4,10,8,6,8,6,10,4,8,6,8,10,6,8,6,8,6,8,4,6,8,10,6,8,6,8~8,6,6,6,3,5,12,12,12,10,6,5,5,5,12,7,11,9,9,9,9,8,8,8,11,11,11,6,9,12,9,12,7,12,11,6,12,6,5,12,3,12,9,6,12,3,11,12,6,9~6,6,6,5,11,9,7,10,4,3,12,12,12,8,6,8,8,8,12,9,9,9,10,10,10,5,5,5,4,4,4,12,10,11,12,10,12~11,6,6,6,6,8,3,5,5,5,12,4,7,9,9,9,9,10,7,7,7,5,12,12,12,10,6,7,12,6,7,5,4,7,5,3,6,5,7,12,5,10,7,5,7,10,6,4,3,7,10,6,3,6,4,7~11,8,9,4,12,10,10,10,3,10,7,7,7,7,6,12,12,12,5,9,9,9,12,10,9,12,7,10,9,7,4,9",
        reel_set2: "11,1,5,7,9,3,1,9,1,9,1,9,1,9,3,9,1,5,3,1,7,1,9,1,3,9,1,9,7,1,7,9,1,5,1,9,7,9,7,1,9,3,9,1,7,1,9,1,5,9,1,7,9,5,3~6,1,12,12,12,4,6,6,6,12,8,10,8,8,8,12,8,12,10,12,1,12,8,12,8,12,10,8,4,1,8,12,1,8,12,8,1,8,4,1,12,1,12,8,12,8,12,8,12,8,4,12,1,8,12,1,8,1,4,8~5,5,5,12,12,12,12,7,3,11,11,11,6,6,6,6,8,5,8,8,8,9,10,1,11,9,9,9,12,11,10,8,12,11,8,9,3,8,3,8,1,10,8,11,12,8,6,8,11,9,6,8,9,11,12,8,6,8,6,8,10,8,6,12~1,9,8,8,8,3,4,4,4,10,4,6,6,6,12,7,10,10,10,8,5,11,6,9,9,9,12,12,12,5,5,5,12,9,5,9,8,9,4,12,5,9,8,10,9,6,12,4,5,9,4,10,4,8,10,12,8,9,12,6,9,10,9,12,8~10,7,9,5,12,12,12,8,6,6,6,1,5,5,5,12,9,9,9,6,11,4,3,7,7,7,11,9,7,9,5,4,5,6,5,7,9,7,12,7,12,11,4,12,4,7,12,6,7,12,5,12,7,5~10,10,10,1,10,12,8,5,7,7,7,11,7,4,9,12,12,12,3,6,9,9,9,4,7,5,7,3,7,9,12,9,4,1,7,9,12,9,7,4,7,4,12,6,12,3,4,12,9,12,8,4,12,3,9,3,7,12,11,3,11",
        reel_set3: "12,1,12,4,12,4,12,1,10,4,12,4,12,10,1,12,10,1,10,12,10,4,8,1,12,12,12,12,6",
        reel_set4: "11,1,5,7,9,3,1,9,1,9,1,9,1,9,3,9,1,5,3,1,7,1,9,1,3,9,1,9,7,1,7,9,1,5,1,9,7,9,7,1,9,3,9,1,7,1,9,1,5,9,1,7,9,5,3~6,1,12,12,12,4,6,6,6,12,8,10,8,8,8,12,8,12,10,12,1,12,8,12,8,12,10,8,4,1,8,12,1,8,12,8,1,8,4,1,12,1,12,8,12,8,12,8,12,8,4,12,1,8,12,1,8,1,4,8~5,5,5,12,12,12,12,7,3,11,11,11,6,6,6,6,8,5,8,8,8,9,10,1,11,9,9,9,12,11,10,8,12,11,8,9,3,8,3,8,1,10,8,11,12,8,6,8,11,9,6,8,9,11,12,8,6,8,6,8,10,8,6,12~1,9,8,8,8,3,4,4,4,10,4,6,6,6,12,7,10,10,10,8,5,11,6,9,9,9,12,12,12,5,5,5,12,9,5,9,8,9,4,12,5,9,8,10,9,6,12,4,5,9,4,10,4,8,10,12,8,9,12,6,9,10,9,12,8~10,7,9,5,12,12,12,8,6,6,6,1,5,5,5,12,9,9,9,6,11,4,3,7,7,7,11,9,7,9,5,4,5,6,5,7,9,7,12,7,12,11,4,12,4,7,12,6,7,12,5,12,7,5~10,10,10,1,10,12,8,5,7,7,7,11,7,4,9,12,12,12,3,6,9,9,9,4,7,5,7,3,7,9,12,9,4,1,7,9,12,9,7,4,7,4,12,6,12,3,4,12,9,12,8,4,12,3,9,3,7,12,11,3,11",
        reel_set5: "12,1,12,4,12,4,12,1,10,4,12,4,12,10,1,12,10,1,10,12,10,4,8,1,12,12,12,12,6",
        reel_set6: "11,1,5,7,9,3,1,9,1,9,1,9,1,9,3,9,1,5,3,1,7,1,9,1,3,9,1,9,7,1,7,9,1,5,1,9,7,9,7,1,9,3,9,1,7,1,9,1,5,9,1,7,9,5,3~6,1,12,12,12,4,6,6,6,12,8,10,8,8,8,12,8,12,10,12,1,12,8,12,8,12,10,8,4,1,8,12,1,8,12,8,1,8,4,1,12,1,12,8,12,8,12,8,12,8,4,12,1,8,12,1,8,1,4,8~5,5,5,12,12,12,12,7,3,11,11,11,6,6,6,6,8,5,8,8,8,9,10,1,11,9,9,9,12,11,10,8,12,11,8,9,3,8,3,8,1,10,8,11,12,8,6,8,11,9,6,8,9,11,12,8,6,8,6,8,10,8,6,12~1,9,8,8,8,3,4,4,4,10,4,6,6,6,12,7,10,10,10,8,5,11,6,9,9,9,12,12,12,5,5,5,12,9,5,9,8,9,4,12,5,9,8,10,9,6,12,4,5,9,4,10,4,8,10,12,8,9,12,6,9,10,9,12,8~10,7,9,5,12,12,12,8,6,6,6,1,5,5,5,12,9,9,9,6,11,4,3,7,7,7,11,9,7,9,5,4,5,6,5,7,9,7,12,7,12,11,4,12,4,7,12,6,7,12,5,12,7,5~10,10,10,1,10,12,8,5,7,7,7,11,7,4,9,12,12,12,3,6,9,9,9,4,7,5,7,3,7,9,12,9,4,1,7,9,12,9,7,4,7,4,12,6,12,3,4,12,9,12,8,4,12,3,9,3,7,12,11,3,11",
        reel_set7: "12,1,12,4,12,4,12,1,10,4,12,4,12,10,1,12,10,1,10,12,10,4,8,1,12,12,12,12,6",
        reel_set8: "11,1,5,7,9,3,1,9,1,9,1,9,1,9,3,9,1,5,3,1,7,1,9,1,3,9,1,9,7,1,7,9,1,5,1,9,7,9,7,1,9,3,9,1,7,1,9,1,5,9,1,7,9,5,3~6,1,12,12,12,4,6,6,6,12,8,10,8,8,8,12,8,12,10,12,1,12,8,12,8,12,10,8,4,1,8,12,1,8,12,8,1,8,4,1,12,1,12,8,12,8,12,8,12,8,4,12,1,8,12,1,8,1,4,8~5,5,5,12,12,12,12,7,3,11,11,11,6,6,6,6,8,5,8,8,8,9,10,1,11,9,9,9,12,11,10,8,12,11,8,9,3,8,3,8,1,10,8,11,12,8,6,8,11,9,6,8,9,11,12,8,6,8,6,8,10,8,6,12~1,9,8,8,8,3,4,4,4,10,4,6,6,6,12,7,10,10,10,8,5,11,6,9,9,9,12,12,12,5,5,5,12,9,5,9,8,9,4,12,5,9,8,10,9,6,12,4,5,9,4,10,4,8,10,12,8,9,12,6,9,10,9,12,8~10,7,9,5,12,12,12,8,6,6,6,1,5,5,5,12,9,9,9,6,11,4,3,7,7,7,11,9,7,9,5,4,5,6,5,7,9,7,12,7,12,11,4,12,4,7,12,6,7,12,5,12,7,5~10,10,10,1,10,12,8,5,7,7,7,11,7,4,9,12,12,12,3,6,9,9,9,4,7,5,7,3,7,9,12,9,4,1,7,9,12,9,7,4,7,4,12,6,12,3,4,12,9,12,8,4,12,3,9,3,7,12,11,3,11",
        reel_set9: "12,1,12,4,12,4,12,1,10,4,12,4,12,10,1,12,10,1,10,12,10,4,8,1,12,12,12,12,6",
        reel_set10: "9,11,5,3,7,11,5,11,7,5,7,3,5,11,7,11,3,11,5,7,5,11,7,5,11,7,11,7,5,11,5,11,5,11,7,11,7,11,5,7,11,5,11,5,7,11,5,7,5,7,11,5,11,7,11,7,5,11,7~12,12,12,4,12,8,10,6,8,8,8,6,6,6,4,8,4,10,8,6,8,6,10,4,8,6,8,10,6,8,6,8,6,8,4,6,8,10,6,8,6,8~8,6,6,6,3,5,12,12,12,10,6,5,5,5,12,7,11,9,9,9,9,8,8,8,11,11,11,6,9,12,9,12,7,12,11,6,12,6,5,12,3,12,9,6,12,3,11,12,6,9~6,6,6,5,11,9,7,10,4,3,12,12,12,8,6,8,8,8,12,9,9,9,10,10,10,5,5,5,4,4,4,12,10,11,12,10,12~11,6,6,6,6,8,3,5,5,5,12,4,7,9,9,9,9,10,7,7,7,5,12,12,12,10,6,7,12,6,7,5,4,7,5,3,6,5,7,12,5,10,7,5,7,10,6,4,3,7,10,6,3,6,4,7~11,8,9,4,12,10,10,10,3,10,7,7,7,7,6,12,12,12,5,9,9,9,12,10,9,12,7,10,9,7,4,9",
        reel_set11: "5,11,9,11,7,9,11,5,11,7,11,7,1,9,5,11,5,7,1,7,5,11,9,11,7,11,5,11,7,11,5,11,5,11,9,11,11,11,11,5,1,7,3",
        reel_set12: "9,11,5,3,7,11,5,11,7,5,7,3,5,11,7,11,3,11,5,7,5,11,7,5,11,7,11,7,5,11,5,11,5,11,7,11,7,11,5,7,11,5,11,5,7,11,5,7,5,7,11,5,11,7,11,7,5,11,7~12,12,12,4,12,8,10,6,8,8,8,6,6,6,4,8,4,10,8,6,8,6,10,4,8,6,8,10,6,8,6,8,6,8,4,6,8,10,6,8,6,8~8,6,6,6,3,5,12,12,12,10,6,5,5,5,12,7,11,9,9,9,9,8,8,8,11,11,11,6,9,12,9,12,7,12,11,6,12,6,5,12,3,12,9,6,12,3,11,12,6,9~6,6,6,5,11,9,7,10,4,3,12,12,12,8,6,8,8,8,12,9,9,9,10,10,10,5,5,5,4,4,4,12,10,11,12,10,12~11,6,6,6,6,8,3,5,5,5,12,4,7,9,9,9,9,10,7,7,7,5,12,12,12,10,6,7,12,6,7,5,4,7,5,3,6,5,7,12,5,10,7,5,7,10,6,4,3,7,10,6,3,6,4,7~11,8,9,4,12,10,10,10,3,10,7,7,7,7,6,12,12,12,5,9,9,9,12,10,9,12,7,10,9,7,4,9",
        reel_set13: "5,11,9,11,7,9,11,5,11,7,11,7,1,9,5,11,5,7,1,7,5,11,9,11,7,11,5,11,7,11,5,11,5,11,9,11,11,11,11,5,1,7,3",
        rt: "d",
        rtp: "96.52",
        s: "13,11,9,11,7,13,12,11,5,7,12,12,8,7,5,4,12,12,8,9,5,4,12,12,8,9,12,9,6,7,6,5,11,10,13,8,12,9,13,10,13,13,13,3,13,13,13,13",
        sc: "10.00,20.00,30.00,40.00,50.00,100.00,200.00,300.00,400.00,500.00,750.00,1000.00,2000.00,3000.00,4000.00,5000.00",
        scatters: "1~100,20,5,0,0,0~0,0,0,0,0,0~1,1,1,1,1,1",
        sh: "8",
        stime: "1633777654494",
        sver: "5",
        sw: "6",
        t: "243",
        total_bet_max: "10,000,000.00",
        total_bet_min: "10.00",
        ver: "2",
        wilds: "2~0,0,0,0,0,0~1,1,1,1,1,1",
        wl_i: "tbm~5000;tbm_a~4000",
    };

    //              api            
    if (player.lastPattern) {
        for (var key in player.lastPattern) {
            result[key] = player.lastPattern[key];
        }
    }

    result["balance"] = player.balance;
    result["balance_cash"] = player.balance;
    result["index"] = param.index;
    result["counter"] = ++param.counter;
    result["stime"] = new Date().getTime();

    if (player.betPerLine > 0) {
        result["c"] = player.betPerLine;
        result["defc"] = player.betPerLine;
    }
    return result;
};

ApiManager.prototype.GameApi = function (player, prevGameMode, param) {
    var result = {
        balance_bonus: "0",
        balance_cash: "100,000.00",
        balance: "100,000.00",
        bl: "0",
        c: "100.00",
        counter: "1",
        index: "1",
        l: "20",
        na: "s",
        s: "8,8,3,3,4,8,9,4,3,8,3,3,7,8,5,5,9,8,9,8,7,7,5,8,9,9,4,4,4,3,8,8,7,5,9,8,3,4,8,8,7,7,8,7,7,4,9,4,6",
        sh: "8",
        st: "rect",
        stime: new Date().getTime(),
        sver: "5",   
        sw: "6",
        tw: "0.00",
        w: "0.00",
    };

    result["s"] = Util.view2String(player.machine.view);
    result["c"] = player.betPerLine;

    //                                 
    var winLines = player.machine.winLines;
    for (var i = 0; i < winLines.length; i++) {
        result[`l${i}`] = winLines[i];
    }
    result["index"] = param.index;
    result["counter"] = ++param.counter;
    result["balance"] = player.balance;
    result["balance_cash"] = player.balance;
    result["tw"] = player.machine.winMoney;
    result["w"] = player.machine.winMoney;

    var topTumbleStr = `,tmb:"${player.machine.topTumble}"`;
    if (player.machine.topTumble.length == 0) {
        topTumbleStr = "";
    }
    var boxTumbleStr = `,tmb:"${player.machine.boxTumble}"`;
    if (player.machine.boxTumble.length == 0) {
        boxTumbleStr = "";
    }
    var topMultiStr = `,rmul:"${player.machine.topMultiStr}"`;
    if (player.machine.topMultiStr.length == 0) {
        topMultiStr = "";
    }
    var boxMultiStr = `,rmul:"${player.machine.boxMultiStr}"`;
    if (player.machine.boxMultiStr.length == 0) {
        boxMultiStr = "";
    }

    result["g"] = `{reg:{reel_set:"8"${boxMultiStr},s:"${player.machine.boxView.join()}",sa:"${player.machine.virtualReels.above.join()}",sb:"${player.machine.virtualReels.below.join()}",sh:"7",st:"rect",sw:"6"${boxTumbleStr}},top:{reel_set:"9"${topMultiStr},s:"${player.machine.topView.join()}",sa:"${player.machine.topLineAbove}",sb:"12",sh:"4",st:"rect",sw:"1"${topTumbleStr}}}`;

    if (player.machine.prevTumbleStatus == "NOTUMBLE" && player.machine.tumbleStatus == "TUMBLE") {
        result["rs_c"] = 1;
        result["rs_m"] = 1;
        result["rs_p"] = 0;
        result["rs"] = "mc";
        result["tmb_win"] = player.machine.tmb_res;
    }
    if (player.machine.prevTumbleStatus == "TUMBLE") {
        result["na"] = "s";
        result["tw"] = player.machine.tmb_res;
        result["tmb_win"] = player.machine.tmb_res;
        if (player.machine.tumbleStatus == "TUMBLE") {
            result["rs_c"] = 1;
            result["rs_m"] = 1;
            result["rs_p"] = player.machine.tumbleIndex;
            result["rs"] = "mc";
        } else if (player.machine.tumbleStatus == "NOTUMBLE") {
            result["rs_t"] = player.machine.tumbleIndex;
            result["tmb_res"] = player.machine.tmb_res * player.machine.tumbleMulti;
            result["na"] = "c";
        }
    }

    if (prevGameMode == "BASE") {
        if (player.machine.currentGame == "FREE") {
            result["fs"] = 1;
            result["fsmax"] = player.machine.freeSpinLength;
            result["fsmul"] = 1;
            result["fswin"] = "0.00";
            result["fsres"] = "0.00";
            result["psym"] = `1~${player.machine.scatterWin}~${player.machine.scatterPositions.join()}`;
            result["na"] = "s";
        }
    } else if (prevGameMode == "FREE") {
        //                       
        if (player.machine.tumbleStatus == "TUMBLE") {
            result["tw"] = player.machine.freeSpinWinMoney + player.machine.tmb_res;
        } else if (player.machine.tumbleStatus == "NOTUMBLE") {
            result["tw"] = player.machine.freeSpinWinMoney;
        }
        result["acci"] = 0;
        result["accm"] = "cp";
        result["accv"] = player.machine.tumbleMulti / player.machine.lastTumbleMulti;
        // console.log("accv: " + player.machine.tumbleMulti);

        if (player.machine.prevTumbleStatus == "TUMBLE") {
            if (player.machine.tumbleStatus == "NOTUMBLE" && player.machine.tumbleMulti > 1) {
                result["apt"] = "tumbling_win_mul";
                result["apv"] = player.machine.tumbleMulti;
                result["apwa"] = player.machine.winMoney;

                // console.log("apv: " + player.machine.tumbleMulti + ", apwa: " + player.machine.winMoney);
            }
            if (player.machine.tumbleStatus == "NOTUMBLE") {
                result["w"] = "0.00";
            }
        }

        if (player.machine.currentGame == "FREE") {
            result["na"] = "s";
            result["fs"] = player.machine.freeSpinIndex;
            result["fsmax"] = player.machine.freeSpinLength;
            result["fsmul"] = 1;
            result["fswin"] = player.machine.freeSpinWinMoney;
            result["fsres"] = player.machine.freeSpinWinMoney;
        } else if (player.machine.currentGame == "BASE") {
            //                                     ->                       
            result["na"] = "c";
            result["fs_total"] = player.machine.freeSpinLength;
            result["fsmul_total"] = 1;
            result["fswin_total"] = player.machine.freeSpinWinMoney;
            result["fsres_total"] = player.machine.freeSpinWinMoney;
        }
    }

    return result;
}

ApiManager.prototype.CollectApi = function (player, param) {
    var result = {
        balance_bonus: "0.0",
        balance_cash: "100,000.00",
        balance: "100,000.00",
        counter: "2",
        index: "3",
        na: "s",
        stime: "1629939208592",
        sver: "5",
    };

    result["balance"] = player.balance;
    result["balance_cash"] = player.balance;
    result["stime"] = new Date().getTime();
    result["index"] = param.index;
    result["counter"] = ++param.counter;

    return result;
}

module.exports = ApiManager;