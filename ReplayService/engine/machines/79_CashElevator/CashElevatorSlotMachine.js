var Util = require("../../../../utils/slot_utils");

function SlotMachine() {
    //                 
    this.spinIndex = 0;
    this.currentGame = "BASE";
    this.gameSort = "BASE";
    this.lineCount = 20;
    this.freeSpinCount = 5;
    //                                 
    this.view = [];
    this.virtualReels = {};
    this.winMoney = 0;
    this.winLines = [];
    this.floorSN = "";
    this.basement = false;
    this.reelIndex = 2;
    this.floorChange = false;
    this.moneyCache = {};
    this.floorCacheList = {};
    //                 
    this.floorNumber = 3;
    this.floorNumberPT = 3; //                

    //                           
    this.freeSpinIndex = 0;
    this.freeSpinLength = 0;
    this.freeSpinCountArr = [];
    this.freeSpinWinMoney = 0;
    this.freeSpinCacheList = [];
    this.freeSpinStep = 0;
    this.freeSpinNextStep = 0;
    this.freeSpinFloorSN = "";
    this.freeSpinFloorNumber = 0;
    //                              
    this.moneyBonusWin = 0;
    this.moneyCacheIndex = 0;
    this.moneyBonusCacheList = [];
    this.moneyBonusCount = -1;
    this.holdSpinFloorNumber = 0;
    this.holdSpinLastFloor = 0;
    this.holdSpinCount = 0;
    this.holdSpinCountArr = [];
    this.holdSpinSticky = "";
    this.holdSpinAdded = false;
    this.moneyBonusWinPerBet = 0;

    //                      
    this.patternCount = 2000; //                  
    this.lowLimit = 10; //                         
    this.prevBalance = 0; //                       (                         )

    this.betPerLine = 0;
    this.totalBet = 0;
    this.jackpotType = ["FREE", "BONUS"];
};

var scatter = 1;
var wild = 2;
var slotWidth = 5;
var slotHeight = 3;
var upSymbol = 16;
var downSymbol = 17;
var humanSymbol = 18;
var moneySymbol = 19;
var emptySymbol = 20;
//                                           accv               
//                              ,                                    
var freeSpinFloorSNArr = [
    ["0~1~0~0", "0~1~1~1~0", ""],
    ["0~1~0~-1~1", "0~1~1~0", "0~1~2~1~1"],
    ["", "0~1~1~-1~2", "0~1~2~0"],
];
var baseReels = [
    //1   
    [
        [10, 6, 10, 10, 10, 12, 6, 6, 6, 11, 5, 3, 4, 4, 4, 14, 5, 5, 5, 9, 15, 15, 15, 15, 13, 8, 3, 3, 3, 4, 7, 14, 14, 14, 15, 6, 14, 11, 15, 3, 15, 6, 5, 3, 5, 11, 14, 15, 4, 6, 3, 5, 12, 3, 14, 5, 14, 13, 3, 13, 14, 6, 13, 14, 15, 6, 8, 15, 14, 9, 13, 14, 15, 5, 3, 9, 14, 15, 8, 15, 14, 3, 9, 5, 15, 6, 14, 15, 5, 4, 3, 13, 3, 15, 14, 15, 3, 15, 6, 15, 8, 5, 12, 14, 3, 5, 15, 5, 15, 14, 12, 13, 15, 4, 13, 11, 5, 15, 6, 14, 6, 4, 15, 8, 14, 6, 14, 9, 15, 11, 5, 15, 7, 3, 5, 13, 5, 14, 15, 14, 15, 11, 15, 12, 4, 15, 11, 15, 9, 14, 11, 4, 15, 5, 3, 15, 8, 15, 4, 15, 6, 15, 11, 3, 15, 14, 3, 14, 13, 9, 11, 3, 15, 4, 15, 6, 15, 6, 15, 13, 11],
        [15, 5, 5, 5, 9, 3, 5, 13, 4, 4, 4, 8, 12, 12, 12, 12, 4, 6, 11, 7, 10, 14, 14, 14, 14, 9, 9, 9, 18, 18, 18, 15, 15, 15, 6, 6, 6, 3, 3, 3, 9, 6, 5, 9, 11, 6, 12, 9, 5, 4, 5, 10, 9, 12, 6, 12, 14, 8, 5, 8, 7, 3, 8, 6, 12, 14, 12, 4, 6, 12, 6, 5, 12, 10, 6, 9, 4, 5, 12, 4, 3, 12, 5, 12, 5, 6, 3, 4, 5, 8, 14, 6, 3, 12, 3, 8],
        [7, 4, 6, 6, 6, 5, 9, 11, 11, 11, 13, 13, 13, 13, 3, 6, 4, 8, 16, 11, 12, 4, 4, 4, 4, 15, 10, 15, 15, 15, 14, 3, 3, 3, 4, 5, 17, 12, 4, 5, 15, 3, 14, 4, 15, 6, 4, 15, 16, 14, 12, 4, 12, 15, 4, 11, 3, 12, 11, 3, 6, 3, 13, 11, 4, 9, 14, 13, 15, 9, 13, 15, 3, 4, 11, 4, 12, 4, 15, 4, 17, 3, 12, 11, 3, 11, 17, 15, 5, 12, 4, 15, 4, 11, 3, 15, 4, 12, 3, 4, 3, 12, 11, 9],
        [10, 8, 9, 15, 3, 13, 13, 13, 11, 12, 7, 4, 7, 7, 7, 5, 4, 4, 4, 4, 4, 13, 6, 6, 6, 14, 12, 12, 12, 6, 15, 15, 15, 5, 5, 5, 14, 14, 14, 15, 5, 6, 7, 12, 5, 13, 14, 7, 14, 13, 5, 6, 7, 12, 15, 12, 6, 14, 12, 15, 12, 7, 15, 12, 15, 13, 6, 7, 4, 7, 4, 7, 4, 12, 15, 12, 14, 12, 15, 7, 6, 11, 7, 5, 6, 15, 12, 7, 15, 12, 5, 14, 6, 13, 7, 9, 6, 7, 5, 7, 14, 4, 15, 5, 6, 7, 6, 14, 12, 13, 6, 7, 12, 14, 6, 7, 6, 14, 6, 4, 5, 14, 4, 5, 6, 12, 11, 4, 5, 15, 13, 12, 7, 12, 14, 3, 7, 5, 7, 5, 13, 5, 4, 6, 14, 12, 9, 12, 9, 7, 12, 6, 5, 7, 9, 7, 5, 6, 5, 6, 12, 15, 5, 6, 5, 12, 4, 5, 4],
        [10, 3, 10, 10, 10, 9, 6, 12, 13, 14, 14, 14, 11, 14, 7, 15, 15, 15, 4, 7, 7, 7, 8, 5, 15, 9, 9, 9, 3, 3, 3, 12, 12, 12, 11, 11, 11, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 5, 6, 5, 15, 3, 8, 5, 9, 11, 7, 9, 14, 6, 5, 3, 6, 15, 11, 14, 12, 11, 5, 3, 6, 3, 14, 6, 14, 3, 5, 11, 3, 6, 9, 12],
    ],
    // 2   
    [
        [12, 7, 7, 7, 7, 9, 5, 5, 5, 8, 5, 12, 12, 12, 11, 13, 4, 10, 14, 3, 3, 3, 6, 3, 11, 11, 11, 13, 13, 13, 4, 4, 4, 14, 14, 14, 10, 10, 10, 9, 9, 9, 6, 6, 6, 11, 6, 11, 6, 14, 10, 9, 11, 4, 11, 13, 14, 6, 10, 6, 13, 6, 14, 10, 7, 6, 7, 14, 6, 11, 10, 5, 3, 14, 5, 11, 7, 13, 9, 7, 10, 13, 11, 4, 7, 13, 10, 14, 13, 11, 13, 10, 6, 4, 14, 4, 3, 13, 7, 14, 6, 7, 3, 10, 4, 9, 11, 13, 9, 14, 6, 11, 10, 7, 6, 14, 7, 6, 11, 5, 6, 10, 14, 4, 13, 4, 11, 5, 10, 14, 4, 3, 4, 11, 7, 3, 11, 5, 8, 6, 3, 11, 3, 7, 13, 9, 6, 14, 4, 10, 3, 14, 6, 14, 7, 3, 4, 10, 14, 7, 6, 4, 14, 6, 3, 14, 13, 5, 13, 7, 13, 6, 11, 4, 6, 3, 4, 6, 11, 6, 7, 5, 3, 10],
        [12, 12, 12, 11, 14, 14, 14, 4, 7, 12, 9, 3, 3, 3, 10, 11, 11, 11, 14, 13, 3, 8, 6, 5, 6, 6, 6, 7, 7, 7, 4, 4, 4, 9, 9, 9, 5, 5, 5, 10, 13, 7, 13, 9, 7, 11, 7, 5, 6, 7, 10, 9, 8, 11, 9, 7, 13, 3, 8, 9, 7, 11, 8, 7, 5, 6, 13, 10, 6],
        [14, 14, 14, 7, 13, 13, 13, 13, 17, 9, 6, 3, 3, 3, 16, 3, 5, 5, 5, 10, 4, 11, 12, 11, 11, 11, 14, 10, 10, 10, 8, 5, 9, 9, 9, 12, 12, 12, 4, 4, 4, 6, 6, 6, 11, 12],
        [7, 7, 7, 4, 13, 13, 13, 3, 11, 6, 6, 6, 12, 13, 14, 6, 10, 9, 4, 4, 4, 7, 18, 18, 18, 8, 5, 5, 5, 5, 14, 14, 14, 8, 13, 5, 8, 5, 4, 5, 9, 5, 9, 4, 8, 10, 4, 5, 9, 4, 5, 9, 8, 6, 4, 6, 5, 6, 5, 14, 13, 14, 6, 4, 11, 4, 11, 5, 4, 5, 4, 5, 6, 14, 6, 5, 14, 8, 6, 4, 10, 9, 4, 14, 4, 6, 4],
        [7, 8, 8, 8, 14, 10, 12, 12, 12, 4, 11, 6, 5, 5, 5, 12, 4, 4, 4, 9, 13, 13, 13, 8, 5, 3, 11, 11, 11, 13, 7, 7, 7, 6, 6, 6, 9, 9, 9, 14, 14, 14, 3, 3, 3, 12, 3, 13, 9, 4, 14],
    ],
    // 3   
    [
        [4, 8, 5, 5, 5, 5, 10, 6, 10, 10, 10, 9, 12, 11, 12, 12, 12, 13, 3, 3, 3, 3, 7, 6, 6, 6, 13, 13, 13, 4, 4, 4, 6, 13, 6, 12, 5, 12, 13, 3, 7, 5, 12, 3, 10, 5, 13, 12, 13, 10, 8, 13, 3, 13, 6, 3, 13, 5, 13, 3, 12, 10, 5, 6, 12, 6, 10, 6, 5, 12, 13, 12, 3, 13, 3, 13, 10, 6, 13, 3, 10, 12, 13, 3, 10, 7, 5, 6, 10, 3, 5, 3, 12, 6, 13, 3, 6, 12, 13, 12, 8, 13, 5, 12, 10, 13, 6, 10, 5, 13, 3, 13, 3, 13, 3, 5, 6, 10, 3, 10, 5, 10, 12, 5, 12, 3, 5, 6, 3, 12, 5, 12, 6, 3, 5, 13, 6, 5, 3, 13, 8, 3, 10, 5, 12, 13, 12, 6, 13, 12, 13, 3, 6, 5, 6, 5, 12, 9, 5, 6, 12, 13, 10, 6, 13, 3, 5, 3, 10, 6, 5, 3],
        [13, 13, 13, 5, 4, 8, 10, 4, 4, 4, 13, 7, 12, 11, 11, 11, 9, 10, 10, 10, 6, 7, 7, 7, 11, 3, 8, 8, 8, 6, 6, 6, 12, 12, 12, 9, 9, 9, 18, 18, 18, 3, 3, 3, 7, 11, 6, 9, 7, 4, 7, 10, 11, 4, 9, 11, 8, 7, 12, 9, 3, 8, 6, 7, 11, 12, 8, 11, 12, 3, 12, 4, 11, 7, 6, 7, 8, 3, 6, 9, 6, 12],
        [11, 5, 3, 4, 12, 10, 16, 13, 4, 13, 13, 13, 9, 3, 3, 3, 8, 7, 6, 4, 4, 4, 6, 6, 6, 5, 4, 6, 4, 12, 4, 6, 4, 5, 3, 4, 6, 16, 3, 4, 3, 6, 8, 10, 5, 6, 3, 12, 5, 12, 13, 4, 12, 17, 6, 3, 13, 3, 4, 9, 5, 16, 10, 4, 12, 13, 3, 6, 3, 12, 9, 5, 4, 9, 12, 8, 3, 5, 6, 4, 9, 12, 13, 3, 10, 6, 3, 4, 13, 4, 16, 4, 6, 3, 5],
        [12, 13, 13, 13, 13, 3, 10, 10, 10, 4, 9, 6, 8, 5, 5, 5, 5, 7, 8, 8, 8, 11, 10, 4, 4, 4, 7, 7, 7, 11, 11, 11, 6, 6, 6, 4, 6, 13, 4, 9, 4, 5, 9, 4, 13, 10, 13, 7, 11, 4, 13, 8, 13, 8, 10, 4, 10, 8, 9, 10, 9, 4, 6, 4, 11, 8, 13, 4, 5, 11, 8, 4, 11, 4, 5, 13, 4, 8, 9, 8, 6, 4, 3, 13, 11, 5, 6, 9, 8, 5, 4, 10, 6, 4, 6, 8, 5, 10, 6, 4, 9, 3, 6, 4, 5, 6, 5, 4, 9, 4, 11, 6, 8, 11, 13, 8, 5, 13, 6, 11, 8],
        [8, 7, 7, 7, 4, 3, 6, 3, 3, 3, 5, 12, 6, 6, 6, 11, 13, 10, 10, 10, 10, 7, 9, 13, 13, 13, 12, 12, 12, 4, 4, 4, 3, 12, 3, 4, 10, 12, 6, 13, 6, 3, 13, 4, 3, 12, 3, 11, 13, 12, 3, 7, 3, 12, 10, 3, 13, 10, 3, 6, 4, 12, 5, 3, 7, 3, 12, 3, 12, 7, 3],
    ],
    // 4   
    [
        [10, 10, 10, 12, 6, 11, 11, 11, 10, 9, 5, 8, 8, 8, 7, 4, 12, 12, 12, 11, 3, 4, 4, 4, 8, 3, 3, 3, 6, 6, 6, 5, 5, 5, 7, 7, 7, 9, 9, 9, 4, 12, 9, 3, 11, 9, 5, 4, 9, 3, 7, 9, 3, 11, 9, 5, 4, 12, 5, 12, 7, 5, 12, 11, 12, 5, 6, 7, 6, 11, 7, 12, 8, 4, 12, 4, 5, 3, 8, 7, 5, 9, 5, 9, 8, 12, 9],
        [12, 12, 12, 12, 3, 4, 5, 6, 6, 6, 6, 7, 8, 9, 10, 3, 3, 3, 11, 11, 11, 11, 9, 9, 9, 4, 4, 4, 10, 10, 10, 9, 6, 3, 6, 10, 6, 4, 11, 4, 3, 11, 10, 6, 11, 4, 11, 7],
        [5, 8, 10, 10, 10, 11, 7, 3, 3, 3, 9, 8, 8, 8, 6, 4, 3, 10, 5, 5, 5, 17, 9, 9, 9, 12, 16, 12, 12, 12, 6, 6, 6, 11, 11, 11, 4, 4, 4, 9, 10, 6, 3, 4, 3],
        [4, 4, 4, 9, 8, 5, 5, 5, 4, 3, 6, 10, 11, 6, 6, 6, 5, 12, 7, 18, 18, 18, 12, 12, 12, 6, 11, 6, 5, 11, 10, 6, 11, 12, 5, 12, 5, 9, 11, 9, 5, 11, 5, 12, 11, 6, 11, 5, 6, 12, 6, 3, 6, 12, 5, 6, 9, 12, 9, 6, 9, 7, 8, 5, 12, 11],
        [3, 8, 9, 12, 4, 11, 7, 10, 5, 9, 9, 9, 6, 11, 11, 11, 5, 5, 5, 12, 12, 12, 6, 6, 6, 10, 10, 10, 4, 4, 4, 3, 3, 3, 8, 6, 4, 7, 6, 8, 9, 4, 9, 12, 6, 10, 4, 11, 12, 4, 12, 7, 4, 8, 5, 9, 12, 7, 5, 4, 8, 6, 10, 12, 6, 4, 5, 6, 12, 5, 6, 7, 5, 11, 5, 10, 6, 12, 7, 5, 4, 7, 12, 4, 12, 8, 7, 5, 12, 10, 4, 10, 7, 4, 12, 8, 5, 4, 12, 7, 11, 5, 7, 12, 5, 7, 12, 4, 7, 8, 9, 8, 10, 4, 7, 6, 4, 8, 12, 9, 12, 11, 10, 5, 6, 4, 9, 5, 8, 5, 7, 6, 7, 9, 11, 5, 6, 8, 6, 7, 12, 4, 6, 8, 7, 9, 6, 5, 8, 4, 7, 8, 5, 10, 4, 7, 6, 7, 10, 6],
    ],
    // 5   
    [
        [9, 11, 7, 9, 9, 9, 8, 4, 3, 5, 5, 5, 10, 4, 4, 4, 6, 5, 3, 3, 3, 11, 11, 11, 6, 6, 6, 10, 10, 10, 5, 6, 11, 6, 8, 11, 10, 11, 4, 11, 6, 11, 4, 11, 8, 5, 4, 10, 6, 5, 10, 4, 5, 10, 4, 5, 3, 10, 5, 6, 4, 11, 5, 6, 4, 10, 6, 4, 11, 8, 4, 5, 3, 8, 3, 11, 10, 3, 5, 11, 5, 4, 5, 11, 5, 6, 11, 4, 10, 8, 4, 5, 11, 5, 11, 3, 5, 11, 6, 5, 3, 4, 11, 4, 11, 6, 10, 11, 8, 6, 11, 10, 5, 11, 4, 11, 6, 11, 6, 8, 6, 10, 5, 4, 10, 3, 4, 10, 3, 11, 6, 5, 11, 5, 4, 6, 4, 10, 6, 4, 6, 3, 6, 11],
        [4, 4, 4, 10, 10, 10, 7, 8, 5, 4, 3, 9, 7, 7, 7, 6, 11, 10, 9, 9, 9, 3, 3, 3, 6, 6, 6, 11, 11, 11, 18, 18, 18, 8, 8, 8, 6, 7, 6, 5, 6, 6, 11, 9, 11, 6, 7, 6, 8, 8, 6, 3, 6, 3, 8, 9, 6, 8, 3, 9, 6, 7, 8, 7, 6, 8, 11, 9, 11, 7, 8, 3, 6, 11, 6, 8, 11, 9, 7, 6, 8, 9, 7, 9, 11, 11, 5, 6, 9, 11, 6, 9, 6, 7, 3, 6, 11, 9, 8, 5, 7, 11, 3, 6, 8, 3, 8, 7, 8, 11, 8, 7, 6, 7, 8, 3, 6, 9, 6, 9, 7, 3, 5, 6, 9, 6, 9, 11, 6, 9, 6, 7, 6, 3, 8, 5, 3, 6, 3, 7, 6, 11, 7, 3, 11, 5, 8, 6, 3, 7, 11, 8, 3, 7, 11, 3, 9, 3, 6, 8, 3, 6, 7, 8, 3, 8, 11, 8, 6],
        [17, 8, 8, 8, 10, 4, 4, 4, 4, 5, 7, 9, 9, 9, 16, 6, 11, 11, 11, 9, 11, 8, 3, 10, 10, 10, 3, 3, 3, 6, 6, 6, 8, 9, 4, 6, 4, 9, 8, 9, 4, 9, 6, 9, 6, 4, 9, 8, 4, 9, 4, 11, 9, 8, 4, 9, 8, 3, 9, 8, 9, 6, 10, 3, 5, 11, 9, 4, 10, 8, 9, 5, 10, 5, 3, 8, 9, 8, 11, 6, 11, 4, 9, 8, 4, 8, 6, 8, 10, 9, 5, 8, 11, 9, 10, 4, 6, 8, 10, 4, 6, 9, 3, 8, 6, 10, 6, 9, 11, 5, 10, 9, 6, 11, 6, 9, 11, 8, 16, 10, 6, 3, 11, 9, 4, 9, 4, 6, 10, 16, 9, 3, 9, 4, 9, 8, 10, 6, 10, 3, 6, 5, 9, 11, 6, 8, 4, 3, 5, 4, 9, 6, 10, 4, 11, 8, 6, 5, 6, 10, 6, 9, 8, 3, 6, 11, 9, 5, 6, 16, 6, 10, 6, 10, 8, 11, 4, 16, 11, 3, 11, 4, 9, 4, 5, 9, 10, 4, 6, 8, 5, 6, 3, 6, 4],
        [4, 6, 6, 6, 9, 5, 5, 5, 7, 5, 8, 11, 10, 3, 9, 9, 9, 6, 4, 4, 4, 11, 11, 11, 8, 11, 5, 11, 9, 5, 11, 8, 6, 10, 6, 11, 9, 11, 9, 5, 8, 7, 10, 11, 9, 5, 10],
        [4, 4, 4, 9, 5, 3, 6, 11, 3, 3, 3, 10, 6, 6, 6, 7, 11, 11, 11, 8, 4, 5, 5, 5, 8, 8, 8, 10, 10, 10, 8, 11, 8, 10, 6, 8, 9, 3, 5, 7, 8, 5, 8, 6, 5, 3, 10, 6, 8, 10, 3, 5, 8, 5, 8, 11, 5, 3, 5, 11, 8, 10, 8, 3, 8, 5, 10, 8, 3, 11, 10, 8, 3, 8, 3, 8, 6, 3, 5, 10, 7, 6, 11, 3, 8, 5, 3, 5, 11, 3, 10, 8, 6, 8, 5, 8, 11, 8, 6, 10, 3, 7, 10, 3, 10, 3, 10, 11, 3, 8, 5, 8],
    ],
    // 6   
    [
        [8, 8, 8, 3, 8, 7, 5, 4, 9, 9, 9, 6, 10, 5, 5, 5, 9, 6, 6, 6, 10, 10, 10, 4, 4, 4, 3, 3, 3, 4, 5, 3, 5, 9, 6, 3, 10, 6, 10, 6, 10, 5, 6, 9, 10, 9, 5, 3, 10, 3, 4, 3, 10, 9, 4, 9, 6, 4, 6, 10, 6, 5, 9, 10, 4, 6, 10, 4, 3, 5, 9, 5, 3, 6, 5, 4, 3, 9, 4, 9, 4, 5, 9, 5, 4, 6, 9, 4, 10, 4, 6, 3, 5, 3, 6, 10, 6, 3, 4, 3, 6, 3, 4, 3, 6, 3, 10, 3, 10, 9, 10, 4, 3, 6, 9, 10, 3, 4, 5, 3, 5, 4, 9, 6, 4, 10, 9, 5, 3, 4, 3],
        [8, 4, 4, 4, 4, 9, 9, 9, 6, 7, 7, 7, 5, 10, 7, 3, 9, 8, 8, 8, 6, 6, 6, 10, 10, 10, 3, 3, 3, 10, 3, 7, 10, 7, 3, 4, 9, 4, 10, 7, 4, 10, 9, 10, 3, 9, 4, 3, 6, 7, 3, 4, 10, 3, 7, 6, 3, 9, 7, 3, 6, 3, 7, 6, 3, 4, 10, 3, 10, 3, 7, 6, 9, 3, 9, 7, 9, 3, 4, 7, 9, 3, 10, 9, 10, 6, 7, 6, 10, 7, 6, 9, 6, 9, 10, 4, 3, 10, 7, 10, 6, 9, 7, 10, 4, 9, 7, 6, 3, 9, 10, 4, 9, 3, 6, 10, 4, 3, 9, 7, 4, 7, 10, 3, 6, 9, 3, 7, 4, 7, 9, 4, 9, 3, 7, 4, 6, 4, 3, 7, 10, 3, 4, 3, 10, 7, 6, 3, 4, 6, 10, 3, 10, 6, 4, 3, 4, 7, 3, 4, 3, 9, 10, 3, 7, 9, 7, 9, 3, 6, 7, 4, 3, 9, 7, 6, 9, 3, 9, 3, 4, 6, 9, 4, 3, 7, 6, 9, 7, 9, 3, 4, 7, 3, 10, 4, 7, 3, 10, 6],
        [6, 16, 3, 4, 8, 9, 10, 10, 10, 7, 17, 5, 10, 6, 6, 6, 4, 4, 4, 9, 9, 9, 3, 3, 3, 8, 8, 8, 4, 9, 3, 8, 3, 8, 17, 8, 4, 9, 8, 5, 3, 9, 8, 3, 5, 4, 3, 5, 4, 10, 3, 5, 3, 9, 3, 4, 8, 4, 9, 10, 8, 3, 4, 8, 5, 7, 4, 10, 5, 3, 9, 3, 8, 4, 3, 9, 10, 3, 10, 3, 4, 5, 7, 10, 4, 9, 8, 3, 10, 8, 9, 3, 8, 7, 9, 3, 10, 8, 3, 9, 5, 4, 10, 16, 3, 4, 10, 4, 3, 8],
        [8, 3, 3, 3, 3, 9, 7, 4, 6, 8, 8, 8, 5, 10, 7, 7, 7, 5, 5, 5, 9, 9, 9, 10, 10, 10, 4, 4, 4, 6, 6, 6, 18, 18, 18, 5, 6, 4, 10, 9, 10, 6, 10, 3, 7, 9, 5, 7, 3, 6, 4, 9, 4, 6, 6, 3, 9, 4, 3, 10, 4, 10, 3, 9, 5, 6, 9, 3, 7, 10, 3, 7, 10, 6, 4, 10, 6, 4, 9, 3, 9, 3, 6, 9, 6, 10, 5, 9, 6, 5, 9, 6, 5, 6, 3, 10, 9, 6, 4, 3, 9, 3, 10, 9, 10, 5, 7, 5, 3, 6, 6, 7, 9, 4, 6, 7, 6, 3, 6, 7, 5, 6, 4, 10, 3, 5],
        [8, 8, 8, 9, 4, 5, 3, 3, 3, 6, 7, 7, 7, 7, 8, 3, 10, 10, 10, 10, 4, 4, 4, 6, 6, 6, 5, 5, 5, 3, 7, 10, 5, 9, 5, 4, 3, 5, 3, 10, 7, 9, 3, 10, 4, 7, 10, 5, 3, 7, 10, 4, 9, 3, 6, 7, 10, 6, 5, 10, 5, 10, 3, 9, 4, 10, 5, 3, 4, 6, 4, 9, 5, 10, 9, 10, 9, 6, 4, 9, 10, 3, 7, 10, 3, 5, 3, 4, 10, 3, 5, 3, 6, 7, 4, 3, 6, 5, 9, 5, 3, 10, 5, 6, 3, 9, 4, 10, 3, 5, 6, 5, 10, 7, 3, 7, 10, 9, 7],
    ],
    // 7   
    [
        [3, 5, 5, 5, 9, 4, 4, 4, 8, 3, 3, 3, 4, 7, 6, 6, 6, 6, 9, 9, 9, 5, 7, 7, 7, 5, 8, 5, 8, 7, 6, 5, 8, 6, 9, 8, 5, 6, 9, 7, 4, 6, 7, 8, 7, 5, 7, 9, 7, 5, 7, 5, 8, 4, 9, 5, 9, 5, 8, 6, 8, 9, 5, 7, 6, 5, 4, 9, 5, 9, 5, 6, 4, 9, 4, 5, 7, 9, 6, 5, 9, 8, 9, 5, 7, 5, 8, 5, 9, 7, 5, 4, 6, 9, 7, 6, 8, 5, 9, 5, 7, 5, 7, 9, 5, 9, 7, 5, 9, 5, 7, 8, 9, 5, 7, 9, 6, 4, 5, 7, 6, 9, 5, 9, 8, 9, 4, 5, 4, 7, 5, 6, 5, 7, 5, 9, 6, 7, 6, 7, 6, 9, 7, 6, 8, 6, 9, 5, 9, 4, 5, 6, 5, 7, 5, 4, 5, 9, 7, 5, 9, 8, 5, 4, 5, 9, 7, 9, 6, 5, 8, 6, 5],
        [5, 3, 7, 7, 7, 6, 8, 9, 9, 9, 4, 7, 8, 8, 8, 9, 18, 18, 18, 18, 6, 6, 6, 3, 3, 3, 4, 4, 4, 7, 8, 4, 3, 4, 8, 7, 6, 6, 4, 8, 3, 8, 3, 6, 4, 6, 4, 7, 6, 3, 9, 6, 3, 8, 7, 8, 4, 8, 7, 9, 6, 3, 6, 8, 4, 8, 6, 8, 6, 6, 9, 8, 7, 3, 7, 8, 3, 6, 8, 6, 7, 9, 3, 7, 3, 4, 6, 3, 8, 6, 4, 3, 8, 3, 4, 3, 6, 4, 9, 7, 4, 8, 9, 3, 6, 8, 7, 3, 8, 6, 4, 6, 3, 9, 8, 4, 6, 9, 8, 6, 8, 3, 9, 6, 3, 7, 8, 6, 4, 6, 8, 9, 4, 6, 4, 6, 8, 8, 7, 8, 6, 8, 9, 3, 7, 8, 6, 4, 8, 4, 3, 6, 3, 9, 6, 3, 4, 8, 6, 7, 6, 4, 3, 8, 4, 7, 6, 7, 3, 9, 3, 7, 4, 6, 8, 6, 7, 9, 4, 6, 7, 9, 8, 4, 3, 6],
        [4, 8, 8, 8, 3, 9, 5, 8, 6, 7, 9, 9, 9, 16, 4, 4, 4, 17, 6, 6, 6, 7, 7, 7, 3, 3, 3, 7, 9, 7, 16, 7, 9, 5, 17, 6, 5, 8, 6, 7, 17, 9, 5, 7, 9, 7, 9, 5, 9, 17, 8, 6, 7, 5, 9, 3, 17, 9, 4, 9, 16, 3, 9, 5, 6, 9, 5, 3, 17, 7, 4, 9, 3, 9, 7, 3, 5, 9, 16, 9, 8, 6, 9, 7, 6, 3, 17, 3, 9, 7, 9, 6, 3, 6, 9, 6, 7, 17, 7, 9, 8, 9, 7, 9, 7, 8, 4, 16, 9, 3, 9, 3, 9, 16, 9, 5, 9, 6, 8, 6, 16, 9, 6, 7, 9, 7, 17, 6, 9, 7, 9, 8, 6, 5, 6, 5, 16, 3, 9, 8, 3, 16, 3, 8, 7, 9, 16, 3, 9, 7, 9, 3, 7],
        [8, 8, 8, 8, 5, 9, 3, 3, 3, 3, 6, 5, 5, 5, 4, 7, 4, 4, 4, 6, 6, 6, 9, 9, 9, 4, 5, 4, 9, 5, 6, 9, 6, 9, 3],
        [3, 5, 7, 6, 4, 4, 4, 9, 8, 4, 6, 6, 6, 9, 9, 9, 5, 5, 5, 3, 3, 3, 8, 8, 8, 4, 5, 6, 9, 8, 6, 9, 5, 6, 9, 6, 9, 4, 5, 8, 9, 6, 9, 4, 6, 8, 4, 8, 5, 9, 4, 6, 8, 5, 9, 8, 6, 4, 8, 5, 8, 4, 5, 4, 6, 9, 4, 6, 4, 6, 9, 4],
    ],
    // 8   
    [
        [7, 8, 8, 8, 8, 4, 3, 4, 4, 4, 6, 6, 6, 6, 5, 3, 3, 3, 5, 5, 5, 3, 8, 5, 3, 8, 4, 3, 4, 3, 4, 8, 4, 3, 4, 8, 5, 4, 3, 8, 6, 3, 4, 3, 5, 8, 4, 3, 8, 6, 8, 4, 3, 4, 3, 8, 6, 4, 3, 8, 3, 4, 3, 8, 3, 8, 4, 3, 8, 4, 8, 3, 8, 4, 3, 6, 3, 8, 3, 5, 4, 3, 4, 8, 3, 4, 3, 6, 5, 4, 8, 5, 4, 8, 4, 6, 4, 3, 4, 5, 4, 6, 8, 3, 6, 3, 8, 3, 8, 4, 3, 4, 8, 4, 3, 4, 6, 4, 3, 4, 8, 4, 3, 8, 3, 4, 3, 5, 3, 8, 4, 3, 4, 8, 4, 3, 8, 3, 8, 6, 3, 4, 3, 6, 5, 4, 8, 3, 8, 6, 4, 6, 4, 3, 8, 4, 3, 8, 3, 6, 3, 6, 3, 4, 8, 4, 8, 3, 4, 8, 6, 4, 5, 4, 8, 6, 4, 3, 4],
        [3, 3, 3, 8, 6, 6, 6, 7, 6, 5, 3, 4, 4, 4, 4, 8, 8, 8, 4, 6, 4, 8, 6, 4, 6, 4, 6, 4, 6, 8, 6, 4, 8, 6, 8, 5, 8, 6, 5, 4, 6, 4, 6, 4, 6, 4, 6, 4, 6, 8, 6, 4, 6, 4, 6, 4, 5, 4, 5, 6, 5, 8, 6, 4, 6, 8, 4, 8, 4, 6, 5, 6, 4, 6, 4, 6, 4, 6, 4, 6, 8, 4, 5, 8, 5, 4, 6, 4, 6, 4, 6],
        [4, 4, 4, 4, 3, 3, 3, 8, 5, 5, 5, 5, 3, 6, 6, 6, 7, 8, 8, 8, 6, 17, 7, 7, 7, 16, 8, 3, 7, 6, 16, 3, 7, 16, 7, 8, 5, 6, 5, 6, 5, 8, 6, 8, 3, 8, 16, 4, 8, 3, 6, 8, 5, 3, 6, 5, 3, 8, 3, 6, 16, 3, 8, 7, 8, 5, 8, 3, 5, 3, 6, 7, 8, 5, 3, 16, 3, 17, 8, 6, 8, 7, 16, 6, 3, 8, 7, 8, 3, 7, 6, 16, 8, 3, 8, 7, 6, 7, 8, 17, 8, 6, 3, 7, 5, 6, 7, 6, 5, 17, 3, 6, 5, 8, 7, 3, 7, 6, 3, 8, 3, 8, 6, 3, 6, 8, 6, 3, 7, 6, 7, 3, 7, 5, 8, 6, 8, 3, 17, 3, 7, 6, 16, 6, 4, 7, 3, 7, 8, 3, 16, 7, 6, 8, 16, 8, 3, 16, 8],
        [8, 5, 3, 3, 3, 3, 6, 7, 4, 5, 5, 5, 7, 7, 7, 8, 8, 8, 4, 4, 4, 6, 6, 6, 18, 18, 18, 3, 7, 5, 6, 4, 6, 4, 4, 5, 6, 4, 5, 6, 3, 5, 7, 5, 3, 5, 7, 6, 7, 5, 6, 5, 6, 3, 7],
        [7, 7, 7, 8, 5, 5, 5, 7, 5, 4, 3, 8, 8, 8, 6, 6, 6, 6, 4, 4, 4, 3, 3, 3, 6, 8, 5, 6, 3, 5, 6, 5, 4, 5, 4, 6, 3, 6, 3, 8, 3, 4, 6, 4, 6, 8, 6, 5, 8, 3, 5, 6, 3, 8, 3, 5, 4, 6, 3, 6, 4, 6, 3, 6, 5, 6, 5, 6, 5, 3, 6, 8, 3, 8, 6],
    ],
    //9   
    [
        [7, 7, 7, 7, 6, 4, 4, 4, 3, 6, 6, 6, 5, 4, 3, 3, 3, 5, 5, 5, 6, 5, 3, 4, 5, 4, 5, 6, 5, 3, 6, 4, 5, 4, 5, 3, 4, 6, 4, 6, 4, 6, 4, 6, 3, 5, 3, 6, 3, 5, 3, 6, 4, 5, 6, 4],
        [7, 5, 6, 5, 5, 5, 3, 4, 6, 6, 6, 18, 18, 18, 3, 3, 3, 4, 4, 4, 7, 7, 7, 4, 6, 4, 3, 5, 4, 4, 5, 4, 6, 5, 4, 3, 6, 3, 6, 4, 3, 6, 4, 3, 5, 4, 3, 4, 5, 6, 4, 3, 4, 6, 3, 4, 5, 6, 4, 6, 3, 5, 4, 3, 4, 6, 3, 5, 6, 5, 4, 6, 4, 3, 6, 4, 4, 6, 3, 4, 5, 3, 6, 3, 4],
        [5, 16, 7, 7, 7, 17, 3, 7, 6, 6, 6, 6, 4, 3, 3, 3, 5, 5, 5, 4, 4, 4, 6, 3, 17, 7, 3, 7, 3, 4, 3, 7, 6, 16, 6, 7, 4, 7, 4, 3, 6, 4, 6, 7, 3, 4, 6, 7, 17, 7, 4, 3, 4, 7, 4, 7, 4, 6, 3, 7, 6, 4, 7, 16, 3, 4, 3, 17, 3],
        [4, 5, 7, 3, 6, 7, 7, 7, 6, 6, 6, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 7, 6, 5, 6, 7, 5, 6, 5, 6, 3, 7, 6, 5, 7, 5, 7, 6, 5, 3, 6, 3, 5, 3, 6, 3, 7, 6, 3, 7, 6, 3, 6, 3, 7, 3, 7, 5, 7, 3, 5, 7, 6, 7, 6, 3, 7, 3, 5, 7, 5, 6, 5, 6, 7, 6, 7, 6, 3, 7, 3, 7, 6, 7, 6, 3, 6, 5, 7, 3, 7, 5, 3, 7, 3, 7, 6, 7, 5, 6, 3, 5, 7, 3, 6, 3, 6, 3, 6, 5, 7, 6, 7, 6, 3, 6, 3, 7, 3, 7, 6, 3, 5, 7, 5, 7, 6, 7, 5, 3, 6, 7, 3, 5, 3, 7, 3, 7, 3, 5, 3, 6, 7, 3, 5],
        [6, 6, 6, 3, 4, 4, 4, 4, 6, 7, 5, 5, 5, 5, 3, 3, 3, 7, 7, 7, 5, 3, 5, 3, 5],
    ],
    // 10   
    [
        [4, 5, 3, 6, 3, 3, 3, 4, 4, 4, 6, 6, 6, 5, 5, 5, 6, 5, 6, 3, 6, 3, 5, 3, 6, 5, 3, 5, 6, 3, 6, 3, 5, 6, 3, 6, 3, 5, 6, 3, 5, 3, 6, 3, 5, 3, 5, 3, 6, 5, 6, 3, 6, 5, 6, 5, 3, 6, 3, 6, 3, 6, 3, 6, 5, 3, 6, 5, 6, 3, 5, 3, 6, 3, 6, 3],
        [4, 4, 4, 4, 5, 5, 5, 5, 6, 3, 3, 3, 3, 6, 6, 6, 3, 5, 3, 5, 6, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 6, 5, 3, 5, 3, 6, 5, 6, 5, 3, 5, 3, 5, 3, 6, 5, 6, 3, 5, 6, 5, 3, 6, 3, 6, 3, 6, 3, 6, 5, 6, 5, 3, 5, 3, 5, 6, 5, 3, 6, 3, 5, 6, 3, 5, 3, 6, 5, 3, 5, 6, 3, 5, 6, 5, 6, 5, 3, 5, 6, 5, 3, 6, 5, 3, 6, 3, 6, 3, 6, 3, 5, 3, 5, 6, 3, 5, 6, 3, 5, 6, 5, 3, 5, 6, 3, 5, 3, 6, 3, 6, 3, 6, 5, 3, 5, 3, 5, 6, 5, 6, 3, 6, 3, 6, 5, 3, 5, 3, 6, 3, 5, 6, 5, 3, 5, 3, 5, 6, 5, 3, 6, 3, 5, 3, 6, 3, 5, 3, 5, 3, 5],
        [5, 16, 4, 6, 6, 6, 3, 4, 4, 4, 6, 4, 5, 5, 5, 3, 3, 3, 16, 6, 4, 6, 3, 6, 3, 4, 6, 3, 6, 3, 4, 3, 4, 17, 3, 6, 3, 6, 4, 6, 17, 4, 6, 3, 4, 3, 6, 4, 6, 4, 16, 6, 3, 6, 4, 3, 4, 6, 3, 6, 3, 6, 3, 4, 3, 4, 3, 4, 3, 4, 6, 4, 17, 4, 3, 4, 6, 4, 3, 17, 4, 3, 6, 3, 4, 6, 3, 4, 3, 17, 4, 3, 6, 17, 4, 3, 6, 17, 4, 3, 4, 6, 3, 4, 17, 6, 3, 6, 3, 6, 17, 6, 3, 6, 4, 3, 17, 6, 4, 16, 6, 4, 6, 17, 6, 3, 6, 4, 17, 3, 6, 4, 3, 16, 4, 6, 4, 6, 3, 6],
        [6, 4, 4, 4, 5, 5, 5, 5, 3, 4, 6, 6, 6, 3, 3, 3, 18, 18, 18, 5, 4, 5, 3, 4, 3, 5, 3, 5, 3, 4, 3, 4, 3, 5, 3, 3, 5, 3, 5, 5, 3, 4, 5, 4, 5, 3, 3, 4, 3, 3, 3, 3, 4, 3, 5, 3, 5, 5, 3, 5, 3, 5, 3, 4, 3, 4, 3, 5, 5, 3, 5, 5, 3, 5, 3, 5, 3, 3, 4],
        [3, 4, 6, 6, 6, 6, 5, 5, 5, 5, 3, 3, 3, 4, 4, 4, 6, 4, 6, 4, 5, 6, 4, 6, 4, 6, 4, 5, 4, 6, 5, 6, 4, 5, 4, 6, 4, 6, 4, 5, 6, 5, 4, 6, 4, 6, 5, 6, 4, 6, 4, 6, 4, 6, 4, 5, 4, 6, 5, 6, 4, 6, 4, 5, 6, 4, 5, 4, 5, 6, 4, 6, 4, 5, 6, 4, 6, 4, 6, 5, 6, 5, 4, 5, 6, 4, 5, 4, 6, 5, 4, 6, 4, 6, 4, 6, 4, 5, 6, 5, 6, 4, 6, 4, 5, 4, 6, 5, 4, 5, 4, 6, 4, 5, 6, 5, 6, 5, 4, 6, 5, 6, 4, 6, 5, 4, 5, 4, 6, 5, 4, 6, 4, 5, 4, 6, 5, 6, 4, 5, 6, 5, 4, 6, 4, 6, 4, 5, 6, 4, 6, 5, 6, 5, 6, 5, 6, 5, 6, 4, 5, 4, 6, 5, 6, 4, 5, 6, 5, 6, 5, 6, 4, 6, 5, 6, 4, 5, 4, 5, 4, 6, 5, 6, 4, 6, 5, 6, 4, 6, 4, 5, 4, 6, 4],
    ],
    // 11   
    [
        [3, 5, 4, 3, 3, 3, 4, 4, 4, 5, 5, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5],
        [5, 5, 5, 3, 3, 3, 5, 3, 18, 18, 18, 4, 4, 4, 4, 3, 4, 3, 4, 3, 4, 4, 3, 4, 4, 3, 4, 3, 4, 3, 4, 3, 3, 4, 3, 4, 3, 4, 3, 4, 3, 3],
        [3, 5, 5, 5, 16, 4, 4, 4, 5, 3, 3, 3, 17, 4, 5, 17, 5, 3, 4, 5, 4, 5, 4, 5, 4, 17, 4, 5, 17, 5, 4, 5, 17, 4, 3, 4, 5, 4, 16, 5, 4, 5, 4, 17, 4, 5, 4, 5, 4, 5, 17, 5, 4, 16, 5, 4, 17, 4, 5, 4, 17, 4, 5, 17, 4, 5, 17, 4, 5, 4, 16, 4, 5, 4, 17, 4, 5, 17, 4, 3, 5, 4, 5, 4, 5, 4, 17, 4, 5, 4, 5, 4, 5, 4, 5, 17, 5, 4],
        [18, 18, 18, 18, 5, 3, 4, 4, 4, 4, 3, 3, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 5, 3, 4],
        [5, 5, 5, 5, 3, 4, 4, 4, 4, 3, 3, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3],
    ],
    // 12   
    [
        [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4],
        [18, 18, 18, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3, 4, 3, 4, 3, 3, 4, 3, 3, 3, 3, 4, 3, 3, 3],
        [3, 3, 3, 3, 3, 16, 3, 3, 3, 3, 16, 3, 3, 16, 3, 3, 17, 3, 3, 3, 16, 3, 3, 4, 3, 3, 4, 4, 3, 3, 17, 3, 3, 4, 4, 4, 3, 3, 3, 3, 16, 3, 3, 16, 3, 3, 17, 3],
        [18, 18, 18, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 4, 4, 3, 3, 3, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3],
        [4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4, 3, 3, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4],
    ],
];
var freeReels = [
    // 1   
    [
        [
            [2, 2, 2, 2, 2],
            [9, 13, 9, 15, 15, 6, 14, 14, 13, 15, 6, 7, 14, 15, 15, 15, 7, 14, 12, 3, 11, 10, 12, 8, 15, 10, 4, 5, 5, 8, 15],
            [15, 13, 5, 11, 3, 15, 9, 13, 9, 15, 15, 15, 15, 15, 14, 11, 14, 8, 14, 11, 15, 14, 7, 11, 13, 13, 13, 15, 13, 15, 4, 10, 13, 10, 15, 15, 6, 10, 14, 14, 14, 9, 3, 12, 6, 7, 12, 10, 14, 11, 15, 3, 12, 12, 12, 15, 15, 11, 5, 15, 15, 13, 13, 12, 14, 7, 15, 14],
            [8, 5, 3, 14, 15, 11, 9, 15, 15, 15, 13, 10, 12, 10, 7, 10, 5, 3, 6, 6, 6, 15, 15, 14, 15, 11, 8, 10, 12, 15, 7, 7, 7, 8, 12, 15, 8, 9, 15, 9, 14, 8, 8, 8, 10, 6, 5, 13, 4, 6, 7, 15, 15, 13, 13, 13, 13, 10, 4, 12, 9, 14, 12, 15, 12, 12, 12, 8, 13, 15, 4, 7, 15, 6, 15, 13, 15],
            [2, 2, 2, 2, 2],
        ],
        [
            [15, 5, 14, 13, 15, 13, 3, 14, 10, 14, 14, 15, 6, 14, 11, 4, 13, 9, 9, 12, 13, 14, 15, 12, 4, 15, 15, 15, 15, 15, 10, 7, 15, 8, 7, 15, 15, 12, 7, 12, 15, 8, 14, 11, 8, 5, 15, 5, 6, 9, 14, 6, 15, 8, 10],
            [2, 2, 2, 2, 2],
            [15, 13, 13, 14, 15, 11, 13, 14, 10, 15, 15, 15, 15, 3, 6, 10, 8, 12, 9, 14, 3, 9, 10, 5, 13, 13, 13, 15, 7, 13, 4, 15, 11, 15, 13, 12, 11, 13, 14, 14, 14, 7, 15, 6, 5, 10, 12, 15, 14, 9, 11, 15, 12, 12, 12, 3, 14, 15, 14, 7, 15, 11, 15, 15, 11, 15, 14, 15],
            [2, 2, 2, 2, 2],
            [13, 15, 3, 15, 8, 12, 15, 15, 15, 15, 15, 3, 11, 12, 14, 10, 7, 10, 6, 6, 6, 10, 15, 15, 13, 15, 10, 15, 12, 8, 7, 7, 7, 7, 13, 4, 6, 7, 15, 6, 11, 8, 8, 8, 8, 13, 14, 12, 12, 15, 15, 6, 10, 13, 13, 13, 15, 14, 9, 9, 8, 5, 5, 9, 12, 12, 12, 8, 9, 10, 5, 4, 13, 15, 14, 4, 15],
        ],
        [
            [4, 13, 7, 15, 15, 15, 9, 11, 8, 5, 14, 15, 6, 12, 10, 3, 6, 12, 7, 12, 15, 11, 3, 11, 15, 7, 9, 13, 15, 7, 9, 15, 6, 3, 15, 3, 7, 12],
            [13, 6, 3, 12, 12, 12, 10, 15, 4, 9, 12, 13, 13, 13, 5, 7, 7, 7, 7, 8, 15, 15, 15, 11, 6, 6, 6, 14, 8, 8, 8, 6, 12, 6, 7, 11, 6, 7, 11, 5, 12, 5, 8, 12, 8, 12, 8, 11, 12, 11, 12, 7, 8],
            [2, 2, 2, 2],
            [15, 15, 15, 12, 10, 6, 9, 11, 15, 7, 4, 5, 13, 3, 8, 14, 6, 13, 3, 4, 6, 10, 14, 6, 11, 7, 5, 3, 8, 6, 8, 6, 10, 8, 10, 4, 14, 8, 14, 8, 6, 14, 13, 6, 13, 6, 8, 10, 3, 6, 4, 8, 6, 8, 6, 3, 6],
            [6, 6, 6, 9, 4, 14, 12, 5, 8, 7, 7, 7, 6, 13, 3, 11, 15, 7, 13, 13, 13, 10, 12, 12, 12, 8, 8, 8, 15, 15, 15, 13, 10, 7, 15, 14, 8, 12, 15, 8, 9, 12, 7, 9, 10, 7, 9, 7, 9, 12, 7, 12, 9, 7, 15, 8, 5, 13],
        ],
    ],
    // 2   
    [
        [
            [2, 2, 2, 2],
            [14, 14, 14, 3, 10, 10, 10, 10, 6, 5, 9, 14, 13, 4, 8, 12, 7, 11, 7, 6, 11, 9, 11, 10, 7, 10, 7, 5, 10, 6, 10, 11, 5, 11, 7, 10, 6, 10, 11, 4, 7, 11, 10, 11, 10, 6, 7, 10, 8, 6, 11, 6, 3, 11, 5],
            [8, 12, 9, 9, 9, 9, 14, 14, 14, 11, 6, 7, 5, 4, 13, 10, 14, 3, 11, 11, 11, 14, 9, 5, 14, 11, 9, 3, 9, 11, 4, 11, 7, 11, 14, 11, 14, 9, 7],
            [6, 6, 6, 6, 8, 5, 5, 5, 5, 12, 12, 12, 13, 8, 8, 8, 11, 13, 13, 13, 14, 3, 10, 14, 14, 14, 7, 12, 7, 7, 7, 4, 9, 4, 4, 4, 13, 4, 7, 4, 7, 14, 5],
            [2, 2, 2, 2],
        ],
        [
            [8, 10, 10, 10, 13, 14, 14, 14, 12, 5, 14, 11, 4, 3, 6, 9, 10, 7, 14, 11, 14, 10, 9, 10, 6, 10, 5, 14, 9, 10, 5, 4, 14, 10, 14, 4, 14, 10, 9, 10, 9, 4, 14, 4, 10, 11],
            [2, 2, 2, 2],
            [8, 11, 11, 11, 4, 11, 9, 6, 5, 14, 14, 14, 3, 7, 12, 14, 9, 9, 9, 10, 13, 14, 4, 9, 12, 9, 5, 6, 9, 3, 5, 9, 11, 5, 9, 5, 9, 12, 9],
            [2, 2, 2, 2],
            [13, 5, 9, 6, 6, 6, 8, 10, 4, 6, 8, 8, 8, 3, 7, 12, 4, 4, 4, 14, 7, 7, 7, 11, 14, 14, 14, 13, 13, 13, 5, 5, 5, 12, 12, 12, 4, 14, 5, 6, 12, 5, 12, 7, 5, 14, 7],
        ],
        [
            [10, 14, 14, 14, 7, 10, 10, 10, 11, 5, 4, 13, 9, 12, 8, 6, 14, 3, 5, 7, 11, 12, 6, 5, 6, 5, 7, 14, 8, 7, 14, 5, 14, 6, 3, 6, 5, 7, 3, 7],
            [12, 3, 11, 12, 12, 12, 8, 9, 4, 4, 4, 4, 14, 14, 14, 14, 6, 13, 7, 7, 7, 7, 10, 5, 5, 5, 5, 6, 6, 6, 13, 13, 13, 8, 8, 8, 6, 13, 6, 7, 6, 9, 6, 5, 4, 7, 8, 4, 8, 6, 13, 7, 14, 4],
            [2, 2, 2, 2],
            [10, 10, 10, 5, 14, 14, 14, 13, 8, 10, 11, 9, 3, 4, 12, 7, 6, 14, 7, 14, 4, 7, 12, 14, 4, 14, 5, 4, 12, 14, 13, 4, 14, 3, 4, 6, 5, 6, 3, 7, 14, 8, 3, 12, 3],
            [13, 13, 13, 11, 8, 9, 6, 6, 6, 6, 12, 4, 13, 7, 14, 5, 5, 5, 5, 10, 3, 7, 7, 7, 14, 14, 14, 8, 8, 8, 12, 12, 12, 4, 4, 4, 8, 3, 7, 12, 8, 5, 4, 5, 9, 6, 4, 14, 6],
        ],
    ],
    // 3   
    [
        [
            [2, 2, 2, 2],
            [11, 8, 10, 7, 5, 9, 13, 6, 3, 4, 12, 12, 12, 12, 13, 13, 13, 4, 12, 10, 12, 3, 4, 13, 4, 12, 13, 12, 10, 8, 13, 12, 13, 9, 12, 9, 13, 4, 12, 13, 12, 8, 5, 4, 12, 13, 8],
            [9, 13, 13, 13, 8, 6, 5, 7, 4, 11, 13, 11, 11, 11, 10, 12, 3, 12, 12, 12, 9, 9, 9],
            [8, 8, 8, 9, 5, 7, 7, 7, 11, 7, 4, 12, 12, 12, 12, 10, 5, 5, 5, 6, 3, 13, 13, 13, 13, 8, 4, 4, 4, 6, 6, 6, 7, 5, 10, 4, 5, 4, 5, 13, 6, 7, 4, 12, 7, 12, 5, 13, 6, 10, 4, 6, 4, 12, 5, 6, 4],
            [2, 2, 2, 2],
        ],
        [
            [12, 12, 12, 11, 3, 4, 7, 13, 13, 13, 10, 9, 13, 8, 6, 5, 12],
            [2, 2, 2, 2],
            [11, 11, 11, 6, 9, 9, 9, 12, 3, 13, 13, 13, 5, 4, 12, 12, 12, 7, 9, 13, 11, 10, 8, 13, 3, 12, 13, 9, 13, 9, 13],
            [2, 2, 2, 2],
            [13, 5, 5, 5, 10, 13, 13, 13, 9, 12, 11, 4, 7, 6, 6, 6, 6, 3, 5, 8, 4, 4, 4, 8, 8, 8, 7, 7, 7, 12, 12, 12, 8, 4, 9, 8, 7, 8, 10, 8, 4, 5, 12, 8, 11, 12, 11, 4, 8],
        ],
        [
            [12, 13, 13, 13, 9, 5, 12, 12, 12, 10, 13, 8, 4, 6, 3, 11, 7, 5, 13, 5, 10, 9, 3, 6, 13, 3, 9, 11, 13, 8, 3, 8, 5, 8, 5, 13],
            [4, 4, 4, 12, 5, 5, 5, 5, 3, 12, 12, 12, 10, 7, 7, 7, 7, 13, 4, 8, 9, 6, 11, 6, 6, 6, 8, 8, 8, 13, 13, 13, 5, 12, 7, 5, 7, 6, 12, 7, 8, 12, 7, 5, 10, 13, 12],
            [2, 2, 2, 2],
            [12, 13, 13, 13, 4, 5, 8, 12, 12, 12, 11, 6, 3, 7, 9, 13, 10, 13, 7, 13, 3, 6, 7, 13, 6, 7, 5, 13, 9, 4, 7, 6, 8, 13, 7, 6, 8, 11, 13, 4, 9, 7, 11, 10, 9, 10, 6, 7, 13, 7, 9, 7, 6, 7, 8, 7],
            [12, 12, 12, 8, 12, 7, 7, 7, 6, 13, 8, 8, 8, 9, 5, 4, 3, 11, 7, 5, 5, 5, 10, 4, 4, 4, 13, 13, 13, 6, 6, 6, 4, 6, 8, 13, 6, 8, 7, 8, 7, 8, 4, 13, 5, 6, 9, 6],
        ],
    ],
    // 4   
    [
        [
            [2, 2, 2, 2],
            [5, 12, 12, 12, 8, 8, 8, 8, 6, 10, 11, 12, 3, 7, 9, 4, 8, 12, 8, 12, 8, 11, 8, 12, 4, 12, 8, 10, 3, 8, 12, 8, 3, 12, 11, 3, 10, 3, 10, 12, 4, 3, 6, 3, 8, 11, 3, 4, 8, 10, 8],
            [12, 12, 12, 8, 11, 11, 11, 12, 11, 10, 7, 4, 9, 9, 9, 6, 3, 9, 5, 11, 3, 11, 7, 11, 7, 11, 9, 7, 11, 4, 11, 4, 3, 9, 11, 7, 11, 9, 7, 9, 11, 4, 11, 7, 11, 5, 9, 4, 7, 11, 7, 9, 11, 3, 11, 5],
            [9, 6, 6, 6, 11, 7, 7, 7, 10, 8, 4, 10, 10, 10, 7, 4, 4, 4, 5, 12, 6, 3, 8, 8, 8, 5, 5, 5, 6, 7, 8],
            [2, 2, 2, 2],
        ],
        [
            [4, 12, 12, 12, 8, 12, 8, 8, 8, 10, 11, 6, 5, 9, 3, 7, 9, 8, 9, 11, 7, 3, 8],
            [2, 2, 2, 2],
            [11, 4, 9, 9, 9, 12, 6, 5, 10, 8, 3, 12, 12, 12, 9, 11, 11, 11, 7, 9, 5, 12, 9],
            [2, 2, 2, 2],
            [6, 6, 6, 6, 9, 3, 4, 10, 5, 7, 8, 11, 5, 5, 5, 12, 4, 4, 4, 10, 10, 10, 7, 7, 7, 8, 8, 8, 12, 8, 4, 8, 10, 4, 12, 8, 11, 10, 8, 10, 5, 9, 7, 4, 5, 4, 12, 9, 5, 7, 10, 12, 5, 4, 8, 11, 4, 10],
        ],
        [
            [8, 12, 12, 12, 11, 8, 8, 8, 12, 10, 4, 7, 5, 9, 6, 3, 4, 12, 4, 7, 4, 11, 4, 12, 11, 12, 7, 4, 12, 7, 4, 3, 12, 9, 3, 9, 7, 12, 9, 11, 12, 9, 4, 9, 12, 7, 4],
            [7, 7, 7, 4, 8, 5, 5, 5, 11, 9, 6, 6, 6, 7, 12, 10, 10, 10, 5, 4, 4, 4, 6, 3, 10, 8, 8, 8, 10, 6, 8, 5, 3, 4, 5, 8, 5, 8],
            [2, 2, 2, 2],
            [7, 4, 8, 8, 8, 12, 9, 12, 12, 12, 6, 3, 11, 8, 10, 5, 10, 9, 10, 9, 3, 8, 10, 3, 8, 12, 10, 12, 9, 8, 9, 3, 8, 10, 9, 8, 9, 8, 3, 12, 3, 9, 10, 5, 8],
            [7, 8, 7, 7, 7, 11, 5, 12, 10, 9, 6, 4, 4, 4, 4, 10, 10, 10, 3, 8, 8, 8, 6, 6, 6, 5, 5, 5, 6, 11, 5, 4, 5, 6, 11, 3, 12, 5, 10, 8, 6, 5, 4, 10, 9, 5, 12, 10, 12, 10, 6, 3, 5, 10, 12, 5, 8, 6],
        ],
    ],
    // 5   
    [
        [
            [2, 2, 2, 2],
            [5, 5, 5, 9, 7, 4, 6, 8, 10, 11, 4, 4, 4, 5, 11, 11, 11, 3, 8, 8, 8, 10, 10, 10, 7, 3, 10, 3, 8, 4, 10, 3, 4, 10, 4, 10, 3, 8, 10, 9, 3, 11, 8, 9, 10, 8, 11, 8, 7, 10, 4, 10, 11, 10, 8, 10, 4, 11],
            [7, 10, 7, 7, 7, 5, 9, 9, 9, 11, 11, 11, 11, 3, 8, 9, 4, 6, 11, 8, 11, 8, 11, 3, 9, 11, 10, 11, 8, 11, 10, 11],
            [5, 5, 5, 5, 4, 6, 10, 4, 4, 4, 3, 7, 7, 7, 8, 11, 7, 9, 6, 6, 6, 10, 10, 10, 8, 8, 8, 4, 8, 4],
            [2, 2, 2, 2],
        ],
        [
            [11, 11, 11, 3, 5, 8, 10, 11, 10, 10, 10, 4, 6, 5, 5, 5, 9, 7, 4, 4, 4, 8, 8, 8, 4, 10, 4, 8, 4, 10, 5, 7, 4, 5, 8, 7, 8],
            [2, 2, 2, 2],
            [8, 5, 6, 7, 7, 7, 4, 3, 10, 7, 11, 11, 11, 11, 9, 9, 9, 9, 11, 9, 11, 6, 11, 6, 7, 9, 10, 6, 10, 11, 7, 6, 11, 5, 11],
            [2, 2, 2, 2],
            [10, 9, 8, 8, 8, 7, 5, 10, 10, 10, 11, 6, 3, 8, 4, 5, 5, 5, 6, 6, 6, 4, 4, 4, 7, 7, 7, 11, 7, 4, 11, 7, 6, 3, 4, 6, 8, 7, 4, 11, 6, 4, 11, 6],
        ],
        [
            [5, 5, 5, 8, 10, 10, 10, 7, 4, 8, 8, 8, 6, 11, 11, 11, 10, 4, 4, 4, 11, 3, 5, 9, 10, 11, 10, 8, 11, 4, 10, 4, 8, 11, 6, 11, 10, 8, 4, 8, 10, 11, 10, 4],
            [3, 11, 9, 6, 8, 8, 8, 7, 5, 5, 5, 5, 4, 8, 10, 6, 6, 6, 4, 4, 4, 7, 7, 7, 10, 10, 10, 8, 11, 5, 4, 11, 5, 11, 4, 10, 5],
            [2, 2, 2, 2],
            [4, 9, 8, 3, 11, 5, 6, 11, 11, 11, 7, 4, 4, 4, 10, 8, 8, 8, 10, 10, 10, 5, 5, 5, 9, 10, 5, 7, 5, 3, 5, 11, 9, 8, 10, 11, 10, 5],
            [5, 4, 4, 4, 6, 3, 9, 7, 7, 7, 10, 5, 5, 5, 4, 11, 8, 8, 8, 8, 7, 10, 10, 10, 6, 6, 6, 7, 4, 10, 3, 6, 10, 3, 10, 8, 10, 3, 7, 4, 7, 10, 4, 10, 7, 6, 9, 6, 4, 6, 10, 7, 3],
        ],
    ],
    // 6   
    [
        [
            [2, 2, 2, 2],
            [8, 7, 3, 6, 5, 4, 9, 10, 10, 10, 10, 8, 8, 8, 4, 4, 4, 5, 5, 5, 6, 6, 6, 10, 4, 5, 4, 10, 5],
            [10, 10, 10, 7, 7, 7, 7, 4, 6, 10, 9, 9, 9, 8, 3, 5, 9, 7, 6, 9, 4, 5, 7, 8, 7, 4, 9, 7, 4, 9, 5, 7, 4, 7, 9, 4, 9, 3, 7, 6, 4, 8, 9, 4, 9, 7, 4],
            [5, 5, 5, 5, 6, 3, 8, 8, 8, 9, 4, 4, 4, 4, 6, 6, 6, 10, 8, 7, 10, 10, 10, 4, 3, 6],
            [2, 2, 2, 2],
        ],
        [
            [7, 3, 4, 10, 10, 10, 5, 9, 10, 4, 4, 4, 6, 6, 6, 6, 8, 8, 8, 8, 5, 5, 5, 10, 5, 8, 10, 5, 6, 5, 4, 6, 8, 10, 8, 4, 10, 6, 4, 6, 8, 10, 9, 8, 6, 10, 6, 4],
            [2, 2, 2, 2],
            [10, 10, 10, 5, 6, 7, 7, 7, 3, 10, 8, 9, 9, 9, 4, 7, 9, 7, 8, 4, 7, 9, 7, 9, 7, 9, 7, 9, 7, 9, 7, 4, 6, 7, 4, 9, 7, 6, 4, 7, 9, 6, 7, 4, 9, 4, 5, 4, 9, 3],
            [2, 2, 2, 2],
            [3, 8, 8, 8, 8, 7, 5, 6, 10, 4, 9, 10, 10, 10, 4, 4, 4, 6, 6, 6, 5, 5, 5, 6, 4, 10, 8, 9],
        ],
        [
            [9, 4, 4, 4, 8, 4, 7, 3, 8, 8, 8, 10, 5, 6, 10, 10, 10, 6, 6, 6, 5, 5, 5, 10, 5, 4, 10, 6, 10, 4, 5, 4, 5, 7, 8, 6, 8, 4, 10, 6, 3, 8, 6, 8, 5, 10, 5, 4, 5, 4, 5],
            [8, 8, 8, 3, 5, 5, 5, 7, 5, 4, 10, 10, 10, 6, 8, 4, 4, 4, 9, 10, 6, 6, 6, 10, 5, 4, 5, 9, 6],
            [2, 2, 2, 2],
            [6, 6, 6, 3, 10, 10, 10, 5, 4, 5, 5, 5, 8, 4, 4, 4, 6, 8, 8, 8, 9, 10, 7, 8, 10, 8, 5, 8, 10, 3, 8, 4, 8, 9, 10, 5, 8, 4, 5, 7, 10, 4, 5, 4, 8],
            [4, 5, 7, 3, 6, 10, 9, 8, 4, 4, 4, 5, 5, 5, 6, 6, 6, 8, 8, 8, 10, 10, 10, 8, 3, 6, 8, 10, 6, 10, 8, 10, 3, 8, 10, 8, 6, 3, 10, 3, 8],
        ],
    ],
    // 7   
    [
        [
            [2, 2, 2, 2],
            [6, 6, 6, 5, 9, 6, 7, 3, 8, 4, 4, 4, 4, 5, 5, 5, 8, 8, 8, 9, 9, 9, 8, 4, 8, 4, 8, 4, 8, 4, 3, 8, 4, 5, 4, 9, 8, 5, 8, 5],
            [4, 6, 5, 7, 3, 7, 7, 7, 9, 8, 5, 5, 5, 9, 9, 9, 8, 5, 3, 7, 5, 6, 9, 7, 9, 7, 9, 8, 6, 7, 5, 7, 9, 8, 5, 9, 7],
            [5, 9, 7, 7, 7, 3, 7, 5, 5, 5, 4, 8, 6, 8, 8, 8, 4, 4, 4, 6, 6, 6, 8, 4, 8, 4, 6, 9, 6, 8, 9, 7, 4, 3, 4, 8, 9, 6, 7, 6, 8, 9, 3, 6, 8, 6, 4, 8, 3, 4, 8, 4, 8, 6, 7, 6, 4, 8],
            [2, 2, 2, 2],
        ],
        [
            [6, 6, 6, 9, 7, 3, 8, 8, 8, 8, 5, 5, 5, 6, 4, 5, 4, 4, 4, 9, 9, 9, 8, 5, 7, 3, 7, 9, 7, 8, 4, 7, 8, 3, 4, 7, 4, 8, 3, 4, 7, 4],
            [2, 2, 2, 2],
            [8, 7, 7, 7, 4, 9, 9, 9, 6, 5, 5, 5, 3, 7, 5, 9, 6, 7, 3, 7, 9, 7, 9, 6, 5, 6, 5, 7, 9, 5, 9, 5, 6, 3, 9, 4, 7, 9, 3, 5, 9, 6, 9, 3, 9, 7, 5, 9, 5, 3, 9, 6, 9, 5, 3, 6, 7, 5],
            [2, 2, 2, 2],
            [6, 6, 6, 6, 9, 8, 7, 7, 7, 5, 5, 5, 5, 4, 4, 4, 4, 3, 8, 8, 8, 7, 8, 4, 7, 3, 9, 3],
        ],
        [
            [3, 9, 9, 9, 8, 7, 9, 6, 4, 4, 4, 5, 6, 6, 6, 4, 8, 8, 8, 5, 5, 5, 8, 5, 8, 5, 4, 9, 7, 8, 5, 4, 9, 4, 5, 9, 4, 5, 6, 4, 8, 9, 4, 6, 4, 5, 9, 4, 9, 6, 9, 5, 9, 7, 5],
            [8, 8, 8, 3, 5, 7, 6, 7, 7, 7, 9, 6, 6, 6, 8, 4, 4, 4, 4, 5, 5, 5, 6, 4, 6, 4, 7, 9, 5, 7, 6, 7, 5, 6, 5, 4, 6, 7, 6, 4, 7, 9, 5, 7, 6, 4, 3, 7, 4, 7, 6, 4, 7, 4, 5, 9, 7, 4],
            [2, 2, 2, 2],
            [7, 4, 9, 6, 5, 8, 3, 4, 4, 4, 5, 5, 5, 9, 9, 9, 8, 8, 8, 6, 6, 6, 4, 8, 4, 6, 4, 9, 5, 8, 3, 6, 5, 6],
            [5, 3, 8, 8, 8, 6, 7, 9, 4, 5, 5, 5, 8, 6, 6, 6, 4, 4, 4, 7, 7, 7, 4, 9, 7, 9],
        ],
    ],
    // 8   
    [
        [
            [2, 2, 2, 2],
            [5, 7, 4, 5, 5, 5, 3, 6, 4, 4, 4, 8, 7, 7, 7, 6, 6, 6, 8, 8, 8, 6, 4, 3, 4, 6, 3, 8, 7, 4],
            [4, 6, 5, 7, 8, 8, 8, 8, 3, 7, 7, 7, 5, 5, 5, 8, 7, 8, 7, 8, 5, 7, 8, 5, 8, 5, 8, 7, 5, 8, 5, 8, 7, 5, 8, 5, 3, 5, 8, 7, 8, 5, 7, 5, 8, 6, 5, 6, 8, 6, 5, 7, 5, 6],
            [4, 4, 4, 8, 4, 6, 6, 6, 5, 7, 5, 5, 5, 3, 6, 7, 7, 7, 8, 8, 8, 6, 7, 5, 6, 8, 7, 3, 7, 5],
            [2, 2, 2, 2],
        ],
        [
            [4, 8, 8, 8, 8, 7, 5, 5, 5, 6, 3, 5, 6, 6, 6, 4, 4, 4, 7, 7, 7, 6, 7, 3, 6, 7, 5, 6, 7],
            [2, 2, 2, 2],
            [4, 6, 7, 8, 5, 5, 5, 5, 3, 8, 8, 8, 7, 7, 7, 8, 6, 7, 8, 6, 8, 7, 8, 5, 8, 5, 8, 5, 7, 8, 5, 3, 7, 5, 7, 5, 6, 5, 7, 8, 5, 7, 3, 7, 5, 7, 8, 5, 8, 7],
            [2, 2, 2, 2],
            [6, 4, 4, 4, 7, 8, 8, 8, 8, 3, 5, 5, 5, 5, 6, 6, 6, 4, 7, 7, 7, 4, 7, 3, 4, 7, 8, 7, 8, 7, 4, 8, 7, 4, 8, 7, 8, 4, 8, 7],
        ],
        [
            [4, 7, 3, 4, 4, 4, 8, 5, 6, 6, 6, 6, 8, 8, 8, 7, 7, 7, 5, 5, 5, 7, 3, 8, 6, 8, 6, 3, 8, 5, 6, 7, 6, 8, 5, 8, 7, 5, 7, 8, 6, 3, 7, 6],
            [7, 7, 7, 3, 5, 7, 6, 8, 4, 5, 5, 5, 8, 8, 8, 5, 8, 5, 4, 5, 8, 5, 4, 8, 5, 8, 5, 8, 4, 5, 8, 5, 4, 8, 5, 8, 3, 8, 4, 5],
            [2, 2, 2, 2],
            [7, 3, 6, 5, 4, 8, 8, 8, 8, 6, 6, 6, 5, 5, 5, 7, 7, 7, 4, 4, 4, 8, 6, 4],
            [3, 7, 7, 7, 8, 7, 4, 6, 5, 8, 8, 8, 4, 4, 4, 5, 5, 5, 6, 6, 6, 8, 4, 7, 4, 7, 5, 4, 8, 5, 4, 6, 7, 6, 4, 5, 6, 8, 6, 4, 8, 4, 6, 4, 8, 6, 8, 6, 8, 6, 4, 8, 4],
        ],
    ],
    // 9   
    [
        [
            [2, 2, 2, 2],
            [6, 6, 6, 4, 5, 6, 3, 7, 7, 7, 7, 5, 5, 5, 7, 5, 7, 4, 5, 7, 4, 7, 4, 5, 7, 4, 7, 5, 3, 5, 7, 3, 7, 5, 7, 5, 4, 7],
            [4, 4, 4, 4, 7, 5, 3, 7, 7, 7, 6, 5, 5, 5, 7, 5, 6, 7, 3, 6, 5, 7, 5, 3, 7, 3, 6, 7, 5, 7, 3, 7, 5, 7, 6, 3, 5, 3, 5],
            [7, 7, 7, 3, 6, 6, 6, 4, 5, 7, 6, 5, 5, 5, 4, 4, 4, 6, 4, 6, 5, 6, 5, 6, 4, 5, 6, 4, 6, 5, 6, 4, 6, 4, 6],
            [2, 2, 2, 2],
        ],
        [
            [7, 7, 7, 6, 7, 5, 3, 4, 6, 6, 6, 5, 5, 5, 6, 5, 4, 5, 4, 6, 4, 6, 5, 4, 3, 5, 6, 5, 6, 4, 5, 6, 3, 4, 5, 6, 5, 4, 6, 4, 6, 5, 4, 5],
            [2, 2, 2, 2],
            [5, 5, 5, 7, 4, 4, 4, 6, 5, 7, 7, 7, 3, 4, 7, 3, 7, 4, 6, 7, 4, 7, 4, 6, 4],
            [2, 2, 2, 2],
            [5, 6, 7, 4, 3, 7, 7, 7, 4, 4, 4, 5, 5, 5, 6, 6, 6, 3, 7, 4, 7, 6, 4, 6, 4, 7, 4, 6, 3, 7, 3, 6, 4, 7, 6, 3, 6, 4, 6, 7, 4, 6, 4, 6, 7, 6, 7, 6, 4, 3, 6, 3, 7],
        ],
        [
            [7, 7, 7, 5, 6, 6, 6, 3, 7, 4, 5, 5, 5, 6, 5, 6, 5, 4, 6, 4, 5, 6, 5, 4, 5, 4, 6, 4, 6, 4, 5, 3, 6, 4, 6, 5, 4, 3, 6, 4, 5, 4, 3, 5, 4, 5, 6, 3, 6, 5, 6, 5, 4, 5, 4, 5, 3, 5, 6, 5],
            [6, 7, 7, 7, 3, 4, 7, 5, 5, 5, 5, 4, 4, 4, 3, 4, 3, 4, 7, 5, 3, 4, 5, 7, 4, 7, 4, 5, 4, 7, 5, 3, 4, 5, 4, 7, 4, 3, 4, 5, 4, 7, 5, 4, 7, 4, 5, 4],
            [2, 2, 2, 2],
            [3, 7, 6, 4, 4, 4, 4, 5, 5, 5, 5, 7, 7, 7, 6, 4, 5, 6, 4, 5, 7, 6, 4, 6, 4, 7, 5, 7, 6, 5, 7, 4, 7, 4, 7, 4, 7, 4, 7, 4, 7, 5, 7, 4, 6, 5, 7, 4, 7],
            [4, 7, 5, 4, 4, 4, 3, 6, 6, 6, 6, 7, 7, 7, 5, 5, 5, 6, 7, 5, 6, 5, 6, 7, 5, 7, 5, 7, 6, 5, 7, 5, 6, 5, 6, 5, 7, 5, 6, 5, 6, 7, 5, 6, 5, 7, 6, 7, 5, 7, 5, 7, 6, 7, 5, 7, 5, 7],
        ],
    ],
    // 10   
    [
        [
            [2, 2, 2, 2],
            [3, 5, 5, 5, 6, 4, 5, 6, 6, 6, 4, 4, 4, 5, 4, 6, 5, 4, 5, 4, 5, 4, 6, 5, 6, 4, 5, 4, 5, 4, 5, 4, 5, 4, 6, 4, 5, 6, 4, 5, 6, 4, 5, 4, 5, 4, 6, 4, 5, 4, 5, 4, 6, 5, 4, 6, 4, 5, 6],
            [5, 4, 3, 6, 4, 4, 4, 6, 6, 6, 3, 4, 6, 4, 3, 6, 4, 6, 3, 4, 3, 6, 4, 6, 3, 6, 4, 3, 4, 3, 6, 4, 6, 4, 3, 4, 6, 4, 6, 4, 6, 4, 6, 4, 6, 3, 6],
            [4, 5, 3, 4, 4, 4, 6, 5, 5, 5, 6, 6, 6, 5, 6, 5, 6, 5, 6, 3, 5, 6, 5, 6, 3, 5, 6, 5, 6, 3, 5, 3, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 3, 5],
            [2, 2, 2, 2],
        ],
        [
            [4, 6, 5, 5, 5, 5, 3, 6, 6, 6, 4, 4, 4],
            [2, 2, 2, 2],
            [4, 4, 4, 5, 6, 6, 6, 6, 4, 3, 6, 3, 6, 5, 3, 5, 3, 6, 3, 6, 3, 6, 5, 6, 5, 6, 3, 6, 3, 6, 3, 5, 3, 5, 6, 3, 6, 3, 6, 3, 6, 3, 6, 5, 3, 6, 5, 6, 5, 3, 5],
            [2, 2, 2, 2],
            [3, 4, 6, 5, 4, 4, 4, 6, 6, 6, 5, 5, 5, 6, 5, 6, 5, 4, 6, 4, 6, 5, 4, 5, 4, 6, 5, 6, 4, 6, 5, 4, 5, 4, 5, 4, 6, 5, 6, 5, 6, 4, 5, 6, 5, 6, 4, 5, 4, 5, 4, 6, 5],
        ],
        [
            [4, 6, 6, 6, 6, 3, 5, 5, 5, 5, 4, 4, 4],
            [6, 3, 5, 4, 4, 4, 4, 6, 6, 6],
            [2, 2, 2, 2],
            [4, 6, 5, 5, 5, 3, 5, 6, 6, 6, 4, 4, 4],
            [5, 4, 6, 3, 4, 4, 4, 6, 6, 6, 5, 5, 5],
        ],
    ],
    // 11   
    [
        [
            [2, 2, 2, 2],
            [3, 3, 3, 4, 5, 3, 5, 5, 5, 4, 4, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5],
            [5, 5, 5, 3, 4, 4, 4, 5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3],
            [3, 3, 3, 3, 4, 5, 5, 5, 5, 4, 4, 4, 5, 4, 5, 4, 5, 4, 5, 4],
            [2, 2, 2, 2],
        ],
        [
            [4, 4, 4, 4, 5, 5, 5, 3, 5, 3, 3, 3, 5, 3, 5, 3, 5, 3],
            [2, 2, 2, 2],
            [5, 5, 5, 5, 3, 4, 4, 4, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3],
            [2, 2, 2, 2],
            [4, 4, 4, 3, 5, 3, 3, 3, 4, 5, 5, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3],
        ],
        [
            [3, 5, 4, 3, 3, 3, 4, 4, 4, 5, 5, 5, 4, 5, 4, 5],
            [5, 4, 3, 5, 5, 5, 4, 4, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4],
            [2, 2, 2, 2],
            [5, 3, 4, 5, 5, 5, 4, 4, 4, 3, 3, 3, 4],
            [4, 4, 4, 4, 5, 5, 5, 5, 3, 3, 3, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5],
        ],
    ],
    // 12   
    [
        [
            [2, 2, 2, 2],
            [4, 3, 4, 4, 3, 4, 3, 3],
            [3, 3, 3, 3, 4, 3, 4, 4, 3, 4, 4, 3, 4],
            [4, 4, 3, 4, 4, 3, 4, 4, 3, 4, 3, 3, 3, 3, 4, 3],
            [2, 2, 2, 2],
        ],
        [
            [3, 4, 3, 3, 4, 3, 4, 4],
            [2, 2, 2, 2],
            [3, 4, 3, 3, 3, 3, 4, 3, 4, 4, 3, 4, 3, 4, 4],
            [2, 2, 2, 2],
            [3, 3, 3, 4, 3, 4, 4, 3, 4, 3, 4, 4, 3],
        ],
        [
            [4, 4, 3, 3, 4, 3, 4, 3, 3, 4],
            [4, 3, 3, 3, 3, 4, 3, 4, 4, 3, 4, 3, 4, 3, 3, 4, 4, 3, 4],
            [2, 2, 2, 2],
            [4, 3, 3, 3, 3, 4, 4, 3, 4, 4, 3, 4, 3, 4, 4, 3],
            [3, 3, 3, 4, 3, 4, 3, 3, 4, 4, 3, 4, 3, 4, 4, 3, 4, 4, 3],
        ],
    ],
];
//                                                                            
var moneyReels = [
    [19, 19, 20, 20, 19, 20, 19, 19, 20, 20, 19, 20, 20, 19, 19, 20, 19, 20, 20, 19, 20, 19, 20, 20],
    [20, 19, 19, 20, 20, 19, 20, 19, 20, 20, 19, 20, 19, 20, 19, 20, 20, 19, 20, 19, 20, 19, 19, 20],
    [19, 20, 19, 19, 20, 20, 19, 20, 19, 19, 20, 20, 19, 20, 20, 20, 20, 19, 19, 20, 19, 20, 19, 20],
    [20, 19, 19, 20, 20, 19, 20, 19, 20, 20, 19, 19, 20, 20, 19, 19, 20, 20, 20, 20, 19, 20, 20, 19],
    [19, 20, 19, 20, 20, 20, 19, 19, 20, 19, 20, 19, 20, 19, 20, 19, 19, 20, 20, 20, 19, 20, 20, 20],
];
var payTable = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 50, 25, 20, 8, 8, 8, 8, 6, 6, 6, 6, 4, 4, 0, 0, 0, 0, 0],
    [0, 0, 0, 300, 150, 100, 20, 20, 20, 20, 15, 15, 15, 15, 10, 10, 0, 0, 0, 0, 0],
    [0, 0, 0, 1000, 600, 500, 100, 100, 100, 100, 60, 60, 60, 60, 45, 45, 0, 0, 0, 0, 0],
];
var payLines = [
    [5, 6, 7, 8, 9], // 1
    [0, 1, 2, 3, 4], // 2
    [10, 11, 12, 13, 14], // 3
    [0, 6, 12, 8, 4], // 4
    [10, 6, 2, 8, 14], // 5
    [0, 1, 7, 13, 14], // 6
    [10, 11, 7, 3, 4], // 7
    [5, 1, 2, 3, 9], // 8
    [5, 11, 12, 13, 9], // 9
    [0, 6, 7, 8, 4], // 10
    [10, 6, 7, 8, 14], // 11
    [5, 1, 7, 13, 9], // 12
    [5, 11, 7, 3, 9], // 13
    [0, 11, 2, 13, 4], // 14
    [10, 1, 12, 3, 14], // 15
    [0, 6, 2, 8, 4], // 16
    [10, 6, 12, 8, 14], // 17
    [0, 11, 12, 13, 14], // 18
    [10, 1, 2, 3, 4], // 19
    [5, 6, 2, 8, 9], // 20
];
//                           
var upStairCount = [1, 2, 3];
//                              
var downStairCount = [-1, -2, -3];
//                                  
var lowestSymbol = [0, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4];
//                                    
var moneyValueList = [20, 40, 60, 80, 100, 120, 140, 160, 180, 200, 220, 240, 260, 280, 300, 320, 340, 360, 380, 400, 500, 600, 800, 2000];
//                     
var tipsList = [0, 100, 120, 140, 160, 180, 200, 300, 400, 500, 600, 800, 2000];
//                              
var multiList = [2, 3, 5, 10];

SlotMachine.prototype.Init = function () {
    this.highPercent = 0; //                                 0                .
    this.normalPercent = 30;
};

SlotMachine.prototype.SpinFromPattern = function (player) {
    this.gameSort = this.currentGame;

    this.totalBet = player.totalBet;
    this.betPerLine = player.betPerLine;

    this.winMoney = 0;
    this.winLines = [];

    if (this.currentGame == "FREE") {
        this.FreeSpin(player);
        return;
    }

    if (this.currentGame == "BONUS") {
        this.HoldSpin(player);
        return;
    }

    var spinMode = 1;

    var viewCache = player.viewCache;

    if (viewCache.view.prevFloor != this.floorNumber) {
        spinMode = 2;
    }

    if (player.prevTotalBet != 0 && player.prevTotalBet != player.virtualBet) {
        var floorCache = this.floorCacheList[player.virtualBet];
        if (floorCache) {
            this.floorNumber = floorCache;
        } else {
            this.floorNumber = 1;
        }

        spinMode = 3;
    }

    if (viewCache.type == "BASE") {
        var pattern;

        if (spinMode == 1) {
            pattern = viewCache;
        } else {
            pattern = this.SpinForBaseGen(viewCache.bpl, viewCache.bpl * this.lineCount, viewCache.win, 0, spinMode);
        }

        this.view = pattern.view.view;

        var curFloor = pattern.view.curFloor;
        var prevFloor = pattern.view.prevFloor;
        var change = curFloor - prevFloor;

        //                                                        
        this.floorNumber = curFloor;

        if (change == 0) {
            this.floorChange = false;
        } else {
            this.floorChange = true;
        }

        this.reelIndex = prevFloor - 1;
        this.basement = pattern.view.basement;
        this.floorSN = GenerateFloorSN(prevFloor, curFloor);

        // console.log(`            : ${spinMode},          : ${prevFloor} - ${curFloor},                : ${viewCache.view.prevFloor} - ${viewCache.view.curFloor}`);
        // console.log(`                   : ${JSON.stringify(this.floorCacheList)}`);
    } else if (viewCache.type == "FREE") {
        //                       
        this.freeSpinStep = 0;
        this.freeSpinNextStep = 0;

        var cache = viewCache.view;
        this.freeSpinCacheList = cache.viewList;
        this.freeSpinCountArr = cache.countArr;
        this.freeSpinLength = cache.length;
        this.freeSpinFloorNumber = cache.floorNumber;

        this.view = cache.viewList[0][this.floorNumber - 1];
        this.floorChange = false;
        this.reelIndex = this.floorNumber - 1;
        this.basement = false;
        this.floorSN = GenerateFloorSN(this.floorNumber, this.floorNumber);
    } else if (viewCache.type == "BONUS") {
        var cache = viewCache.view;

        this.moneyBonusCacheList = cache.cacheList;
        this.holdSpinCountArr = cache.first.countArr;
        this.holdSpinCount = cache.first.count;
        this.holdSpinFloorNumber = cache.floor;
        this.holdSpinLastFloor = cache.lastFloor;

        this.view = cache.first.viewList[this.floorNumber - 1];
        this.floorChange = true;
        this.reelIndex = this.floorNumber - 1;
        this.basement = false;
        this.floorSN = `${GenerateFloorSN(this.floorNumber, 13)};${this.holdSpinFloorNumber}~100`;

        this.moneyCacheIndex = 0;
        this.moneyBonusWin = 0;
        this.currentGame = "BONUS";
    }

    this.winMoney = WinFromView(this.view, player.betPerLine);
    this.winLines = WinLinesFromView(this.view, player.betPerLine);

    if (viewCache.type == "BONUS") {
        this.virtualReels = {
            above: RandomLineFromReelsForBonus(this.view),
            below: RandomLineFromReelsForBonus(this.view),
        };
    } else {
        this.virtualReels = GenerateLines(this.view, baseReels[this.reelIndex]);
    }

    this.floorCacheList[player.virtualBet] = this.floorNumber;

    //                   
    if (isFreeSpinWin(this.view)) {
        this.freeSpinIndex = 1;
        this.freeSpinStep = 0;
        this.freeSpinNextStep = 0;
        this.freeSpinFloorSN = "";

        this.freeSpinBeforeMoney = this.winMoney;
        this.freeSpinWinMoney = this.winMoney;
        this.currentGame = "FREE";
    }
};

SlotMachine.prototype.FreeSpin = function (player) {
    var cache = this.freeSpinCacheList[this.freeSpinIndex];

    this.view = cache.view;
    this.winMoney = WinFromView(this.view, player.betPerLine);
    this.winLines = WinLinesFromView(this.view, player.betPerLine);

    //                    
    this.freeSpinStep = cache.step;
    this.freeSpinNextStep = cache.next;
    this.freeSpinFloorSN = `${this.floorSN};${this.freeSpinFloorNumber}~12;${freeSpinFloorSNArr[this.freeSpinStep][this.freeSpinNextStep]}`;

    //                     (                                   3               )
    this.reelIndex = (this.freeSpinFloorNumber - 1) * 3 + 12 + this.freeSpinStep;

    //                                                       
    if (this.freeSpinStep == 1 && this.freeSpinNextStep == 2) {
        this.freeSpinLength += 5;
    }

    this.virtualReels = {
        above: RandomLineFromReels(freeReels[this.freeSpinFloorNumber - 1][this.freeSpinStep]),
        below: RandomLineFromReels(freeReels[this.freeSpinFloorNumber - 1][this.freeSpinStep]),
    };

    this.freeSpinWinMoney += this.winMoney;

    this.freeSpinIndex++;

    if (this.freeSpinIndex > this.freeSpinLength) {
        this.currentGame = "BASE";
    }
};

SlotMachine.prototype.BonusSpin = function (player, param) {
    var result, target;
    if (this.currentGame == "FREE") {
        result = this.freeSpinCountArr;
        target = this.freeSpinLength;
    } else if (this.currentGame == "BONUS") {
        result = this.holdSpinCountArr;
        target = this.holdSpinCount;
    }

    while (true) {
        result = Util.shuffle(result);

        if(!param.ind){
            break;
        }else{
            if (result[param.ind] == target) break;
        }
    }
};

SlotMachine.prototype.HoldSpin = function (player, param) {
    this.gameSort = this.currentGame;
    var cache = this.moneyBonusCacheList[this.moneyCacheIndex];

    this.view = cache.view;
    this.moneyCache = cache.moneyCache;
    this.moneyBonusCount = cache.count;

    var moneySymbols = MoneySymbolPositions(this.view);
    var stickys = [];
    for (var i = 0; i < moneySymbols.length; i++) {
        stickys.push(`${moneySymbols[i]},${moneySymbols[i]}`);
    }
    this.holdSpinSticky = stickys.join("~");
    this.holdSpinAdded = cache.change;

    this.moneyBonusWinPerBet = MoneyWinFromCache(this.moneyCache, player.betPerLine);

    this.moneyCacheIndex++;
    if (this.moneyCacheIndex >= this.moneyBonusCacheList.length) {
        this.floorNumber = this.holdSpinLastFloor;

        this.winMoney = this.moneyBonusWinPerBet;
        this.moneyBonusWin = this.winMoney;
        this.currentGame = "BASE";
        this.floorSN = `${GenerateFloorSN(this.floorNumber, this.floorNumber)};${this.holdSpinFloorNumber}~100`;

        var stickys = [];
        for (var i = 0; i < moneySymbols.length; i++) {
            stickys.push(`${moneySymbols[i]},-1`);
        }
        this.holdSpinSticky = stickys.join("~");
    }
};

// mode: 1 -                       , 2 -                          , 3 -                                       
SlotMachine.prototype.SpinForBaseGen = function (bpl, totalBet, baseWin, limitWin, mode = 1) {
    var tmpView;
    var tmpWin;
    var tmpFloor;

    while (true) {
        if (mode == 1) {
            tmpFloor = this.floorNumberPT;
        } else {
            tmpFloor = this.floorNumber;
        }

        if (baseWin > 0 && mode != 3) {
            tmpView = RandomWinView(baseReels[tmpFloor - 1], bpl, baseWin, tmpFloor);
        } else {
            tmpView = RandomZeroView(baseReels[tmpFloor - 1], bpl);
        }

        var result = WinFromViewWithSymbol(tmpView, bpl);
        var isLowestWin = result.symbols.indexOf(lowestSymbol[tmpFloor]) > -1;
        tmpWin = result.win;

        var basement = false;
        var prevFloor = tmpFloor;

        var change = GetFloorNumber(tmpView);

        //                                                                        
        if (isLowestWin && change != 0) {
            continue;
        }

        //                                                            0                 
        if (mode == 3 && (change != 0 || isLowestWin)) {
            continue;
        }

        //                             
        if (change != 0) {
            if (tmpFloor + change < 1) {
                while (true) {
                    tmpFloor = Util.random(1, 9);
                    if (tmpFloor != prevFloor) {
                        break;
                    }
                }

                basement = true;
            } else {
                tmpFloor += change;
                basement = false;
            }
        }

        //                                                         ,        13          
        if (isLowestWin) {
            tmpFloor++;
        }

        var pattern;

        if (tmpFloor >= 13) {
            if (Util.probability(3) && baseWin > 0 && mode == 1) {
                pattern = this.SpinForHoldGen(bpl, totalBet, limitWin, false);
            } else {
                continue;
            }
        } else {
            this.floorNumberPT = tmpFloor;

            pattern = {
                view: {
                    view: tmpView,
                    prevFloor: prevFloor,
                    curFloor: tmpFloor,
                    basement: basement,
                },
                win: tmpWin,
                type: "BASE",
                bpl: bpl,
            };
        }

        return pattern;
    }
};

SlotMachine.prototype.SpinForJackpot = function (bpl, totalBet, jpWin, isCall = false, jpType) {
    var newJpType = jpType;
    if (jpType === "RANDOM") {
        newJpType = "FREE"; //                                                      .
    }

    switch (newJpType) {
        case "FREE":
            return this.SpinForFreeGen(bpl, totalBet, jpWin, isCall);
        case "BONUS":
            return this.SpinForHoldGen(bpl, totalBet, jpWin, isCall);
        default:
            return;
    }
};

SlotMachine.prototype.SpinForFreeGen = function (bpl, totalBet, fsWin, isCall = false) {
    var scatterViewList = [];
    for (var i = 1; i < 13; i++) {
        var scatterView = RandomScatterView(baseReels[i - 1], bpl);
        scatterViewList.push(scatterView);
    }

    var fsLenInfo = RandomFreeSpinCounts(scatterView);

    var freeSpinData = {
        length: fsLenInfo.count,
        countArr: fsLenInfo.arr,
        viewList: [],
    };

    var cache = RandomFreeViewCache(freeReels, bpl, fsWin, freeSpinData.length);

    freeSpinData.viewList.push(scatterViewList);
    freeSpinData.viewList = freeSpinData.viewList.concat(cache.viewList);
    freeSpinData.floorNumber = cache.floorNumber;

    return {
        win: cache.win,
        bpl: bpl,
        view: freeSpinData,
        type: "FREE",
        isCall: isCall ? 1 : 0,
    };
};

SlotMachine.prototype.SpinForHoldGen = function (bpl, totalBet, bsWin, isCall = false) {
    var bonusViewList = [];
    for (var i = 1; i < 13; i++) {
        var bonusView = RandomBonusView(baseReels[i - 1], bpl);
        bonusViewList.push(bonusView);
    }

    var moneyCountInfo = RandomMoneySymbolCount();

    var holdSpinData = {
        count: moneyCountInfo.count,
        countArr: moneyCountInfo.arr,
        viewList: bonusViewList,
    };

    var moneyBonusCache = RandomBonusViewCache(moneyReels, bpl, bsWin, holdSpinData.count);
    var lastFloor = Util.random(1, 8);

    var pattern = {
        view: {
            cacheList: moneyBonusCache.cache,
            floor: moneyBonusCache.floor,
            first: holdSpinData,
            lastFloor: lastFloor,
        },
        bpl: bpl,
        win: moneyBonusCache.win,
        type: "BONUS",
        isCall: 1,
    };

    this.floorNumberPT = lastFloor;

    return pattern;
};

var RandomWinView = function (reels, bpl, maxWin) {
    var tmpView, tmpWin;
    var bottomLimit = 0;
    var calcCount = 0;

    while (true) {
        tmpView = RandomView(reels);
        tmpWin = WinFromView(tmpView, bpl);
        if (tmpWin > bottomLimit && tmpWin <= maxWin) {
            break;
        }
        calcCount++;
        if (calcCount > 100) {
            return RandomZeroView(reels, bpl);
        }
    }
    return tmpView;
};

var RandomZeroView = function (reels, bpl) {
    var tmpView, tmpWin;

    while (true) {
        tmpView = RandomView(reels);

        tmpWin = WinFromView(tmpView, bpl);
        if (tmpWin == 0) {
            break;
        }
    }
    return tmpView;
};

var RandomView = function (reels) {
    var view = [];

    while (true) {
        for (var i = 0; i < slotWidth; i++) {
            var len = reels[i].length;
            var randomIndex = Util.random(0, len);
            for (var j = 0; j < slotHeight; j++) {
                var viewPos = i + j * slotWidth;
                var reelPos = (randomIndex + j) % len;
                view[viewPos] = reels[i][reelPos];
            }
        }

        if (!isFreeSpinWin(view) && NumberOfStairs(view) < 2) {
            break;
        }
    }
    return view;
};

var RandomScatterView = function (reels, bpl) {
    var view = [];
    while (true) {
        for (var i = 0; i < slotWidth; i++) {
            var len = reels[i].length;
            var randomIndex = Util.random(0, len);
            for (var j = 0; j < slotHeight; j++) {
                var viewPos = i + j * slotWidth;
                var reelPos = (randomIndex + j) % len;
                view[viewPos] = reels[i][reelPos];
            }
        }

        if (isFreeSpinWin(view) && WinFromView(view, bpl) == 0 && NumberOfStairs(view) == 0) {
            break;
        }
    }
    return view;
};

var RandomFreeViewCache = function (reels, bpl, fsWin, fsLen) {
    var minMoney = fsWin * 0.8;
    var maxMoney = fsWin;

    minMoney = Util.max(minMoney, 0);
    maxMoney = Util.max(maxMoney, 0);

    var lowerLimit = -1,
        upperLimit = 100000000000000;
    var lowerView = null,
        upperView = null;

    for (var patternIndex = 0; patternIndex < 200; patternIndex++) {
        //                                     
        var freeSpinIndex = 1;
        var freeSpinData = {};
        freeSpinData.viewList = [];
        var freeSpinWinMoney = 0;
        var freeSpinLength = fsLen;

        //          
        var floorNumber = Util.random(1, 12);
        var freeStep = 0;
        var arrow = 1;
        var maxCount = 0;

        while (true) {
            var fsview, fsWin, isLowestWin;
            while (true) {
                fsview = RandomFreeView(reels[floorNumber - 1][freeStep]);
                var tmpRes = WinFromViewWithSymbol(fsview, bpl);
                fsWin = tmpRes.win;
                isLowestWin = tmpRes.symbols.indexOf(lowestSymbol[floorNumber]) > -1;

                if (Util.probability(50) || fsWin == 0) {
                    //                                                 
                    if (maxCount > 1 && freeStep + arrow == 2 && isLowestWin) {
                        continue;
                    } else {
                        break;
                    }
                }
            }

            var cache = {
                view: fsview,
                step: freeStep,
            };

            //                                           
            if (isLowestWin) {
                // 0,1,2             ,             
                if (freeStep + arrow > 2) arrow = -1;
                if (freeStep + arrow < 0) arrow = 1;
                freeStep += arrow;
                if (freeStep == 2) {
                    freeSpinLength += 5;
                    maxCount++;
                }
            }

            cache.next = freeStep;
            freeSpinData.viewList.push(cache);

            freeSpinWinMoney += fsWin;

            freeSpinIndex++;

            if (freeSpinIndex > freeSpinLength) {
                freeSpinData.win = freeSpinWinMoney;
                freeSpinData.floorNumber = floorNumber;
                break;
            }
        }

        if (freeSpinData.win >= minMoney && freeSpinData.win <= maxMoney) {
            return freeSpinData;
        }

        if (freeSpinData.win > lowerLimit && freeSpinData.win < minMoney) {
            lowerLimit = freeSpinData.win;
            lowerView = freeSpinData;
        }
        if (freeSpinData.win > maxMoney && freeSpinData.win < upperLimit) {
            upperLimit = freeSpinData.win;
            upperView = freeSpinData;
        }
    }

    return lowerView ? lowerView : upperView;
};

//                          
var RandomBonusView = function (reels, bpl) {
    var view = [];
    while (true) {
        for (var i = 0; i < slotWidth; i++) {
            var len = reels[i].length;
            var randomIndex = Util.random(0, len);
            for (var j = 0; j < slotHeight; j++) {
                var viewPos = i + j * slotWidth;
                var reelPos = (randomIndex + j) % len;
                view[viewPos] = reels[i][reelPos];
            }
        }

        if (WinFromView(view, bpl) == 0 && NumberOfUpStairs(view) == 1 && !isFreeSpinWin(view) && NumberOfHumanSymbols(view) == 0) {
            break;
        }
    }
    return view;
};

var RandomBonusViewCache = function (reels, bpl, bsWin, count) {
    var minMoney = bsWin * 0.8;
    var maxMoney = bsWin;

    minMoney = Util.max(minMoney, 0);
    maxMoney = Util.max(maxMoney, 0);

    var lowerLimit = -1,
        upperLimit = 100000000000000;
    var lowerView = null,
        upperView = null;

    for (var patternIndex = 0; patternIndex < 200; patternIndex++) {
        var floorNumber = 1;
        if (Util.probability(80)) {
            floorNumber = Util.random(1, 6);
        } else {
            floorNumber = Util.random(1, 12);
        }

        var moneyBonusSpinCache = {};
        var bonusSpinCacheList = [];
        var bonusSpinIndex = 0;
        var bonusSpinLength = 4;
        var bonusSpinWinMoney = 0;

        //                       
        var firstView = RandomBonusCacheFirstView(reels, count);
        var firstViewMoneyCache = RandomMoneyCache(firstView, floorNumber);
        var firstCache = {
            view: firstView,
            moneyCache: firstViewMoneyCache,
            count: 0,
            change: true,
        };

        bonusSpinCacheList.push(firstCache);

        while (true) {
            bonusSpinIndex++;

            var lastCache = bonusSpinCacheList[bonusSpinCacheList.length - 1];
            var newView = Util.clone(lastCache.view);
            var newMoneyCacheValues = Util.clone(lastCache.moneyCache.values);
            var lastMoneySymbolPositions = MoneySymbolPositions(lastCache.view);

            var randomView = RandomBonusCacheView(reels);
            var newMoneySymbolPositions = MoneySymbolPositions(randomView);

            var isAdded = false;

            for (var i = 0; i < newMoneySymbolPositions.length; i++) {
                if (lastMoneySymbolPositions.indexOf(newMoneySymbolPositions[i]) < 0 && Util.probability(20)) {
                    isAdded = true;
                    newView[newMoneySymbolPositions[i]] = moneySymbol;
                    var newMoneyValue = moneyValueList[Util.random(0, moneyValueList.length)];
                    newMoneyCacheValues[newMoneySymbolPositions[i]] = newMoneyValue;
                }
            }

            //                                           0             
            if (isAdded) {
                bonusSpinIndex = 0;
            }

            newMoneyCacheTable = GetTableFromValues(newMoneyCacheValues, floorNumber);
            var newMoneyCache = {
                table: newMoneyCacheTable,
                values: newMoneyCacheValues,
            };
            var newCache = {
                view: newView,
                moneyCache: newMoneyCache,
                count: bonusSpinIndex,
                change: isAdded,
            };

            bonusSpinCacheList.push(newCache);

            var moneyCount = NumberOfMoneySymbols(newView);

            if (bonusSpinIndex >= bonusSpinLength || moneyCount == 15) {
                bonusSpinWinMoney = MoneyWinFromCache(newMoneyCache, bpl);
                break;
            }
        }

        moneyBonusSpinCache = {
            cache: bonusSpinCacheList,
            win: bonusSpinWinMoney,
            floor: floorNumber,
        };

        //                                    
        if (moneyBonusSpinCache.win >= minMoney && moneyBonusSpinCache.win <= maxMoney) {
            return moneyBonusSpinCache;
        }

        if (moneyBonusSpinCache.win > lowerLimit && moneyBonusSpinCache.win < minMoney) {
            lowerLimit = moneyBonusSpinCache.win;
            lowerView = moneyBonusSpinCache;
        }
        if (moneyBonusSpinCache.win > maxMoney && moneyBonusSpinCache.win < upperLimit) {
            upperLimit = moneyBonusSpinCache.win;
            upperView = moneyBonusSpinCache;
        }
    }

    return lowerView ? lowerView : upperView;
};

var RandomBonusCacheView = function (reels) {
    var view = [];

    for (var i = 0; i < slotWidth; i++) {
        var len = reels[i].length;
        var randomIndex = Util.random(0, len);
        for (var j = 0; j < slotHeight; j++) {
            var viewPos = i + j * slotWidth;
            var reelPos = (randomIndex + j) % len;
            view[viewPos] = reels[i][reelPos];
        }
    }

    return view;
};

var RandomFreeSpinCounts = function (view) {
    var min, max;
    var fsCountArr = [];

    // 2,4                                        
    var flag = false;
    for (var i = 0; i < slotHeight; i++) {
        flag &= isWild(view[1 + i * slotWidth]);
        flag &= isWild(view[3 + i * slotWidth]);
    }

    if (!flag) {
        min = 6;
        max = 13;
    } else {
        min = 12;
        max = 25;
    }

    while (true) {
        var rand = Util.random(min, max);
        if (fsCountArr.indexOf(rand) < 0) {
            fsCountArr.push(rand);
        }
        if (fsCountArr.length > 2) {
            break;
        }
    }

    return {
        arr: fsCountArr,
        count: fsCountArr[Util.random(0, 2)],
    };
};

var RandomMoneySymbolCount = function () {
    var holdInfo;
    var countArr;

    while (true) {
        holdInfo = {};
        countArr = [];

        while (true) {
            var rand = Util.random(3, 11);
            if (countArr.indexOf(rand) < 0) {
                countArr.push(rand);
            }
            if (countArr.length > 2) {
                break;
            }
        }

        var count = countArr[Util.random(0, 3)];
        if (count < 7 || Util.probability(10)) {
            holdInfo.arr = countArr;
            holdInfo.count = count;
            break;
        }
    }

    return holdInfo;
};

var RandomFreeView = function (reels) {
    var view = [];

    for (var i = 0; i < slotWidth; i++) {
        var len = reels[i].length;
        var randomIndex = Util.random(0, len);
        for (var j = 0; j < slotHeight; j++) {
            var viewPos = i + j * slotWidth;
            var reelPos = (randomIndex + j) % len;
            view[viewPos] = reels[i][reelPos];
        }
    }

    return view;
};

var RandomLineFromReels = function (reels) {
    var result = [];

    for (var i = 0; i < slotWidth; i++) {
        var index = Util.random(0, reels[i].length);
        result[i] = reels[i][index];
    }

    return result;
};

var RandomLineFromReelsForBonus = function (view) {
    var result = [];

    for (var i = 0; i < slotWidth; i++) {
        var index = Util.random(0, view.length);
        result[i] = view[index];
    }

    return result;
};

var RandomBonusCacheFirstView = function (reels, count) {
    var view = [];

    while (true) {
        for (var i = 0; i < slotWidth; i++) {
            var len = reels[i].length;
            var randomIndex = Util.random(0, len);
            for (var j = 0; j < slotHeight; j++) {
                var viewPos = i + j * slotWidth;
                var reelPos = (randomIndex + j) % len;
                view[viewPos] = reels[i][reelPos];
            }
        }

        if (NumberOfMoneySymbols(view) == count) {
            break;
        }
    }
    return view;
};

var RandomMoneyCache = function (view, floor) {
    var values = [];
    for (var i = 0; i < view.length; i++) {
        if (!isMoneySymbol(view[i])) {
            values[i] = 0;
            continue;
        }

        if (Util.probability(95)) {
            values[i] = moneyValueList[Util.random(0, 5)];
        } else if (Util.probability(90)) {
            values[i] = moneyValueList[Util.random(0, 10)];
        } else if (Util.probability(10)) {
            values[i] = multiList[Util.random(0, 2)];
        } else {
            values[i] = moneyValueList[Util.random(0, moneyValueList.length)];
        }
    }

    var table = GetTableFromValues(values, floor);
    return { table, values };
};

var GetTableFromValues = function (values, floor) {
    var table = [];
    for (var i = 0; i < values.length; i++) {
        table[i] = tableFromValue(values[i], floor);
    }
    return table;
};

var tableFromValue = function (value, floor) {
    switch (Number(value)) {
        case tipsList[floor]:
            return "sc";
        case 0:
            return "r";
        case 2:
        case 3:
        case 5:
        case 10:
            return "ma";
    }
    return "v";
};

var MoneySymbolPositions = function (view) {
    var result = [];
    for (var i = 0; i < view.length; i++) {
        if (isMoneySymbol(view[i])) {
            result.push(i);
        }
    }
    return result;
};

var MoneyWinFromCache = function (moneyCache, bpl) {
    var win = 0;
    var totalMulti = 1;

    for (var i = 0; i < moneyCache.values.length; i++) {
        var value = moneyCache.values[i];
        if (value > 0 && value < 20) {
            totalMulti *= value;
        } else {
            win += value;
        }
    }
    return win * bpl * totalMulti;
};

//        18                       ,                                     18                       .
var GenerateLines = function (view, reels) {
    var virtualReels = {
        above: RandomLineFromReels(reels),
        below: RandomLineFromReels(reels),
    };

    for (var i = 0; i < 5; i++) {
        //                  (0~4)
        if (view[i] == humanSymbol) {
            virtualReels.above[i] = humanSymbol;
        }
        //                     (10~14)
        if (view[i + 10] == humanSymbol) {
            virtualReels.below[i] = humanSymbol;
        }
    }

    return virtualReels;
};

//           SN       
var GenerateFloorSN = function (prev, next) {
    var change = next - prev;
    var result = "";
    var changeArr = [];

    if (next == 13 && change > 3) {
        result = `0~1~${next}~12`;
    } else {
        result = `0~1~${next}~${change}`;
    }

    if (change > 0) {
        for (var i = prev; i < next; i++) {
            changeArr.push(i);
        }
        result += `~${changeArr.join(",")}`;
    } else if (change < 0) {
        for (var i = prev; i > next; i--) {
            changeArr.push(i);
        }
        result += `~${changeArr.join(",")}`;
    }

    return result;
};

var WinFromView = function (view, bpl) {
    var winMoney = 0;

    for (var lineId = 0; lineId < payLines.length; lineId++) {
        var line = payLines[lineId];
        var lineSymbols = Util.symbolsFromLine(view, line);
        var linePay = WinFromLine(lineSymbols, bpl).win;

        if (linePay > 0) {
        }

        winMoney += linePay;
    }

    return winMoney;
};

var WinFromViewWithSymbol = function (view, bpl) {
    var winMoney = 0;
    var symbols = [];

    for (var lineId = 0; lineId < payLines.length; lineId++) {
        var line = payLines[lineId];
        var lineSymbols = Util.symbolsFromLine(view, line);
        var res = WinFromLine(lineSymbols, bpl);
        if (res.win > 0) {
            symbols.push(res.symbol);
        }

        winMoney += res.win;
    }

    return {
        win: winMoney,
        symbols: symbols,
    };
};

var WinLinesFromView = function (view, bpl) {
    var winLines = [];

    for (var lineId = 0; lineId < payLines.length; lineId++) {
        var line = payLines[lineId];
        var lineSymbols = Util.symbolsFromLine(view, line);
        var linePay = WinFromLine(lineSymbols, bpl).win;

        if (linePay > 0) {
            winLines.push(
                `${lineId}~${linePay}~${line
                    .filter(function (item, index, arr) {
                        return lineSymbols[index] != -1;
                    })
                    .join("~")}`
            );
        }
    }

    return winLines;
};

var WinFromLine = function (lineSymbols, bpl) {
    //                     
    var matchCount = 0;

    //                                              
    var symbol = wild;

    //                   
    for (var i = 0; i < lineSymbols.length; i++) {
        if (isWild(lineSymbols[i]))
            //                                              
            continue;

        symbol = lineSymbols[i];
        break;
    }

    var hasWild = false;
    //                                                   
    for (var i = 0; i < lineSymbols.length; i++) {
        if (isWild(lineSymbols[i])) {
            hasWild = true;
            lineSymbols[i] = symbol;
        }
    }

    //                                
    for (var i = 0; i < lineSymbols.length; i++) {
        if (lineSymbols[i] != symbol) break;
        matchCount++;
    }

    //                                             -1   ,     lineSymbols                        .
    for (var i = matchCount; i < lineSymbols.length; i++) {
        lineSymbols[i] = -1;
    }

    var winPay = payTable[matchCount][symbol] * bpl;
    return {
        win: winPay,
        symbol: symbol,
    };
};

var isWild = function (symbol) {
    return symbol == wild;
};

var isHuman = function (symbol) {
    return symbol == humanSymbol;
};

var isMoneySymbol = function (symbol) {
    return symbol == moneySymbol;
};

//    2        4                      3                                                       .
var isFreeSpinWin = function (view) {
    var res2 = true,
        res4 = true;

    //     2                         
    for (var i = 0; i < slotHeight; i++) {
        res2 &= isHuman(view[1 + i * slotWidth]);
    }

    //     4                         
    for (var i = 0; i < slotHeight; i++) {
        res4 &= isHuman(view[3 + i * slotWidth]);
    }

    return res2 | res4;
};

//                        
var NumberOfStairs = function (view) {
    var result = 0;
    for (var i = 0; i < view.length; i++) {
        if (view[i] == upSymbol || view[i] == downSymbol) {
            result++;
        }
    }
    return result;
};

//                           
var NumberOfUpStairs = function (view) {
    var result = 0;
    for (var i = 0; i < view.length; i++) {
        if (view[i] == upSymbol) {
            result++;
        }
    }
    return result;
};

//                              
var NumberOfMoneySymbols = function (view) {
    var result = 0;
    for (var i = 0; i < view.length; i++) {
        if (view[i] == moneySymbol) {
            result++;
        }
    }
    return result;
};

//                           
var NumberOfHumanSymbols = function (view) {
    var result = 0;
    for (var i = 0; i < view.length; i++) {
        if (view[i] == humanSymbol) {
            result++;
        }
    }
    return result;
};

//                                     ,                        ,           -1       
var GetFloorNumber = function (view) {
    var result = 0;

    for (var i = 0; i < slotHeight; i++) {
        var symbol = view[2 + slotWidth * i];
        if (symbol == upSymbol) {
            result = upStairCount[Util.random(0, upStairCount.length)];
        } else if (symbol == downSymbol) {
            result = downStairCount[Util.random(0, downStairCount.length)];
        }
    }

    return result;
};

module.exports = SlotMachine;