var Util = require("../../../../utils/slot_utils")

function ApiManager() { }

ApiManager.prototype.InitApi = function (player, param) {
    var result = {
        def_s: "6,9,3,7,7,9,9,9,3,6,6,5,6,4,9,3,7,7,9,9,4,3,6,6,5,6,4,3,3,7,7,9,9,4,3,6,6,5,6,4,3,1,7,7,9,9,4,3,8",
        balance: "100,000.00",
        cfgs: "1",
        ver: "2",
        mo_s: "10",
        index: "1",
        balance_cash: "100,000.00",
        mo_v: "20,40,60,100,160,200,240,300,360,400,500,600,700",
        def_sb: "6,5,6,4,3,9,8",
        reel_set_size: "5",
        def_sa: "8,9,3,6,6,5,5",
        reel_set: "0",
        balance_bonus: "0.00",
        na: "s",
        scatters: "1~100,20,10,5,3,0,0~0,0,0,0,0,0,0~1,1,1,1,1,1,1",
        gmb: "0,0,0",
        rt: "d",
        gameInfo: "{rtps:{purchase:\"96.40\",regular:\"96.39\"},props:{max_rnd_sim:\"1\",max_rnd_hr:\"9322034\",max_rnd_win:\"5000\"}}",
        wl_i: "tbm~5000",
        stime: "1645607192604",
        sa: "8,9,3,6,6,5,5",
        sb: "6,5,6,4,3,9,8",
        sc: "10.00,20.00,30.00,40.00,50.00,100.00,200.00,300.00,400.00,500.00,750.00,1000.00,2000.00,3000.00,4000.00,5000.00",
        defc: "100.00",
        sh: "7",
        wilds: "2~0,0,0,0,0,0,0~1,1,1,1,1,1,1",
        bonuses: "0",
        fsbonus: "",
        c: "100.00",
        sver: "5",
        counter: "2",
        paytable
        l: "20",
        total_bet_max: "10,000,000.00",
        reel_set0: "4,8,3,6,9,9,8,5,6,7,3,8,9,4,9,8,6,7,7,8,3,7,3,5,8,7,9,9,6,9,5,4,8,3,9,4,6,5,8,9,9,7,9,6,6,6,7,4,9,9,7,8,7,8,9,8,7,7,3,8,6,7,6,5,6,5,5,3,4,7,5,9,4,6,4,3,8,8,6,5,8,8,4,4,1,6,5,9,7,6,7~9,7,5,4,3,5,3,7,8,8,7,9,4,9,5,8,5,4,7,6,4,7,6,9,3,5,5,7,8,4,9,9,8,7,9,4,9,4,9,6,6,8,5,4,5,8,3,6,6,7,9,6,9,6,7,9,7,3,5,7,8,7,7,8,4,9,4,6,6,6,7,9,9,4,8,6,4,8,3,8,6,8,6,9,5,6,8,8,3,4,9,4,8,8,5,6,7,8,7,8,5,8,6,6,3,7,3,7,9,7,8,9,8,3,9,4,3,3,9,8,5,6,1,7,7,8,7,9,7,5,5,9,9,3,6,8,1,9,6~9,5,6,6,7,9,4,5,9,9,5,7,6,3,7,3,5,5,4,9,7,9,8,7,5,6,5,4,7,9,7,7,8,9,5,3,7,9,5,6,8,9,9,6,9,6,7,7,3,8,6,8,9,6,6,6,4,6,7,8,9,7,7,8,3,3,4,8,6,8,4,7,8,1,4,7,9,6,4,1,4,8,6,9,5,8,5,7,4,3,5,3,7,8,4,8,8,6,9,8,3,4,3,8,9,6,7,8,9,8,9,8~5,8,7,3,8,4,7,4,7,8,7,8,8,3,5,9,9,4,8,9,5,7,7,1,9,5,7,7,9,8,3,6,9,8,8,9,5,3,8,5,7,9,5,9,6,8,4,9,7,6,6,3,8,4,7,4,7,3,4,9,9,8,4,6,1,6,6,8,5,8,3,9,5,7,8,6,7,4,6,6,6,7,9,7,6,5,3,7,6,7,6,6,8,4,4,7,7,4,8,9,5,9,9,8,4,6,9,5,8,6,6,3,7,5,8,9,5,9,8,8,5,3,4,6,3,6,3,4,7,8,5,5,3,7,7,4,4,9,5,3,9,9,6,3,6,9,9,8,7,9,7,4,9,9,8,6,9,7,8,6,8,8~7,6,8,5,5,3,5,8,6,9,5,3,9,8,9,4,7,9,5,8,6,1,8,7,5,3,5,8,7,7,5,8,8,3,3,6,4,4,9,7,8,9,5,3,4,5,7,6,4,6,6,9,9,8,7,9,3,4,5,9,6,3,3,9,3,3,6,7,6,8,7,8,7,9,1,6,9,7,7,5,8,8,3,4,8,4,9,9,4,7,9,8,6,5,5,7,8,5,9,6,6,9,5,7,4,9,7,4,8,9,8,9,9,6,4,6,9,8,6,7,4,7,7,8,4,8,7,4,7,8,4,9,8,7,8,3,7,9,6~6,7,4,5,7,9,7,7,4,5,8,9,4,9,9,8,8,6,7,8,5,7,9,5,3,7,7,5,6,9,8,7,8,5,7,5,6,8,9,8,4,4,6,9,6,3,6,6,5,7,9,8,8,6,9,9,3,9,7,5,3,4,8,6,5,8,6,3,6,7,4,8,7,8,7,8,8,7,3,5,8,5,1,3,8,4,4,9,4,9,8,7,7,6,4,5,8,8,5,4,9,7,9,6,1,7,9,8,9,9,7,3,8,4,9,6,9,3,3,7,4,6,5,7,4,8,7,4,7,3,8,9,6,9,8,8,3,5,3,6,5,3,9,6,8,9,9,6,9,9,7~6,4,6,9,8,6,3,7,8,9,5,6,7,5,8,9,7,9,7,6,8,9,9,8,5,8,9,8,8,6,9,5,8,4,5,6,4,6,9,6,6,3,6,9,3,7,4,5,7,8,7,8,9,5,7,9,8,8,7,6,5,5,4,3,9,7,4,3,8,1,6,7,7,5,8,7,6,9,8,5,7,7,6,9,9,5,5,9,8,5,7,5,6,8,1,8,5,4,6,4,9,6,4,4,8,4,8,9,7,9,7,3,8,3,4,3,8,7,3,6,3,4,4,7,7,9,5,3,7,7,9,7,6,4,9,9,8,5,9,8,7,4,3,9,8,4,3,9,3,8",
        s: "6,9,3,7,7,9,9,9,3,6,6,5,6,4,9,3,7,7,9,9,4,3,6,6,5,6,4,3,3,7,7,9,9,4,3,6,6,5,6,4,3,1,7,7,9,9,4,3,8",
        reel_set2: "8,6,8,8,5,3,9,5,4,8,9,2,5,11,9,4,7,3,9,3,10,3,9,7,7,7,4,6,9,3,9,5,9,5,8,7,7,6,7,5,8,8,7,8,8,7,8,8,6,3,10,10,10,10,1,7,5,8,8,7,9,5,9,5,7,3,9,8,7,2,6,10,6,4,5,4,9,3,9,6,6,6,10,7,6,9,1,5,7,10,9,10,9,6,2,9,8,8,7,4,6,7,3,9,9,10,7,9,9,8,4,11,7,5,4,9,8,8,7,6,10,10,7,4,7,6,7,7,8,10,4,10,4,9,8~6,10,5,9,9,6,3,8,1,4,6,11,5,9,4,4,10,7,9,9,2,5,9,6,8,7,3,7,7,7,3,7,3,8,10,7,8,8,7,6,9,7,5,8,8,4,4,8,8,5,8,9,9,2,4,9,8,3,4,10,10,10,10,9,7,10,6,4,6,9,7,4,8,7,5,9,6,10,2,8,8,5,6,7,7,9,7,11,5,10,7,8,6,6,6,4,9,10,9,6,8,7,5,8,8,7,10,5,5,9,6,5,8,10,10,7,3,7,8,1,7,7,10,9,9,4,7,7,8,5,3,7,5,4,3,9,9,3,5,8,8,10,8,9,9,7,6,3,6,9,7,9,6,7,4~9,4,3,7,4,2,3,4,6,7,7,8,4,5,7,8,5,7,9,6,4,8,9,8,7,4,8,6,3,5,6,9,8,7,7,7,8,3,8,9,8,9,5,9,4,7,10,9,5,3,1,6,8,8,7,6,7,9,8,5,6,9,3,3,10,7,2,5,4,2,10,10,10,10,7,9,4,7,9,8,7,6,8,9,6,6,7,11,7,7,6,9,5,9,8,4,9,5,7,8,6,3,9,7,3,9,10,6,6,6,7,8,3,10,7,7,8,7,5,9,8,6,8,4,10,7,8,10,9,5,2,9,7,7,10,6,8,6,9,3,7,9,4,10,9,9,7,8,8,5,5,4,5,8,4,1,8,7,5,7,10,5,4,9,5,8,3,6,9,10,7,9,8,10,4,10,7,8,11,10,10,9~7,4,4,7,9,11,7,8,6,8,10,9,7,9,9,7,4,3,5,8,3,7,11,4,8,6,8,9,4,5,7,8,6,10,8,7,4,7,7,7,4,9,6,7,9,10,3,7,2,3,7,6,8,7,8,9,1,10,8,9,8,5,10,8,8,3,3,9,4,1,9,4,8,7,9,8,6,10,4,10,10,10,10,4,5,3,4,10,7,9,3,8,8,10,9,8,9,9,3,3,5,4,7,9,8,3,8,7,6,8,9,10,3,7,6,8,8,5,8,6,5,6,6,6,7,5,7,8,8,5,4,6,8,3,3,4,7,5,6,5,6,7,6,2,9,7,7,10,9,9,8,7,7,9,7,9,10,7,10,5,7,8,9,9,5,2,10,8,6,9,4,4,2,5,5,10,6,9,7,9,9,6,6,7,10,5,6,5,7,9,9,10,5,6,7,8,4,5,9,9,7,5,6~5,10,3,8,4,7,8,2,4,9,3,8,9,8,7,9,7,7,6,5,9,9,7,7,8,5,8,8,10,6,6,9,10,9,7,10,10,8,7,7,7,5,7,6,7,6,1,9,3,5,8,3,9,8,4,5,7,9,4,6,6,9,4,9,7,6,7,7,9,8,6,8,10,5,11,9,3,9,5,3,10,6,10,10,10,10,7,5,9,10,5,2,9,4,4,6,4,10,6,8,7,9,8,10,11,8,5,3,9,9,5,3,8,4,9,4,3,8,8,3,4,9,5,10,4,2,8,9,9,7,8,7,5,9,4,7,7,8,5,7,7,9,8,5,4,7,10,8,6,9,7,8,4,9,8,7,8,10,6,7,9,6,3,7,1,7,3,6,9,7,7~9,7,8,8,5,4,7,8,8,5,3,9,5,7,8,6,6,5,8,5,3,9,7,6,6,3,6,7,6,8,8,4,9,9,5,9,10,8,9,7,4,7,7,7,8,7,11,5,7,9,7,8,5,10,4,7,8,7,9,7,8,9,8,7,3,3,7,7,10,5,7,8,6,8,5,6,9,4,9,8,4,4,10,7,9,6,9,10,10,10,10,9,8,6,8,3,7,10,4,4,10,9,8,5,7,9,9,4,10,8,1,10,8,8,3,10,7,9,3,5,8,4,4,7,9,9,7,9,7,5,6,9,7,4,9,9,8,4,4,5,9,7,7,2,5,7,8,9,8,6,10,7,2,8,11,3,10,7,5,6,3,3,9,1,9,3,6,6,9,8,10,5,6,9,10,6,10,4,2~9,10,7,4,7,8,4,7,5,10,8,4,5,3,9,11,10,7,2,5,9,4,10,7,7,7,6,10,9,3,9,2,7,6,6,9,7,6,7,7,8,8,7,3,7,6,7,7,5,6,11,11,11,11,7,9,10,10,7,6,10,5,7,8,6,8,9,5,7,4,8,6,8,3,4,9,9,7,10,10,10,10,11,9,8,4,8,6,10,10,6,5,10,1,8,8,9,5,7,9,3,9,5,4,3,9,8,8,8,9,8,8,10,7,9,5,1,4,9,4,7,6,4,9,9,3,8,5,9,7,8,5,6,6,6,3,7,4,5,5,3,2,9,7,6,7,7,8,4,8,9,11,6,8,8,3,5,7,5,9,9,6,9,7,8,3,8,11,8,8,3,9,8,7,8,10,8,9,4,2,5,6,6,9,11,10,4",
        t: "stack",
        reel_set1: "6,7,4,6,5,5,3,6,7,7,3,8,7,6,6,3,7,9,6,6,6,9,10,4,7,5,10,11,8,10,4,9,5,8,9,3,8,10,9,7,7,9,9,9,8,3,8,7,6,7,8,7,6,9,7,9,7,9,6,6,7,9,7,3,10,10,10,10,9,6,10,8,7,7,6,7,6,9,6,6,5,9,8,7,9,8,8,11,5,5,5,5,8,2,6,9,8,7,8,3,7,7,6,6,9,9,5,9,7,7,8,4,4,4,7,9,6,4,8,6,9,9,5,9,8,5,9,6,8,6,3,9,6,6,8,8,8,8,7,9,3,8,4,8,6,7,9,7,9,8,7,4,9,10,7,9,6,9,3,3,3,8,2,4,9,7,7,5,9,8,8,9,10,6,3,6,6,8,9,8,8,7,7,7,4,6,9,7,6,10,6,3,7,6,6,8,8,7,8,6,8,6,9,6,7~7,9,8,3,6,9,7,7,6,5,6,6,5,7,9,4,4,9,9,7,9,10,3,10,6,6,6,7,7,9,7,8,9,8,4,7,6,3,9,9,5,9,8,3,3,9,4,4,7,6,9,7,9,9,9,8,8,9,9,8,7,9,7,9,7,6,5,6,8,7,6,9,6,5,6,7,9,7,7,6,10,10,10,10,3,3,6,8,3,10,7,6,9,3,6,8,5,9,10,7,5,6,9,2,9,7,8,10,7,5,5,5,5,9,9,7,9,7,8,10,7,8,7,6,5,7,9,9,7,8,7,6,7,8,8,9,9,11,4,4,4,8,10,9,6,9,7,8,11,3,9,6,7,6,8,8,3,6,10,6,2,6,7,6,8,8,8,8,6,7,7,5,7,5,9,6,9,4,8,7,7,5,4,3,7,6,6,8,8,4,8,7,7,3,3,3,6,7,8,6,8,6,7,6,8,10,6,8,8,9,5,8,8,6,6,9,7,8,9,4,3,7,7,7,9,9,7,9,6,7,6,6,7,6,6,11,8,8,10,7,9,8,8,2,3,8,6,9,4,6~9,8,8,7,9,6,9,7,8,3,6,10,5,8,9,8,9,6,6,6,8,9,5,6,7,7,9,5,3,8,6,6,7,6,8,8,7,4,8,9,9,9,8,9,8,9,8,9,8,10,7,6,6,9,10,6,6,7,6,7,3,10,10,10,10,7,5,9,7,6,8,6,4,3,2,9,3,8,9,9,7,9,7,6,5,5,5,5,9,9,7,5,7,10,7,6,7,3,8,6,3,6,4,5,7,7,4,4,4,9,8,9,6,5,7,9,7,6,7,6,10,9,9,8,6,7,8,3,8,8,8,8,7,9,7,3,9,7,7,8,9,9,6,7,10,8,7,7,6,9,7,3,3,3,11,6,6,3,8,6,7,6,10,9,8,4,9,6,6,2,6,11,7,7,7,6,5,9,5,8,8,9,3,8,7,8,9,4,6,7,8,4,4,6,7~7,6,8,7,8,4,6,3,4,9,5,9,7,8,7,8,3,6,7,7,6,6,9,5,9,6,6,6,8,6,7,8,9,7,9,6,5,9,9,7,9,9,7,3,9,8,9,8,6,9,4,7,10,6,9,9,9,8,6,9,9,6,7,8,3,3,7,6,4,6,3,7,3,4,8,9,7,5,3,9,10,8,8,7,10,10,10,10,9,7,3,6,2,8,8,5,9,8,9,7,9,6,7,9,6,6,9,8,8,7,8,5,6,7,5,5,5,5,8,8,6,8,3,6,9,4,9,6,7,8,7,9,8,6,8,9,5,6,5,10,8,6,9,7,4,4,4,7,5,6,7,8,7,8,9,7,4,7,8,7,9,7,7,9,4,9,11,6,8,7,8,10,6,6,8,8,8,8,6,9,2,7,7,3,11,7,6,6,7,10,9,6,7,6,6,8,10,7,9,9,5,7,6,3,3,3,7,8,7,5,7,9,7,8,6,10,9,7,6,9,7,10,6,7,3,8,9,6,10,6,6,8,7,7,7,9,6,5,6,3,2,9,7,8,11,3,8,10,7,7,8,9,8,6,9,3,4,9,9,4,7,6,6~6,8,4,7,6,8,6,7,7,9,8,6,2,9,8,8,4,3,6,4,7,3,6,9,9,6,6,6,7,6,8,7,7,8,7,6,3,7,9,6,5,3,3,10,7,9,8,7,5,6,7,7,9,8,10,9,9,9,5,3,8,8,4,9,9,6,8,9,9,7,4,7,6,3,8,9,7,7,3,8,7,5,7,7,10,10,10,10,9,9,3,9,7,7,8,7,7,6,10,7,3,8,6,11,8,7,10,8,7,5,8,9,7,7,8,5,5,5,8,9,6,9,6,7,9,9,8,4,8,6,6,9,6,4,7,6,7,6,9,10,6,9,4,2,8,8,8,8,6,3,7,9,9,4,4,10,8,8,6,11,9,8,10,6,7,9,8,10,8,7,10,8,6,6,3,3,3,9,6,9,6,6,8,3,9,9,6,9,6,6,5,8,5,6,5,5,6,7,9,10,7,8,6,7,7,7,6,7,6,6,2,8,7,8,8,5,8,9,9,8,11,7,7,6,5,6,7,6,7,9,7,9,9,4,4,4,8,9,3,7,6,6,9,6,7,6,9,3,7,8,5,9,9,8,9,9,6,9,6,3,5,7,7,6~4,5,9,8,9,8,9,8,10,9,6,5,8,9,7,9,8,9,3,8,3,8,8,4,7,8,6,6,6,8,7,9,3,2,3,9,8,3,4,9,6,3,3,8,11,8,7,6,9,8,9,3,7,7,5,9,7,9,9,9,7,9,9,10,7,7,6,8,7,4,9,8,10,10,7,5,6,9,7,9,7,9,6,7,7,8,3,7,10,10,10,10,9,9,11,6,7,7,6,6,4,8,6,8,7,9,9,7,9,9,7,4,8,8,9,7,6,8,8,7,5,5,5,8,8,9,7,9,6,8,6,9,5,8,8,6,7,8,2,6,7,8,7,6,6,10,9,9,7,6,7,8,8,8,8,5,7,6,6,10,6,5,9,6,8,8,7,9,6,6,10,6,8,8,7,7,6,6,9,6,7,3,11,3,3,3,7,6,9,4,7,5,6,8,8,10,7,6,4,10,5,8,4,7,6,9,6,6,7,9,8,5,9,9,7,7,7,5,6,3,8,5,7,6,8,7,3,7,9,7,6,8,6,2,9,3,9,7,10,7,8,7,7,9,8,4,4,4,6,3,6,3,7,8,6,6,7,6,4,9,6,9,7,9,6,4,7,9,10,6,3,9,5,6,9,6,7,7~6,6,8,6,7,6,7,7,6,9,4,7,9,8,7,8,8,9,8,3,10,10,10,10,5,6,3,7,10,8,7,7,10,9,7,2,8,9,9,6,3,7,6,7,8,6,9,9,9,10,6,6,9,8,4,3,6,7,6,8,9,8,7,8,8,6,8,7,3,9,9,8,8,8,8,6,8,9,4,4,8,5,6,8,7,7,6,7,7,9,9,5,9,4,7,6,9,3,3,3,9,10,9,7,7,9,7,9,7,9,8,6,7,11,3,9,7,2,6,10,7,7,7,5,5,8,8,6,6,9,8,6,6,9,9,11,6,7,6,4,7,7,9,3,3,5,5,5,8,8,9,8,9,9,7,6,6,3,3,6,7,6,6,4,3,7,9,10,9,9,4,4,4,5,5,6,6,7,8,8,6,8,8,5,5,6,9,7,5,9,7,9,9,6,8,6,6,6,10,9,6,7,8,7,6,6,7,8,7,7,6,7,7,3,4,10,7,9,8,9,7",
        reel_set4: "5,10,7,5,7,7,8,10,7,7,9,6,8,10,6,8,7,5,9,5,6,5,6,10,10,10,10,8,6,8,9,1,7,9,7,4,5,6,8,7,9,9,3,7,4,9,9,8,8,3,7,6,6,6,9,10,3,10,4,9,8,6,5,7,10,4,4,2,7,1,3,7,5,10,5,4,8,10,7,7,7,4,3,5,8,9,6,4,5,9,3,4,11,9,7,10,9,8,3,8,8,9,7,8,7,9,9,11,2,9,9,8,4,7,6,10,7,6,5,2,8,9,3,9,9,8,4,6,8,8,7,9~7,9,5,4,1,6,8,6,9,5,9,6,4,8,8,3,7,10,5,7,10,11,9,4,8,4,10,10,10,10,5,9,8,6,4,8,7,6,7,7,8,4,5,3,7,7,8,10,10,2,5,8,5,9,9,3,7,6,6,6,4,11,9,6,4,9,8,3,5,9,2,3,9,3,7,7,8,7,10,10,5,5,3,8,9,8,9,7,7,7,6,5,7,4,5,8,3,10,8,7,8,8,7,7,3,9,7,9,6,8,7,4,7,8,8,9,6,9,9,6,8,6,9,10,6,10,9,6,8,4,2,9,7,7,8,7,1,5,7,10,3,10,9,4,6,5,9~5,6,11,10,3,4,8,7,8,1,3,4,7,4,9,4,7,9,9,6,7,6,9,6,9,7,8,5,10,10,10,10,8,9,8,6,5,9,8,7,3,9,7,5,7,6,3,8,4,7,5,6,4,9,7,9,10,7,10,5,3,6,6,6,7,7,3,6,7,7,9,8,10,5,8,6,9,10,7,1,5,8,8,10,8,10,11,9,8,4,3,7,6,7,7,7,8,9,5,8,7,3,8,8,5,4,6,7,6,9,4,9,9,10,7,2,8,4,9,3,10,5,9,7,2,3,9,9,8,9,8,8,3,6,7,4,7,4,8,4,5,9,6,8,8,2,10,10,5,5,8,7,9,5,10,7,9,9~7,8,10,4,8,10,2,9,9,4,7,9,7,10,4,5,6,5,6,9,4,11,10,4,2,7,9,6,5,4,8,10,10,10,10,7,10,7,9,10,8,8,5,7,5,4,11,8,6,8,6,5,1,8,3,7,9,8,9,3,9,9,8,8,10,5,5,6,6,6,7,9,7,9,7,5,2,7,5,9,6,8,8,7,3,6,7,7,8,8,3,4,6,8,3,5,10,10,5,5,6,9,7,7,7,5,7,6,4,6,10,7,8,5,9,9,4,9,3,5,7,10,7,4,9,8,8,7,9,3,4,7,4,10,6,9,8,9,9,7,2,9,9,3,7,8,8,5,6,7,6,9,9,4,6,9,3,9,10,8,9,6,4,3,9,1,8,9,3,8,8,7,3~5,8,6,8,3,7,9,7,8,3,9,9,6,10,9,9,5,10,9,3,8,8,2,5,6,8,9,9,5,5,9,9,5,5,10,10,4,3,4,10,9,6,10,8,8,3,5,10,10,10,10,8,10,10,3,7,6,6,9,4,9,8,4,9,9,8,3,5,9,6,5,9,7,9,10,7,9,9,7,6,1,8,4,7,5,8,7,10,8,3,6,6,8,6,7,4,3,4,7,7,7,1,5,8,9,8,9,4,9,5,8,10,7,8,8,4,11,7,7,8,7,4,4,5,7,9,8,4,2,9,6,7,9,7,7,4,7,6,2,9,4,7,10,5,3,10,10,9,7,9,9,8,9,6,7,2,3,7,9,8,6,8,9,7,5,3,5,7,10,7,6,5,4,5,4,10,4,4,6,8,9,11,8,9,7,6,7,8,9,7,8,8,5,3,9,7,7,3,6,8,6~6,8,6,9,5,7,2,7,4,8,7,9,5,9,8,6,9,7,6,10,9,4,5,8,10,7,10,10,10,10,8,10,3,8,5,8,9,7,8,7,9,7,3,4,6,4,6,8,9,2,5,9,7,7,9,3,6,7,7,7,5,6,10,8,10,5,5,7,11,4,2,3,4,9,9,4,1,5,10,9,8,10,8,7,8,4,9,9,8,3,3,6,5,10,9,9,8,7,5,7,9,9,11,7,8,10,7,4,4,9,6,1,8,3,6,3,7~8,7,10,3,4,5,10,9,4,8,9,6,9,6,6,11,6,5,5,6,7,8,3,5,8,7,2,3,3,8,8,7,9,10,9,4,7,6,10,10,10,10,9,8,5,9,9,7,7,5,7,8,5,6,9,8,6,9,4,9,10,5,8,5,10,8,7,9,8,3,5,9,10,8,5,4,9,8,9,7,4,8,8,8,10,8,7,8,3,9,9,7,3,7,7,5,6,5,8,2,8,5,4,1,7,3,7,8,8,9,8,8,9,6,9,8,4,2,8,9,7,9,9,7,7,7,4,8,9,3,4,8,4,5,9,4,9,7,7,9,6,6,3,6,6,9,9,10,8,4,8,10,5,4,7,9,7,3,3,6,10,1,7,8,5,9,9,4,5,5,7,7,8,9,9,4,7,5,10,10,7,9,9,11,4,10,4,8,7,3,7,10,8,10,7,10,2,7,9,8,7,6,8,7,6,9,3,6",
        purInit: "[{type:\"d\",bet:2000,bet_level:0}]",
        reel_set3: "9,5,9,3,9,7,9,5,3,7,5,7,9,5,3,5,3,5,5,7,5,5,7,3,7,9,7,3,9,7,3,3,9,7,3,9~4,6,6,4,8,4,4,6,4,4,4,8,4,6,4,4,8,8,4,8,6,6,6,4,6,4,6,4,8,8,6,6,8,8,8,6,4,6,6,8,8,6,4,6~9,9,3,7,3,5,3,9,5,3,5,7,9,7,5,5,7,9,9,7,7,3,7,5,5,9,7,3,3,5,5,7,3,9,7,9,9,5,3,3~6,4,6,8,6,6,4,4,8,8,6,4,4,4,6,8,6,6,8,6,6,4,4,8,6,6,6,4,6,8,6,8,4,6,4,4,8,6,4,8,8,8,6,4,8,8,4,4,8,8,6,6,4,8,4,8~3,5,9,3,5,9,5,9,3,7,5,7,7,9,3,7,3,7,7,5,7,3,3,7,9,9,3,5,3,5,7,7,5,3,9,9,3,5,9,5,9,7,9,3,3,9,5,5,7,7,5,9,5,9,3,7,5,9,3,7~4,6,6,4,4,8,8,6,8,4,6,4,8,4,4,4,6,4,4,6,6,8,8,6,6,8,4,8,4,8,6,6,6,4,6,8,8,6,4,4,8,6,4,6,8,4,6,8,8,8,6,4,8,6,6,4,8,4,6,4,6,8,6,8,8,4~5,7,3,9,5,3,7,9,3,7,9,5,9,7,5,3,3,9,7,5,9,5,3,7,7,5,7,5,5,3,3,7,3,9,7,9,5,3,7,3,9,3,9,3,5,9,7,3,9,5,9,5,7,5,9,7",
        total_bet_min: "10.00"
    };


    //              api            
    if (player.lastPattern) {
        for (var key in player.lastPattern) {
            result[key] = player.lastPattern[key];
        }
    }

    result["balance"] = player.balance;
    result["balance_cash"] = player.balance;
    result["index"] = param.index;
    result["counter"] = ++param.counter;

    if (player.betPerLine > 0) {
        result["c"] = player.betPerLine;
        result["defc"] = player.betPerLine;
    }
    return result;
};

ApiManager.prototype.GameApi = function (player, prevGameMode, param) {
    var result = {
        balance_bonus: "0",
        balance_cash: "100,000.00",
        balance: "100,000.00",
        c: "100.00",
        counter: "1",
        index: "1",
        l: "20",
        na: "s",
        reel_set: 1,
        s: "8,8,3,3,4,8,9,4,3,8,3,3,7,8,5,5,9,8,9,8,7,7,5,8,9,9,4,4,4,3,8,8,7,5,9,8,3,4,8,8,7,7,8,7,7,4,9,4,6",
        sa: "7,9,3,9,4,8,5",
        sb: "5,7,9,7,3,8,6",
        sh: "7",
        stime: new Date().getTime(),
        sver: "5",   
        tw: "0.00",
        w: "0.00",
    };

    //          ,                          
    var screenAbove = Util.view2String(player.machine.virtualReels.above);
    var screenBelow = Util.view2String(player.machine.virtualReels.below);
    result["sa"] = screenAbove;
    result["sb"] = screenBelow;
    result["s"] = Util.view2String(player.machine.view);
    result["c"] = player.betPerLine;

    //                                 
    var winLines = player.machine.winLines;
    for (var i = 0; i < winLines.length; i++) {
        result[`l${i}`] = winLines[i];
    }

    result["index"] = param.index;
    result["counter"] = ++param.counter;
    result["balance"] = player.balance;
    result["balance_cash"] = player.balance;
    result["tw"] = player.machine.winMoney;
    result["w"] = player.machine.winMoney;


    //             api
    if (player.machine.moneyCache.length > 0) {
        result["mo"] = player.machine.moneyCache.join();
        var mo_t = [];
        for (var i = 0; i < player.machine.moneyCache.length; i++) {
            if (player.machine.moneyCache[i] != 0) {
                mo_t[i] = "v"
            } else {
                mo_t[i] = "r"
            }
        }
        result["mo_t"] = mo_t.join();
    }

    if (player.machine.view.indexOf(13) != -1) {
        result["values_info"] = `cl_v#${player.machine.view.indexOf(13)}:${player.machine.extraVal}`;
    }

    if (player.machine.prevTumbleStatus == "NOTUMBLE" && player.machine.tumbleStatus == "TUMBLE") {
        result["rs_c"] = 1;
        result["rs_m"] = 1;
        result["rs_p"] = 0;
        result["rs"] = "mc";
        result["tmb"] = player.machine.tumbles.join('~');
        result["tmb_win"] = player.machine.tmb_win;
    }

    if (player.machine.currentGame != "FREE" && player.machine.prevTumbleStatus == "TUMBLE") {
        result["na"] = "s";

        if (player.machine.tumbleStatus == "TUMBLE") {
            result["rs_c"] = 1;
            result["rs_m"] = 1;
            result["rs_p"] = player.machine.tumbleIndex;
            result["tmb"] = player.machine.tumbles.join('~');
            result["tmb_win"] = player.machine.tmb_win;
            result["tw"] = player.machine.tmb_win;
            result["w"] = player.machine.winMoney;
            result["rs"] = "mc";
        } else if (player.machine.tumbleStatus == "NOTUMBLE") {

            result["rs_t"] = player.machine.tumbleIndex;
            result["tw"] = player.machine.tmb_res;
            result["w"] = 0;
            result["tmb_res"] = player.machine.tmb_res;
            result["tmb_win"] = player.machine.tmb_res;
            result["na"] = "c";
        }
    }

    if (player.machine.tumbleStatus == "NOTUMBLE") {
        //                 api
        if (player.machine.sepcialSymbolVal == 12) {
            if (player.machine.winMoney != 0) {
                var moneyPos = [];
                for (var i = 0; i < player.machine.moneyCache.length; i++) {
                    if (player.machine.moneyCache[i] != 0) {
                        moneyPos.push(i);
                    }
                }
                result["g"] = `{c${player.machine.view.indexOf(12)}:{mo_c:"1",mo_tv:"${player.machine.winMoney}",mo_tw:"${player.machine.tmb_win}",mo_wpos:"${moneyPos.join(",")}"}}`;
                result["trail"] = `ipv~${player.machine.trailMoney}`;
            }
        }
        else if (player.machine.sepcialSymbolVal == 13) {
            //                
            if (player.machine.winMoney != 0) {
                var extraStrArr = [], moneyPos = [];

                for (var i = 0; i < 49; i++) {
                    extraStrArr.push(0);
                }

                var j = 0;
                for (var i = 0; i < player.machine.moneyCache.length; i++) {
                    if (player.machine.moneyCache[i] != 0) {
                        moneyPos.push(i);
                        extraStrArr[i] = player.machine.moneyCache[i] - player.machine.extraAddition[j];
                        j++;
                    }
                }

                result["g"] = `{c${player.machine.view.indexOf(13)}:{mo_c:"1",mo_tv:"${player.machine.winMoney}",mo_tw:"${player.machine.tmb_win}",mo_wpos:"${moneyPos.join(",")}"}}`;
                result["trail"] = `prev_mo~bc${player.machine.view.indexOf(13)}:${extraStrArr.join("#")};ipv~${player.machine.trailMoney}`;
                result["values_info"] = `cl_v#${player.machine.view.indexOf(13)}:${player.machine.extraVal}`;
            }
        } else if (player.machine.sepcialSymbolVal == 15) {
            //                      

            if (player.machine.winMoney != 0) {
                var moneyPos = [], srfArr = [], addStrArr = [];

                for (var i = 0; i < player.machine.moneyCache.length; i++) {
                    if (player.machine.moneyCache[i] != 0) {
                        moneyPos.push(i);
                        j++;
                    }
                }

                var tumbleMoneyPos = [];
                for (var i = 0; i < player.machine.addSym.length; i++) {
                    var resStr = `${player.machine.addSym[i].symVal}~10~${player.machine.addSym[i].pos}`;
                    srfArr.push(resStr);

                    tumbleMoneyPos.push(player.machine.addSym[i].pos);
                }

                var prevMoneyPos = [];
                for (var i = 0; i < moneyPos.length; i++) {
                    if (tumbleMoneyPos.indexOf(moneyPos[i]) == -1) {
                        prevMoneyPos.push(moneyPos[i]);
                    }
                }

                for (var i = 0; i < 49; i++) {
                    addStrArr.push(0);
                }

                for (var i = 0; i < prevMoneyPos.length; i++) {
                    addStrArr[prevMoneyPos[i]] = player.machine.moneyCache[prevMoneyPos[i]];
                }


                result["is"] = player.machine.view.join();
                result["s"] = player.machine.addisView.join();

                result["g"] = `{c${player.machine.view.indexOf(15)}:{mo_c:"1",mo_tv:"${player.machine.winMoney}",mo_tw:"${player.machine.winMoney}",mo_wpos:"${moneyPos.join(",")}"}}`;
                result["stf"] = `c${player.machine.view.indexOf(15)}:${srfArr.join(';')}`;
                result["trail"] = `prev_mo~bc${player.machine.view.indexOf(15)}:${addStrArr.join("#")};ipv~${player.machine.trailMoney}`;
            }

        } else {
            result["trail"] = `ipv~${player.machine.trailMoney}`;
        }

    }



    if (prevGameMode == "BASE") {
        if (player.machine.currentGame == "FREE") {
            result["fs"] = 1;
            result["fsmax"] = player.machine.freeSpinLength;
            result["fsmul"] = 1;
            result["fswin"] = "0.00";
            result["fsres"] = "0.00";
            result["puri"] = 0;
            result["purtr"] = 1;
            result["psym"] = `1~${player.machine.scatterWin}~${player.machine.scatterPositions.join(",")}`;
            result["na"] = "s";
        }
    } else if (prevGameMode == "FREE") {
        //                       
        result["tw"] = player.machine.freeSpinWinMoney;
        if (player.machine.tumbleStatus == "TUMBLE") {
            result["rs_c"] = 1;
            result["rs_m"] = 1;
            result["rs_p"] = player.machine.tumbleIndex;
            result["rs"] = "mc";
            result["tmb"] = player.machine.tumbles.join('~');
            result["tmb_win"] = player.machine.tmb_win;
            result["tw"] = player.machine.freeSpinWinMoney;
            result["w"] = player.machine.winMoney;
        } else if (player.machine.tumbleStatus == "NOTUMBLE") {
            result["rs_t"] = player.machine.tumbleIndex;
            result["w"] = 0;
        }
        result["puri"] = 0;

        if (player.machine.currentGame == "FREE") {
            if (player.machine.freeSpinIndex <= player.machine.freeSpinLength) {
                result["na"] = "s";
                result["fs"] = player.machine.freeSpinIndex;
                result["fsmax"] = player.machine.freeSpinLength;
                result["fsmul"] = 1;
                result["fswin"] = player.machine.freeSpinWinMoney;
                result["fsres"] = player.machine.freeSpinWinMoney;
            } else {
                //                 ->                 
                result["fs_total"] = player.machine.freeSpinLength;
                result["fsmul_total"] = 1;
                result["fswin_total"] = player.machine.freeSpinWinMoney;
                result["fsres_total"] = player.machine.freeSpinWinMoney;
                result["w"] = player.machine.freeSpinWinMoney;
                result["rs_c"] = 1;
                result["rs_m"] = 1;
                result["rs_p"] = 0;
                result["rs"] = "mc";
                result["puri"] = 0;
                result["reel_set"] = 2;

                result["fsend_total"] = 0;

                result["apt"] = "ma";
                result["apv"] = player.machine.trailMoney;
                result["apwa"] = player.machine.freeSpinWinMoney;

                result["na"] = "s";
            }

        } else if (player.machine.currentGame == "BASE") {
            //                                            
            result["na"] = "c";
            result["reel_set"] = 1;
            result["fsend_total"] = 1;
            result["fs_total"] = player.machine.freeSpinLength;
            result["fsmul_total"] = 1;
            result["fswin_total"] = player.machine.freeSpinWinMoney;
            result["fsres_total"] = player.machine.freeSpinWinMoney;
            result["rs_t"] = 1;
            result["tw"] = player.machine.freeSpinWinMoney;
        }
    }

    return result;
}

ApiManager.prototype.CollectApi = function (player, param) {
    var result = {
        balance_bonus: "0.0",
        balance_cash: "100,000.00",
        balance: "100,000.00",
        counter: "2",
        index: "3",
        na: "s",
        stime: "1629939208592",
        sver: "5",
    };

    result["balance"] = player.balance;
    result["balance_cash"] = player.balance;
    result["stime"] = new Date().getTime();
    result["index"] = param.index;
    result["counter"] = ++param.counter;

    return result;
}

module.exports = ApiManager;